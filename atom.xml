<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Sample Site Posts</title><id>https://matsubara0507.github.io/scrapbook-example/atom.xml</id><updated>2020-07-16T12:08:20.505+09:00</updated><link href="https://matsubara0507.github.io/scrapbook-example"/><entry><id>http://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2020-07-16T12:08:20.505+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/07-12-haskell-language-server.html</id><title type="text">Haskell Language Server のインストール</title><updated>2020-07-12T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/07-12-haskell-language-server.html"/><summary type="html">&lt;p&gt;HLS(Haskell Language Server) を &lt;strong&gt;手動で&lt;/strong&gt; インストールする方法を説明します。&lt;/p&gt;
&lt;p&gt;HLSを &lt;strong&gt;自動で&lt;/strong&gt; インストールする方法は以下のPRで開発中です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server/pull/165&#34;&gt;GitHub Action static binaries and runtime libdir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alanz/vscode-hie-server/pull/236&#34;&gt;Automatic installation of haskell-language-server binaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;実行環境&#34;&gt;実行環境&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 66%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;環境&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;OS&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Ubuntu 18.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Stack&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;2.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;HLS&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;ghcide version: 0.2.0.0 (GHC: 8.8.3) (PATH: ~/.local/bin/haskell-language-server) (GIT hash: 768fdcd588f5c37839086c0d787d1cb7438de37b)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;導入手順&#34;&gt;導入手順&lt;/h2&gt;
&lt;h3 id=&#34;hls-のインストール&#34;&gt;1. HLS のインストール&lt;/h3&gt;
&lt;p&gt;インストールには以下のものが必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt; (バージョン2.1.1以上)
&lt;ul&gt;
&lt;li&gt;または、&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/&#34;&gt;cabal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icu&lt;/code&gt; のライブラリなど&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必要に応じてインストールしておきましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack upgrade
$ sudo apt update
$ sudo apt install libicu-dev libncurses-dev libgmp-dev zlib1g-dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;準備ができたらHLSを&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;リポジトリ&lt;/a&gt;からクローンしてインストールしましょう。(以下の例では &lt;strong&gt;GHC-8.8.3&lt;/strong&gt; を対象としています。)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/haskell/haskell-language-server --recurse-submodules
$ cd haskell-language-server
$ stack ./install.hs hls&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールができました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ haskell-language-server --version
ghcide version: 0.2.0.0 (GHC: 8.8.3) (PATH: /home/yamada/.local/bin/haskell-language-server) (GIT hash: 768fdcd588f5c37839086c0d787d1cb7438de37b)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;エディタの設定&#34;&gt;エディタの設定&lt;/h2&gt;
&lt;h3 id=&#34;vscode&#34;&gt;VSCode&lt;/h3&gt;
&lt;p&gt;拡張機能 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alanz.vscode-hie-server&#34;&gt;Haskell Language Server&lt;/a&gt; をインストールし、 設定から &lt;code&gt;haskell-language-server&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2020/07-12/hls-vscode.png&#34; alt=&#34;VSCodeの設定&#34; /&gt;&lt;figcaption aria-hidden=&#34;true&#34;&gt;VSCodeの設定&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;emacs&#34;&gt;Emacs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/hie/emacs.html&#34;&gt;こちら&lt;/a&gt;の記事を参考に、 &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-haskell&#34;&gt;lsp-haskell&lt;/a&gt; をEmacsにインストールします。&lt;/p&gt;
&lt;p&gt;設定ファイルで以下のように &lt;code&gt;haskell-language-server-wrapper&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(use-package lsp-haskell
 :ensure t
 :config
 (setq lsp-haskell-process-path-hie &amp;quot;haskell-language-server-wrapper&amp;quot;)
 ;; Comment/uncomment this line to see interactions between lsp client/server.
 ;;(setq lsp-log-io t)
)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/hie/emacs.html&#34;&gt;Emacs で Haskell IDE Engine を使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>http://kurokawh.blogspot.com/2019/11/mac-mojava.html</id><title type="text">[mac] Mojavaクリーンインストール</title><updated>2020-05-06T17:02:25.994+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2019/11/mac-mojava.html"/><summary type="text">Mojavaへのアップデートを契機にmac book airを初期化して環境をクリーンセットアップしました。
自分にとって使いやすい環境の設定手順および、インストールしたアプリ群の情報をメモがわりに残しておきます。



システム環境設定

トラックパッド

軌跡の速さを速くする 
「スクロールとズーム」内の「スクロールの方向」を「ナチュラル」にする
「その他のジェスチャー」内の全てのチェックを外す

アクセシビリティ

マウスとトラックパッド

トラックパッドオプション

「ドラッグを有効にする」にチェック

→ダブルタップでドラッグできるようになる

「ドラッグロックなし」を選択

→トラックパッドから手を離すとドラッグ解除





キーボード

キーボード

F1, F2などのキーを標準のファンクションキーとして利用する：チェック
修飾キー：ControlとOptionを</summary></entry><entry><id>http://kurokawh.blogspot.com/2020/05/linux-gnupg.html</id><title type="text">[linux] gnupgによる暗号化処理時の確認プロンプトを抑制する方法</title><updated>2020-05-06T16:37:57.790+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2020/05/linux-gnupg.html"/><summary type="text">gnupgを用いてファイルを暗号化する際、予めインポートした公開鍵に対してtrust設定をしておかないと、指定した公開鍵毎に以下のような警告が発せられます。


% gpg -e -r abc@test.org a.txt 
gpg: AAAA4C0DD6F2ZZZZ: この鍵が本当に本人のものである、という兆候が、ありません

sub  elg2048/AAAA4C0DD6F2ZZZZ 2020-05-06 Hiroyuki Kurokawa &lt;abc@test.org&gt;
  主鍵フィンガープリント: &lt;snip&gt;
  副鍵フィンガープリント: &lt;snip&gt;

この鍵は、このユーザIDをなのる本人のものかどうか確信でき
ません。今から行うことを＊本当に＊理解していない場合には、
次の質問にはnoと答えてください。

それでもこの鍵を使いますか? (y/N)

以下のオプションを指定する</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html</id><title type="text">stack で管理されたプロジェクトを cabal でビルドするために</title><updated>2020-05-02T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html"/><summary type="html">&lt;p&gt;Haskell のビルドツールといえば &lt;strong&gt;cabal&lt;/strong&gt; と &lt;strong&gt;stack&lt;/strong&gt; です。ちょっと前までは &lt;strong&gt;cabal&lt;/strong&gt; より &lt;strong&gt;stack&lt;/strong&gt; の方が流行っていたのですが、最近は開発も落ち着いているようであまり動きがありません。それよりも &lt;strong&gt;cabal&lt;/strong&gt; の &lt;strong&gt;nix-style local build&lt;/strong&gt; が非常に使いやすく、近頃では &lt;strong&gt;stack&lt;/strong&gt; から &lt;strong&gt;cabal&lt;/strong&gt; に移行しているプロジェクトも多くあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; を使っていて改善したら良いなぁと思う部分としては、新しい &lt;strong&gt;GHC&lt;/strong&gt; やライブラリをすぐに使おうと思っても &lt;strong&gt;LTS&lt;/strong&gt; や &lt;strong&gt;nightly&lt;/strong&gt; に入っていないため使えなかったり、&lt;strong&gt;Backpack&lt;/strong&gt; が未だに使えなかったりするところでしょうか。&lt;/p&gt;
&lt;p&gt;ただ、ビルドの再現性という点においては &lt;strong&gt;stack&lt;/strong&gt; の方が優秀だと思っているので今は両方使っています。(&lt;strong&gt;index-state&lt;/strong&gt; と &lt;strong&gt;freeze&lt;/strong&gt; ファイルを組み合わせれば &lt;strong&gt;cabal&lt;/strong&gt; でも再現性が保証されそうな気がしますが、どうなんだろう)&lt;/p&gt;
&lt;p&gt;今回は &lt;strong&gt;stack&lt;/strong&gt; で管理されたプロジェクトを確実に &lt;strong&gt;cabal&lt;/strong&gt; でビルドするための方法についてまとめました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/why-not-both-8adadb71a5ed&#34;&gt;Why Not Both?&lt;/a&gt; に載ってた &lt;strong&gt;Stackage&lt;/strong&gt; の使い方の紹介でもあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;ここでは &lt;strong&gt;stack&lt;/strong&gt; で管理されていて、&lt;strong&gt;cabal&lt;/strong&gt; ファイルにバージョン制約が明記されていないという、良くあるシチュエーションを考えます。&lt;/p&gt;
&lt;p&gt;どんなプロジェクトでも良いのですが、具体的には &lt;a href=&#34;https://github.com/arcticmatt/dino-brick&#34;&gt;arcticmatt/dino-brick&lt;/a&gt; のようなプロジェクトです。&lt;code&gt;stack.yaml&lt;/code&gt; は以下のようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-8.23&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arcticmatt/dino-brick/blob/dino/dino.cabal#L16&#34;&gt;dino.cabal の build-depends&lt;/a&gt; には、ほとんどバージョンが明記されていません。(&lt;strong&gt;stack&lt;/strong&gt; の場合はスナップショットが決まると自動的にパッケージのバージョンが決まるため、明示する必要はあまり無いのです)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build-depends&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , brick&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , containers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , linear&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens-th&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , random&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , vty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , MonadRandom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このプロジェクトを &lt;strong&gt;cabal&lt;/strong&gt; でビルドするためにはどうしたら良いんだろうか？というお話です。何もしなくてもビルドできるプロジェクトも結構あるんですが、ハマる時もあります・・・。&lt;/p&gt;
&lt;h2 id=&#34;package.yaml-から-cabal-ファイルを生成する&#34;&gt;package.yaml から cabal ファイルを生成する&lt;/h2&gt;
&lt;p&gt;リポジトリに &lt;code&gt;package.yaml&lt;/code&gt; しか含まれていない場合は、&lt;code&gt;package.yaml&lt;/code&gt; から &lt;strong&gt;cabal&lt;/strong&gt; ファイルを生成しましょう。&lt;/p&gt;
&lt;p&gt;以下のコマンドでビルドすることなくすぐに生成できます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack build --dry-run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回は &lt;code&gt;dino.cabal&lt;/code&gt; が最初からリポジトリに含まれているため何もしなくても良さそうですね。&lt;/p&gt;
&lt;h2 id=&#34;cabal-でビルドしてみよう&#34;&gt;cabal でビルドしてみよう&lt;/h2&gt;
&lt;p&gt;とりあえずビルドしてみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick

$ cabal update
Downloading the latest package list from hackage.haskell.org
To revert to previous state run:
    cabal v2-update &amp;#39;hackage.haskell.org,2020-01-19T06:12:36Z&amp;#39;

$ cabal build
...

src/UI.hs:142:56: error:
    • Couldn&amp;#39;t match expected type ‘App s0 e0 n0’
                  with actual type ‘Game’
    • In the fourth argument of ‘customMain’, namely ‘g’
      In a stmt of a &amp;#39;do&amp;#39; block:
        customMain (V.mkVty V.defaultConfig) (Just chan) app g
      In the expression:
        do chan &amp;lt;- newBChan 10
           forkIO
             $ forever
                 $ do modifyIORef counter (+ 1)
                      c&amp;#39; &amp;lt;- readIORef counter
                      ....
           g &amp;lt;- initGame 0
           customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |
142 |   customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |                                                        ^
cabal: Failed to build dino-0.1.0.0 (which is required by exe:dino from
dino-0.1.0.0).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラーがいくつも出てしまいました。上記の結果はそのうちの最後の1つだけを表示しています。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;stack build&lt;/code&gt; だとビルドできます。&lt;/p&gt;
&lt;h3 id=&#34;問題点&#34;&gt;問題点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; だとビルドできて、&lt;strong&gt;cabal&lt;/strong&gt; だと失敗してしまう原因はビルド時にパッケージのバージョンにあります。どのパッケージが原因かと言うと、今回は &lt;a href=&#34;https://hackage.haskell.org/package/brick&#34;&gt;brick&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt; の場合は &lt;a href=&#34;https://www.stackage.org/lts-8.23&#34;&gt;LTS-8.23&lt;/a&gt; に含まれるバージョンを利用することになるので &lt;a href=&#34;https://www.stackage.org/lts-8.23/package/brick-0.17.2&#34;&gt;brick-0.17.2&lt;/a&gt; を利用します。&lt;/p&gt;
&lt;p&gt;一方で &lt;strong&gt;cabal&lt;/strong&gt; の場合は &lt;code&gt;cabal update&lt;/code&gt; を最後に実行した時の &lt;strong&gt;Hackage&lt;/strong&gt; の最新バージョンが利用されます。これは明示的なバージョン制約が &lt;strong&gt;cabal&lt;/strong&gt; ファイルに記述されていないためです。そのため &lt;a href=&#34;https://hackage.haskell.org/package/brick-0.50.1&#34;&gt;brick-0.50.1&lt;/a&gt; などが利用されます。&lt;/p&gt;
&lt;p&gt;バージョンアップによって後方互換性が保たれている場合は何も考えずにビルドが通るのですが、&lt;strong&gt;GHC&lt;/strong&gt; のバージョンが変わるタイミングなどでは破壊的変更が含まれている場合も多いため、どこかでビルドが壊れます。&lt;/p&gt;
&lt;p&gt;今回のプロジェクトでは &lt;a href=&#34;https://github.com/jtdaugherty/brick/blob/master/CHANGELOG.md#047&#34;&gt;brick-0.47&lt;/a&gt; の変更によって &lt;code&gt;Brick.Main.customMain&lt;/code&gt; の型が変わり、その結果ビルドエラーになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.46&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customMain ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt;        &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BChan&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; s e n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.47&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customMain ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Vty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;BChan&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; s e n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、原因が特定できれば、修正は簡単です。&lt;code&gt;brick&lt;/code&gt; にバージョン制約を付けるだけです。(0.47 でビルドできるようにコードを修正する方法ももちろん考えられます)&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick == 0.46       -- 破壊的変更が起きる前のバージョンを指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロジェクトはこれで上手く動きました。&lt;/p&gt;
&lt;p&gt;しかし、どのバージョンで壊れたかどうかを毎回調べるのはかなりつらいです。そのため、もっと良い方法として &lt;code&gt;LTS-8.23&lt;/code&gt; のバージョン制約を使ってみましょう。&lt;/p&gt;
&lt;h2 id=&#34;cabal-freeze-コマンド&#34;&gt;cabal freeze コマンド&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; には &lt;code&gt;cabal freeze&lt;/code&gt; というコマンドがあります。アプリケーション開発で便利な機能です。&lt;/p&gt;
&lt;p&gt;コマンドを実行すると &lt;code&gt;cabal.project.freeze&lt;/code&gt; というファイルが作られます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal freeze
Wrote freeze file: dino-brick/cabal.project.freeze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルは一言でいえば &lt;code&gt;npm&lt;/code&gt; の &lt;code&gt;package-lock.json&lt;/code&gt; ファイルと同じです。ビルドの再現性を保証するためのものです。&lt;/p&gt;
&lt;p&gt;例えば、先ほどの &lt;code&gt;dino.cabal&lt;/code&gt; ファイルで &lt;code&gt;brick&lt;/code&gt; のバージョンを &lt;code&gt;^&amp;gt;= 0.46&lt;/code&gt; のように指定した場合を考えてみましょう。この指定方法は &lt;code&gt;brick &amp;gt;= 0.46 &amp;amp;&amp;amp; &amp;lt; 0.47&lt;/code&gt; と同じ意味になります。(&lt;strong&gt;cabal 2.0&lt;/strong&gt; から利用可能な記法です)&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick ^&amp;gt;= 0.46      -- brick &amp;gt;= 0.46 &amp;amp;&amp;amp; &amp;lt; 0.47 と同じ意味
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば、会社のデスクトップPCでビルドしたときに &lt;code&gt;brick-0.46&lt;/code&gt; がインストールされたとしましょう。&lt;/p&gt;
&lt;p&gt;次の日の朝、バグフィックスされた &lt;code&gt;brick-0.46.1&lt;/code&gt; が &lt;strong&gt;Hackage&lt;/strong&gt; にアップロードされました。&lt;/p&gt;
&lt;p&gt;その日の午後、自宅のノートPCで &lt;code&gt;cabal update &amp;amp;&amp;amp; cabal build&lt;/code&gt; を行った場合、インストールされるのは &lt;code&gt;brick-0.46.1&lt;/code&gt; になります。&lt;/p&gt;
&lt;p&gt;つまり、&lt;code&gt;brick ^&amp;gt;= 0.46&lt;/code&gt; という指定方法では環境ごとに同じバージョンが使われていることを保証できません。そのため、&lt;code&gt;cabal freeze&lt;/code&gt; コマンドで &lt;code&gt;cabal.project.freeze&lt;/code&gt; を生成し、コマンドを実行した環境で実際に利用されている具体的なバージョンを記録しておきます。これは &lt;strong&gt;stack&lt;/strong&gt; のスナップショットと同じようなものです。&lt;/p&gt;
&lt;p&gt;実際に生成されたファイルの中身はこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;constraints: any.Cabal ==2.4.0.1,
             any.MonadRandom ==0.5.1.2,
             any.QuickCheck ==2.13.2,
             QuickCheck +templatehaskell,
             any.StateVar ==1.2,
             any.adjunctions ==4.4,
             any.ansi-terminal ==0.10.2,
             ansi-terminal -example,
             any.ansi-wl-pprint ==0.6.9,
             ansi-wl-pprint -example,
             any.array ==0.5.3.0,
             any.base ==4.12.0.0,
             any.base-orphans ==0.8.1,
             any.bifunctors ==5.5.6,
             bifunctors +semigroups +tagged,
             any.binary ==0.8.6.0,
             any.binary-orphans ==1.0.1,
             any.blaze-builder ==0.4.1.0,
             any.brick ==0.46,
             brick -demos,
             any.bytes ==0.16,
             bytes +test-doctests,
             any.bytestring ==0.10.8.2,
             any.cabal-doctest ==1.0.8,
             any.call-stack ==0.2.0,
             any.case-insensitive ==1.2.1.0,
             any.cereal ==0.5.8.1,
             cereal -bytestring-builder,
             any.colour ==2.3.5,
             any.comonad ==5.0.6,
             comonad +containers +distributive +test-doctests,
             any.config-ini ==0.2.4.0,
             config-ini -enable-doctests,
             any.containers ==0.6.0.1,
             any.contravariant ==1.5.2,
             contravariant +semigroups +statevar +tagged,
             any.data-clist ==0.1.2.3,
             any.deepseq ==1.4.4.0,
             any.directory ==1.3.3.0,
             any.distributive ==0.6.1,
             distributive +semigroups +tagged,
             any.dlist ==0.8.0.7,
             any.exceptions ==0.10.4,
             exceptions +transformers-0-4,
             any.filepath ==1.4.2.1,
             any.free ==5.1.3,
             any.ghc-boot-th ==8.6.5,
             any.ghc-prim ==0.5.3,
             any.hashable ==1.3.0.0,
             hashable -examples +integer-gmp +sse2 -sse41,
             any.integer-gmp ==1.0.2.0,
             any.integer-logarithms ==1.0.3,
             integer-logarithms -check-bounds +integer-gmp,
             any.invariant ==0.5.3,
             any.kan-extensions ==5.2,
             any.lens ==4.18.1,
             lens -benchmark-uniplate -dump-splices +inlining -j -old-inline-pragmas -safe +test-doctests +test-hunit +test-properties +test-templates +trustworthy,
             any.linear ==1.20.9,
             linear -herbie +template-haskell,
             any.megaparsec ==7.0.5,
             megaparsec -dev,
             any.microlens ==0.4.11.2,
             any.microlens-mtl ==0.2.0.1,
             any.microlens-th ==0.4.3.2,
             any.mtl ==2.2.2,
             any.optparse-applicative ==0.15.1.0,
             any.parallel ==3.2.2.0,
             any.parsec ==3.1.13.0,
             any.parser-combinators ==1.2.1,
             parser-combinators -dev,
             any.pretty ==1.1.3.6,
             any.primitive ==0.7.0.0,
             any.process ==1.6.5.0,
             any.profunctors ==5.5.1,
             any.random ==1.1,
             any.reflection ==2.1.5,
             reflection -slow +template-haskell,
             any.rts ==1.0,
             any.scientific ==0.3.6.2,
             scientific -bytestring-builder -integer-simple,
             any.semigroupoids ==5.3.4,
             semigroupoids +comonad +containers +contravariant +distributive +doctests +tagged +unordered-containers,
             any.semigroups ==0.19.1,
             semigroups +binary +bytestring -bytestring-builder +containers +deepseq +hashable +tagged +template-haskell +text +transformers +unordered-containers,
             any.splitmix ==0.0.3,
             splitmix -optimised-mixer +random,
             any.stm ==2.5.0.0,
             any.tagged ==0.8.6,
             tagged +deepseq +transformers,
             any.template-haskell ==2.14.0.0,
             any.terminfo ==0.4.1.2,
             any.text ==1.2.3.1,
             any.text-zipper ==0.10.1,
             any.th-abstraction ==0.3.1.0,
             any.time ==1.8.0.2,
             any.transformers ==0.5.6.2,
             any.transformers-base ==0.4.5.2,
             transformers-base +orphaninstances,
             any.transformers-compat ==0.6.5,
             transformers-compat -five +five-three -four +generic-deriving +mtl -three -two,
             any.type-equality ==1,
             any.unix ==2.7.2.2,
             any.unordered-containers ==0.2.10.0,
             unordered-containers -debug,
             any.utf8-string ==1.0.1.1,
             any.vector ==0.12.0.3,
             vector +boundschecks -internalchecks -unsafechecks -wall,
             any.void ==0.7.3,
             void -safe,
             any.vty ==5.26,
             any.word-wrap ==0.4.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cabal.project.freeze&lt;/code&gt; ファイルと &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; ファイルでバージョンが異なる場合は &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; のバージョンが優先されるようです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library:
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , brick ^&amp;gt;= 0.47      -- ビルドが失敗するバージョン制約を指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal build
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: brick, dino

$ cabal freeze
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: brick, dino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そもそも制約を満たさない場合は &lt;code&gt;cabal freeze&lt;/code&gt; が失敗するみたいです。&lt;/p&gt;
&lt;h2 id=&#34;スナップショットに対応した-freeze-ファイルを使おう&#34;&gt;スナップショットに対応した freeze ファイルを使おう&lt;/h2&gt;
&lt;p&gt;さて、それではリポジトリを &lt;strong&gt;clone&lt;/strong&gt; した直後に戻しましょう。こんな状態です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick
$ cabal update&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build-depends&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , brick&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , containers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , linear&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , microlens-th&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , random&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , vty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    , MonadRandom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Stackage&lt;/strong&gt; のスナップショットの &lt;strong&gt;URL&lt;/strong&gt; の後ろに &lt;code&gt;cabal.config&lt;/code&gt; を付けた &lt;a href=&#34;https://www.stackage.org/lts-8.23/cabal.config&#34;&gt;https://www.stackage.org/lts-8.23/cabal.config&lt;/a&gt; にアクセスすると &lt;code&gt;cabal.project.freeze&lt;/code&gt; ファイルとして利用可能なテキストファイルが表示されます。&lt;/p&gt;
&lt;p&gt;これをそのまま保存してビルドするだけで全てが上手くいきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ curl https://www.stackage.org/lts-8.23/cabal.config &amp;gt; cabal.project.freeze
$ cabal build
[__2] fail (backjumping, conflict set: base, dino, optparse-applicative)
After searching the rest of the dependency tree exhaustively, these were the
goals I&amp;#39;ve had most trouble fulfilling: optparse-applicative, base, dino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おっと忘れていました。&lt;code&gt;LTS-8.23&lt;/code&gt; は &lt;code&gt;GHC-8.0.2&lt;/code&gt; でしたね。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-w&lt;/code&gt; (&lt;code&gt;with-compiler&lt;/code&gt; の頭文字) オプションで利用する &lt;strong&gt;GHC&lt;/strong&gt; を切り替えてビルドしましょう！&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal build -w ghc-8.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt; でビルドが通っていれば、&lt;strong&gt;cabal&lt;/strong&gt; でも通る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cabal freeze&lt;/code&gt; を使うとスナップショットのようにバージョンを記録できる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stackage&lt;/strong&gt; のスナップショットの &lt;strong&gt;URL&lt;/strong&gt; の最後に &lt;code&gt;cabal.config&lt;/code&gt; を付けると &lt;strong&gt;freeze&lt;/strong&gt; ファイルを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-freeze&#34;&gt;5.4.6. cabal v2-freeze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/why-not-both-8adadb71a5ed&#34;&gt;Why Not Both?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/04-12-cabal-repl.html</id><title type="text">cabal repl コマンドについて</title><updated>2020-04-12T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/04-12-cabal-repl.html"/><summary type="html">&lt;p&gt;&lt;code&gt;cabal repl&lt;/code&gt; コマンドは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ghci&lt;/code&gt;, &lt;code&gt;ghc --interactive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack repl&lt;/code&gt;, &lt;code&gt;stack ghci&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などと同じように &lt;strong&gt;cabal&lt;/strong&gt; で &lt;strong&gt;REPL&lt;/strong&gt; 環境を実行するためのコマンドです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト内で実行する場合と、&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト外で実行する場合で挙動が少し異なります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.2.0.0
compiled using version 3.2.0.0 of the Cabal library&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;cabal-プロジェクト外で実行した場合&#34;&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト外で実行した場合&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cabal&lt;/strong&gt; は自動的に &lt;strong&gt;fake-package&lt;/strong&gt; という環境を用意します。これは使い捨てのダミー &lt;strong&gt;cabal&lt;/strong&gt; プロジェクトです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl
Resolving dependencies...
Build profile: -w ghc-8.10.1 -O1
In order, the following will be built (use -v for more details):
 - fake-package-0 (lib) (first run)
Configuring library for fake-package-0..
Preprocessing library for fake-package-0..
Warning: No exposed modules
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-3302/setcwd.ghci
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成される内容は &lt;a href=&#34;https://github.com/haskell/cabal/blob/cabal-install-v3.2.0.0/cabal-install/Distribution/Client/CmdRepl.hs#L392&#34;&gt;withoutProject&lt;/a&gt; の中で定義されています。また、ログメッセージの最後に表示されている &lt;code&gt;/tmp/cabal-repl.-3302/&lt;/code&gt; ディレクトリに、実際に生成された &lt;strong&gt;cabal&lt;/strong&gt; ファイルなどが保存されます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ ls /tmp/cabal-repl.-3302/
dist-newstyle  fake-package.cabal  setcwd.ghci&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cabal-install-3.2&lt;/code&gt; で生成される &lt;code&gt;fake-package.cabal&lt;/code&gt; の内容は以下のようになっています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cabal-version: 2.2
name:          fake-package
version:       0

library
    default-language: Haskell2010
    build-depends:    base -any&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;build-depends&lt;/strong&gt; に &lt;code&gt;base -any&lt;/code&gt; が指定されているため、&lt;strong&gt;GHC&lt;/strong&gt; のバージョンに対応した &lt;strong&gt;base&lt;/strong&gt; パッケージがデフォルトで利用可能です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; の使い方は &lt;strong&gt;ghci&lt;/strong&gt; などと同じなので大丈夫でしょう。&lt;/p&gt;
&lt;h3 id=&#34;repl-起動時のメッセージを省略する&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; 起動時のメッセージを省略する&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; 起動時のメッセージを省略するためには &lt;code&gt;-v0&lt;/code&gt; オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-で利用する-ghc-を切り替える&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; で利用する GHC を切り替える&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cabal build&lt;/code&gt; などでもおなじみの &lt;code&gt;-w&lt;/code&gt; (&lt;code&gt;--with-compiler&lt;/code&gt;) オプションを指定するだけです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -w ghc-8.8.3
...
GHCi, version 8.8.3: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-20727/setcwd.ghci
Prelude&amp;gt;

$ cabal repl -w ghc-8.10.1
...
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-20914/setcwd.ghci&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ファイルを指定して-repl-を起動&#34;&gt;ファイルを指定して &lt;strong&gt;REPL&lt;/strong&gt; を起動&lt;/h3&gt;
&lt;p&gt;例えば &lt;code&gt;ghci A.hs&lt;/code&gt; のように &lt;strong&gt;REPL&lt;/strong&gt; 起動時にファイル (モジュール) を読み込みたい時があります。&lt;/p&gt;
&lt;p&gt;しかし、これを &lt;strong&gt;cabal&lt;/strong&gt; で同じように実行するとエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 A.hs
cabal: &amp;#39;repl&amp;#39; doesn&amp;#39;t take any extra arguments when outside a project: A.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのため、一度 &lt;code&gt;cabal repl&lt;/code&gt; を実行してから &lt;code&gt;:l&lt;/code&gt; コマンドでファイルを読み込む必要があります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt; :l A.hs
*A&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-にオプションを渡す&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; にオプションを渡す&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;stack repl&lt;/code&gt; の &lt;code&gt;--ghci-options&lt;/code&gt; に相当するオプションは &lt;code&gt;--repl-options&lt;/code&gt; です。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --repl-options=&amp;quot;-XNoImplicitPrelude&amp;quot;
&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複数指定する場合は &lt;code&gt;--repl-options&lt;/code&gt; を何度も指定する必要があります。たぶんこれは&lt;a href=&#34;https://github.com/haskell/cabal/pull/6190&#34;&gt;仕様&lt;/a&gt;っぽいです&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --repl-options=&amp;quot;-XNoImplicitPrelude&amp;quot; --repl-options=&amp;quot;-XNoStarIsType&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repl-に依存関係を追加&#34;&gt;&lt;strong&gt;REPL&lt;/strong&gt; に依存関係を追加&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt; を動かす際、少し複雑なファイルの場合は &lt;strong&gt;base&lt;/strong&gt; 以外のパッケージを利用していることがほとんどです。&lt;/p&gt;
&lt;p&gt;そういう時には &lt;code&gt;-b&lt;/code&gt; (&lt;code&gt;--build-depends&lt;/code&gt;) オプションを利用します。このオプションは &lt;code&gt;stack repl --package&lt;/code&gt; と同じような感じでパッケージを追加できます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vector&lt;/strong&gt; パッケージを追加で読み込む例です。(パッケージのビルドが走る場合があります。)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b vector
...
Prelude&amp;gt; import Data.Vector
Prelude Data.Vector&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複数のパッケージ &lt;strong&gt;vector&lt;/strong&gt;, &lt;strong&gt;aeson&lt;/strong&gt; を読み込む例は以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b vector -b aeson
...
Prelude&amp;gt; import Data.Vector
Prelude Data.Vector&amp;gt; import Data.Aeson
Prelude Data.Vector Data.Aeson&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように、カンマ区切りで続けてパッケージを指定することも可能です。(&lt;code&gt;-b&lt;/code&gt; ではエラーになります)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 --build-depends=&amp;quot;vector, aeson&amp;quot;
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;パッケージのバージョンを指定することも可能です。バージョンの指定には &lt;strong&gt;build-depends&lt;/strong&gt; と同じ記法が使えます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -b aeson==1.4.7.1
...
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;ここで、パッケージを追加した際は追加したパッケージが依存しているパッケージも含めて読み込まれる点に注意してください。(つまり、推移的に依存関係が追加されます)&lt;/p&gt;
&lt;p&gt;例えば &lt;a href=&#34;https://hackage.haskell.org/package/deepseq&#34;&gt;deepseq&lt;/a&gt; パッケージで定義されている &lt;code&gt;Control.DeepSeq&lt;/code&gt; は本当なら &lt;strong&gt;import&lt;/strong&gt; できないはずです。しかし、&lt;a href=&#34;https://hackage.haskell.org/package/vector&#34;&gt;vector&lt;/a&gt; パッケージは &lt;strong&gt;deepseq&lt;/strong&gt; パッケージに依存しているため &lt;strong&gt;import&lt;/strong&gt; できてしまいます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -b vector
Prelude&amp;gt; import Control.DeepSeq 
Prelude Control.DeepSeq&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この挙動を変更したい場合は &lt;code&gt;--no-transitive-deps&lt;/code&gt; オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -b vector --no-transitive-deps
Prelude&amp;gt; import Control.DeepSeq 

&amp;lt;no location info&amp;gt;: error:
    Could not load module ‘Control.DeepSeq’
    It is a member of the hidden package ‘deepseq-1.4.4.0’.
    Perhaps you need to add ‘deepseq’ to the build-depends in your .cabal file.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;読み込まれるパッケージがどのように変化しているか確認しておきましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
Prelude&amp;gt; :show packages 
active package flags:
  -package-id base-4.14.0.0

$ cabal repl -v0 -b vector
Prelude&amp;gt; :show packages 
active package flags:
  -package-id transformers-0.5.6.2
  -package-id primitive-0.7.0.1-26f169240ac34903846f3a33e2517e97382af71bd7fe7cb7262fd6ca4381f53e
  -package-id array-0.5.4.0
  -package-id deepseq-1.4.4.0
  -package-id integer-gmp-1.0.3.0
  -package-id rts
  -package-id ghc-prim-0.6.1
  -package-id vector-0.12.1.2-8dc77cdd80241a59f0811ecc4c067ae98900f833977f73cce9795875f4909da9
  -package-id base-4.14.0.0

$ cabal repl -v0 -b vector --no-transitive-deps
Prelude&amp;gt; :show packages 
active package flags:
  -package-id vector-0.12.1.2-8dc77cdd80241a59f0811ecc4c067ae98900f833977f73cce9795875f4909da9
  -package-id base-4.14.0.0&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cabal-プロジェクト内で実行した場合&#34;&gt;&lt;strong&gt;cabal&lt;/strong&gt; プロジェクト内で実行した場合&lt;/h2&gt;
&lt;p&gt;基本的にはプロジェクト内で &lt;code&gt;cabal repl&lt;/code&gt; と実行するとプロジェクトの &lt;strong&gt;cabal&lt;/strong&gt; ファイルに従い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依存関係の追加&lt;/li&gt;
&lt;li&gt;モジュールの追加&lt;/li&gt;
&lt;li&gt;オプションの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などを自動的に行い、&lt;strong&gt;REPL&lt;/strong&gt; を起動します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0
*MyLib&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この時、&lt;strong&gt;import&lt;/strong&gt; されるモジュールは1つのみです。(これは仕様みたいです)&lt;/p&gt;
&lt;p&gt;そのため、必要なモジュールは自分で &lt;strong&gt;import&lt;/strong&gt; する必要があります。&lt;/p&gt;
&lt;h3 id=&#34;プロジェクトを無視して-repl-を起動&#34;&gt;プロジェクトを無視して &lt;strong&gt;REPL&lt;/strong&gt; を起動&lt;/h3&gt;
&lt;p&gt;プロジェクトを無視して &lt;strong&gt;REPL&lt;/strong&gt; を起動するためには &lt;code&gt;-z&lt;/code&gt; (&lt;code&gt;--ignore-project&lt;/code&gt;) オプションを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal repl -v0 -z
Prelude&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;今回紹介したオプション一覧&#34;&gt;今回紹介したオプション一覧&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;short&lt;/th&gt;
&lt;th&gt;long&lt;/th&gt;
&lt;th&gt;オプションの意味&lt;/th&gt;
&lt;th&gt;stack&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--repl-options&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ghci&lt;/strong&gt; に渡すオプション指定&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--ghci-options&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--build-depends&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;依存関係の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;-z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--ignore-project&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プロジェクトの &lt;strong&gt;cabal&lt;/strong&gt; を無視する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--no-load&lt;/code&gt; が近いけど&lt;br&gt;プロジェクトの依存関係は読み込む&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--no-transitive-deps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;推移的な依存関係を追加しない&lt;/td&gt;
&lt;td&gt;デフォルトの動作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;-w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--with-compiler&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;利用するコンパイラの指定&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-with-ghc&lt;/code&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;-v0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--verbose=0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;起動時のメッセージを省略&lt;/td&gt;
&lt;td&gt;無し&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-repl&#34;&gt;5.4.4. cabal v2-repl - Cabal User Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5454&#34;&gt;Add –build-depends flag, associated support to new-repl #5454&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/3565&#34;&gt;Cabal repl and cabal build/run conflict over .o object files if ghci has -fobject-code set #3565&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/2592&#34;&gt;cabal repl load single module #2592&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6190&#34;&gt;–repl-options doesn’t split on whitespace #6190&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/5845&#34;&gt;Allow list for &lt;code&gt;repl --build-depends&lt;/code&gt; #5845&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/issues/5374&#34;&gt;&lt;code&gt;cabal new-repl&lt;/code&gt; only brings one module into scope #5374&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-25-cabal-install.html</id><title type="text">cabal install コマンドについて</title><updated>2020-04-03T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-25-cabal-install.html"/><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack install&lt;/code&gt; と全く同じ動作をする &lt;strong&gt;cabal&lt;/strong&gt; コマンドは &lt;code&gt;cabal install all:exes&lt;/code&gt; です。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今回利用した &lt;strong&gt;cabal&lt;/strong&gt; と &lt;strong&gt;stack&lt;/strong&gt; のバージョンは以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library 

$ stack --version
Version 2.1.3, Git revision 636e3a759d51127df2b62f90772def126cdf6d1f (7735 commits) x86_64 hpack-0.31.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この記事では &lt;code&gt;stack install&lt;/code&gt; コマンドと &lt;code&gt;cabal install&lt;/code&gt; コマンドの挙動の違いなどについて調査した結果等をまとめています。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;プロジェクトの構成&#34;&gt;プロジェクトの構成&lt;/h2&gt;
&lt;p&gt;例えば、プロジェクトが以下のような構成になっていて、&lt;strong&gt;executable&lt;/strong&gt; (mainExe1, mainExe2, subExe1, subExe2) が定義されているとしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree .
.
├── app
│   ├── Main1.hs
│   └── Main2.hs
├── cabal.project
├── stack.yaml
├── subs
│   ├── pkg1
│   │   ├── app
│   │   │   └── Main.hs
│   │   └── pkg1.cabal
│   └── pkg2
│       ├── app
│       │   └── Main.hs
│       └── pkg2.cabal
└── app.cabal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/tree/master/sample-code/2020/03-25/&#34;&gt;プロジェクトのコード&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;stack-install-と-cabal-install-の違い&#34;&gt;stack install と cabal install の違い&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;　&lt;/th&gt;
&lt;th&gt;&lt;code&gt;stack install&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;cabal install&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;インストール方法&lt;/td&gt;
&lt;td&gt;コピー&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;シンボリックリンク&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;インストール先ディレクトリの指定オプション&lt;/td&gt;
&lt;td&gt;&lt;code&gt;local-bin-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--installdir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;cabal-install&#34;&gt;cabal install&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cabal install&lt;/code&gt; に指定可能なコマンドをいくつか試してみて、実際に何がインストールされるか一覧にしました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install .&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install pkg1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install . pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;*注意点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install all:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cabal install&lt;/code&gt; や &lt;code&gt;stack install .&lt;/code&gt; の挙動など、いくつか &lt;strong&gt;stack&lt;/strong&gt; と異なる場合があるので注意が必要です。&lt;/li&gt;
&lt;li&gt;注意点: 全てのパッケージに &lt;strong&gt;executable&lt;/strong&gt; が含まれている場合に限り実行可能です。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cabal install all&lt;/code&gt; で &lt;strong&gt;executable&lt;/strong&gt; が含まれていないパッケージがある場合は以下のようなエラーになります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cabal: Cannot build the executables in the package pkg2 because it does not
contain any executables. Check the .cabal file for the package and make sure
that it properly declares the components that you expect.&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack install&lt;/code&gt; に相当するコマンドは &lt;code&gt;cabal install all:exes&lt;/code&gt; です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stack-install&#34;&gt;stack install&lt;/h3&gt;
&lt;p&gt;同様に &lt;code&gt;stack install&lt;/code&gt; も確認しました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;subExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install .&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install pkg1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install . pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app pkg1 pkg2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install all:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;エラー 1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install . pkg1 pkg2
The following errors occurred while parsing the build targets:
- The package pkg1 was specified in multiple, incompatible ways: . pkg1
- The package pkg2 was specified in multiple, incompatible ways: . pkg2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー 2&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install all
Error: While constructing the build plan, the following exceptions were encountered:
Unknown package: all
Some different approaches to resolving this:
Plan construction failed.&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;その他の指定方法&#34;&gt;その他の指定方法&lt;/h3&gt;
&lt;h4 id=&#34;cabal&#34;&gt;cabal&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install app:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;cabal install mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;エラー1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install app:exe
cabal: Unknown target &amp;#39;app:exe&amp;#39;.
The package app has no component &amp;#39;exe&amp;#39;.&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;stack&#34;&gt;stack&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe1&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;code&gt;mainExe2&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install app:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exes&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exe:mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install exe:mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install mainExe1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;stack install mainExe2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
&lt;td&gt;*エラー3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;エラー1&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install app:exe
Error parsing targets: Component exe does not exist in package app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー2&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install exe:mainExe1
Error parsing targets: Unknown local package: exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラー3&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install mainExe1
Error: While constructing the build plan, the following exceptions were encountered:
Unknown package: mainExe1
Some different approaches to resolving this:
Plan construction failed.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cabal-install-で良く使うオプション&#34;&gt;cabal install で良く使うオプション&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 47%&#34; /&gt;
&lt;col style=&#34;width: 52%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;--installdir=&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インストール先のパスを指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;--install-method=copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シンボリックリンクではなく、実体がコピーされる。&lt;br&gt;&lt;strong&gt;Docker&lt;/strong&gt; にバイナリをコピーする際や &lt;strong&gt;Windows&lt;/strong&gt; 環境などで利用することがあります。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;--overwrite-policy=always&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すでに実行ファイルが存在する場合でも、常に上書きします。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;--overwrite-policy=always&lt;/code&gt; を毎回指定するのが面倒な場合は&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal user-config update -a overwrite-policy:always&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というコマンドで &lt;code&gt;~/.cabal/config&lt;/code&gt; に設定できます。&lt;/p&gt;
&lt;h2 id=&#34;で変更になる点など&#34;&gt;3.2.0.0 で変更になる点など&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6519/files&#34;&gt;Copy on windows #6519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; 環境において &lt;code&gt;cabal install&lt;/code&gt; の際のデフォルトの挙動が変更されます。シンボリックリンクが作成できない場合は自動的にコピーになります。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6428&#34;&gt;Implement cabal install -z #6428&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカルのプロジェクト設定を無視するオプション &lt;code&gt;-z&lt;/code&gt;, &lt;code&gt;--ignore-project&lt;/code&gt; が追加されます。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6576&#34;&gt;Resolve #6369 and #6393: Allow cabal v2-install pkgname:exename or http://example.com/package.tar.gz(#sha256=abcde…) #6576&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install &amp;#39;https://hackage.haskell.org/package/cabal-fmt-0.1.2/cabal-fmt-0.1.2.tar.gz#sha256=aae556efbcaddfd65c6a1c1811b122b0d8c8d00624c8c2e36aabb5e9f9ea9840&amp;#39;&lt;/code&gt;&lt;/pre&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-30-cabal-plan-license-report.html</id><title type="text">cabal-plan license-report 機能の紹介</title><updated>2020-03-30T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-30-cabal-plan-license-report.html"/><summary type="html">&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/cabal-plan&#34;&gt;cabal-plan&lt;/a&gt; を使って、プロジェクトが依存するパッケージのライセンスを列挙する方法について紹介します。&lt;/p&gt;
&lt;p&gt;本記事は &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/8vhkwv/is_there_a_tool_to_collect_all_license_files_of/&#34;&gt;Is there a tool to collect all LICENSE files of used dependencies?&lt;/a&gt; を参考にしています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;インストール方法&#34;&gt;インストール方法&lt;/h2&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal update
$ cabal install cabal-plan -f license-report
$ cabal-plan --version
cabal-plan 0.6.2.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回の機能を使うためには &lt;strong&gt;license-report&lt;/strong&gt; フラグを有効にする必要があります。デフォルトでは無効になっています。&lt;/p&gt;
&lt;h2 id=&#34;ライセンスの列挙&#34;&gt;ライセンスの列挙&lt;/h2&gt;
&lt;p&gt;具体例として、このブログで試してみましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog&#34;&gt;e-bigmoon/haskell-blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ライセンスファイルを抽出する場合は &lt;code&gt;--licensedir&lt;/code&gt; オプションで出力先ディレクトリを指定します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal-plan license-report --licensedir=licenses exe:site &amp;gt; blog.md
WARNING: couldn&amp;#39;t find metadata for base-4.13.0.0
WARNING: couldn&amp;#39;t find metadata for hakyll-sass-0.3
WARNING: license files for array-0.5.4.0 (global/GHC bundled) not copied
WARNING: license files for binary-0.8.7.0 (global/GHC bundled) not copied
WARNING: license files for bytestring-0.10.10.0 (global/GHC bundled) not copied
WARNING: license files for containers-0.6.2.1 (global/GHC bundled) not copied
WARNING: license files for deepseq-1.4.4.0 (global/GHC bundled) not copied
WARNING: license files for directory-1.3.6.0 (global/GHC bundled) not copied
WARNING: license files for filepath-1.4.2.1 (global/GHC bundled) not copied
WARNING: couldn&amp;#39;t find metadata for ghc-boot-th-8.8.3
WARNING: license files for ghc-prim-0.5.3 (global/GHC bundled) not copied
WARNING: license files for integer-gmp-1.0.2.0 (global/GHC bundled) not copied
WARNING: license files for mtl-2.2.2 (global/GHC bundled) not copied
WARNING: license files for parsec-3.1.14.0 (global/GHC bundled) not copied
WARNING: license files for pretty-1.1.3.6 (global/GHC bundled) not copied
WARNING: license files for process-1.6.8.0 (global/GHC bundled) not copied
WARNING: license files for stm-2.5.0.0 (global/GHC bundled) not copied
WARNING: license files for template-haskell-2.15.0.0 (global/GHC bundled) not copied
WARNING: license files for text-1.2.4.0 (global/GHC bundled) not copied
WARNING: license files for time-1.9.3 (global/GHC bundled) not copied
WARNING: license files for transformers-0.5.6.2 (global/GHC bundled) not copied
WARNING: license files for unix-2.7.2.2 (global/GHC bundled) not copied&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;出力結果&#34;&gt;出力結果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;licenses&lt;/code&gt; ディレクトリはだいたいこんな感じでライセンスファイルが格納されています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree licenses | head -n 20
licenses
├── Glob-0.10.0
│   └── LICENSE.txt
├── HTTP-4000.3.14
│   └── LICENSE
├── HsYAML-0.2.1.0
│   ├── LICENSE.GPLv2
│   └── LICENSE.GPLv3
├── HsYAML-aeson-0.2.0.0
│   └── LICENSE.GPLv2
├── JuicyPixels-3.3.5
│   └── LICENSE
├── Only-0.1
│   └── LICENSE
├── QuickCheck-2.13.2
│   └── LICENSE
├── SHA-1.6.4.4
│   └── LICENSE
├── StateVar-1.2
│   └── LICENSE&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;blog.md&lt;/code&gt; の内容を一部を以下に貼り付けます。完全なコードは&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/sample-code/2020/03-30/blog.md&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;dependency-license-report&#34;&gt;Dependency License Report&lt;/h1&gt;
&lt;p&gt;Bold-faced &lt;strong&gt;&lt;code&gt;package-name&lt;/code&gt;&lt;/strong&gt;s denote standard libraries bundled with &lt;code&gt;ghc-8.8.3&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;direct-dependencies-of-bigmoon-haskellers-blogexesite&#34;&gt;Direct dependencies of &lt;code&gt;bigmoon-haskellers-blog:exe:site&lt;/code&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;col style=&#34;width: 20%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX&lt;/a&gt; License Id&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Also depended upon by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;base&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/base-4.13.0.0&#34;&gt;&lt;code&gt;4.13.0.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(core library)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/extensible-0.8&#34;&gt;&lt;code&gt;0.8&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/extensible-0.8/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Extensible, efficient, optics-friendly data types and effects&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;hakyll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/hakyll-4.13.2.0&#34;&gt;&lt;code&gt;4.13.2.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/hakyll-4.13.2.0/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A static website compiler library&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hakyll-sass&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;hakyll-sass&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/hakyll-sass-0.3&#34;&gt;&lt;code&gt;0.3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;MISSING&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;html-entities&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/html-entities-1.1.4.3&#34;&gt;&lt;code&gt;1.1.4.3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/html-entities-1.1.4.3/LICENSE&#34;&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A codec library for HTML-escaped text and HTML-entities&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;rio&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/rio-0.1.14.1&#34;&gt;&lt;code&gt;0.1.14.1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/rio-0.1.14.1/LICENSE&#34;&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A standard library for Haskell&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/yaml-0.11.3.0&#34;&gt;&lt;code&gt;0.11.3.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/yaml-0.11.3.0/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Support for parsing and rendering YAML documents.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hakyll&lt;/code&gt;, &lt;code&gt;pandoc-citeproc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;indirect-transitive-dependencies&#34;&gt;Indirect transitive dependencies&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX&lt;/a&gt; License Id&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Depended upon by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Glob&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/Glob-0.10.0&#34;&gt;&lt;code&gt;0.10.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/Glob-0.10.0/LICENSE.txt&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Globbing library&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://hackage.haskell.org/package/HTTP-4000.3.14&#34;&gt;&lt;code&gt;4000.3.14&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;licenses/HTTP-4000.3.14/LICENSE&#34;&gt;&lt;code&gt;BSD-3-Clause&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A library for client-side HTTP&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回は &lt;strong&gt;cabal-plan&lt;/strong&gt; を使ってみましたが、同様のツールとして &lt;a href=&#34;https://github.com/fossas/fossa-cli/blob/master/docs/integrations/haskell.md#haskell&#34;&gt;fossas/fossa-cli&lt;/a&gt; や &lt;a href=&#34;https://github.com/github/licensed/blob/master/docs/sources/cabal.md&#34;&gt;github/licensed&lt;/a&gt; なども利用できるようです。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/03-28-haskell-books.html</id><title type="text">Haskell 関連書籍の紹介ページを作りました</title><updated>2020-03-28T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/03-28-haskell-books.html"/><summary type="html">&lt;p&gt;&lt;strong&gt;Qiita&lt;/strong&gt; で管理していた記事を移動しました。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;haskell-関連の書籍紹介ページ&#34;&gt;Haskell 関連の書籍紹介ページ&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&#34;/books/&#34;&gt;これから Haskell を学ぶ人のための書籍・論文紹介&lt;/a&gt;」というページを作りました。&lt;/p&gt;
&lt;p&gt;基本的には Qiita で管理していた内容ですが、いくつか書籍を追加し、「サポートページ」「正誤表」「レビュー」へのリンク等を追加しました。内容に不備がある場合は &lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/issues&#34;&gt;issue&lt;/a&gt; などで教えていただけると助かります。&lt;/p&gt;
&lt;p&gt;現在は主に自分が持っている物理書籍メインに紹介していますが、今後は電子書籍なども含めて充実させていけたらと思います。&lt;/p&gt;
&lt;p&gt;ちなみに、今から入門するなら「&lt;a href=&#34;https://www.lambdanote.com/collections/frontpage/products/haskell&#34;&gt;プログラミング Haskell 第2版&lt;/a&gt;」をオススメします。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/12-24-ap-monoid.html</id><title type="text">Ap Monoid</title><updated>2020-03-03T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/12-24-ap-monoid.html"/><summary type="html">&lt;p&gt;まずは以下の関数 &lt;code&gt;f&lt;/code&gt; を考えます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e1&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e2&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、この &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; をもっと短くカッコよく書けないかな？と考えます。&lt;/p&gt;
&lt;p&gt;何となく &lt;code&gt;mconcat&lt;/code&gt; で置き換えれそうな気がしたんですよ・・・。 だけど、動作が変わってしまうんです・・・。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで問題です。なぜ &lt;code&gt;mconcat&lt;/code&gt; にすると結果が異なるのでしょうか？ また、&lt;code&gt;f = fmap concat . sequence&lt;/code&gt; という定義を畳み込みを使って書き直すことはできるのでしょうか？&lt;/p&gt;
&lt;p&gt;このことを考えていたら &lt;code&gt;Ap&lt;/code&gt; モノイドにたどり着きました。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;関数-f-は何を行っているのか&#34;&gt;関数 f は何を行っているのか？&lt;/h2&gt;
&lt;p&gt;まずは &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; がどのように動作するか確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;f e1&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;f e2&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequence&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでは簡単ですね。では &lt;code&gt;f = mconcat&lt;/code&gt; の場合も確認します。(ここでの定義はデフォルト実装の &lt;code&gt;mconcat = foldr (&amp;lt;&amp;gt;) mempty&lt;/code&gt; を使います)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;f e1&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ココ!!!&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうやら &lt;code&gt;mconcat&lt;/code&gt; に変更すると &lt;code&gt;Just [3,4] &amp;lt;&amp;gt; Nothing&lt;/code&gt; の計算で結果が変わってくるということがわかります。 つまり、求めている計算は &lt;code&gt;Monoid&lt;/code&gt; の演算ではなく &lt;code&gt;Monad (Applicative)&lt;/code&gt; の &lt;code&gt;Effect&lt;/code&gt; なのです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 雰囲気でいえば、こんな感じになれば良いかも？&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- mconcat で行われる演算&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 期待しているのは Maybe モナドの Effect&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;畳み込んでみる&#34;&gt;畳み込んでみる&lt;/h2&gt;
&lt;p&gt;何となく方向性は掴めました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 計算の途中で出てきたこの形を&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (とりあえず) こうしたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;形だけ見れば &lt;code&gt;foldr (&amp;gt;&amp;gt;) mempty&lt;/code&gt; とすれば良さげです。試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e1&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f e2&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;f e2&lt;/code&gt; は良い感じですが、今度は &lt;code&gt;f e1&lt;/code&gt; の結果がおかしくなりました・・・。 それはそうですよね。&lt;code&gt;Maybe&lt;/code&gt; モナドの &lt;code&gt;Effect&lt;/code&gt; で畳み込んでいるため、どこかで &lt;code&gt;Nothing&lt;/code&gt; が出てきたら計算全体は &lt;code&gt;Nothing&lt;/code&gt; になりますよね。&lt;/p&gt;
&lt;p&gt;これってつまり、&lt;code&gt;Maybe&lt;/code&gt; モナドの &lt;code&gt;Effect&lt;/code&gt; と &lt;code&gt;リスト&lt;/code&gt; モノイドの演算の両方が必要ってことになりますね・・・。 オリジナルの &lt;code&gt;f = fmap concat . sequence&lt;/code&gt; の定義も確かにそんな感じです。&lt;/p&gt;
&lt;h2 id=&#34;自分で定義しよう&#34;&gt;自分で定義しよう！&lt;/h2&gt;
&lt;p&gt;もう一度整理しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 計算対象のリスト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;[ m_a1, m_a2, m_a3, me ]&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- まずは Effect を実行したい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;m_a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m_a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m_a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; me&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- m_a1, m_a2, m_a3, me の結果をそれぞれ a1, a2, a3, e として&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Monoid の演算を行いたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 具体的に、値が全部 Just でラップされていると考えた場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 期待する結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- どこか一箇所に Nothing がある (この場合 m_a2 が Nothing) と考えた場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 期待する結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 以下のようになってはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- こんな感じで計算が進むモノイドが欲しい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-29&#34;&gt;&lt;a href=&#34;#cb8-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-30&#34;&gt;&lt;a href=&#34;#cb8-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (a1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; e)&lt;/span&gt;
&lt;span id=&#34;cb8-31&#34;&gt;&lt;a href=&#34;#cb8-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-32&#34;&gt;&lt;a href=&#34;#cb8-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-33&#34;&gt;&lt;a href=&#34;#cb8-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; a3 &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-34&#34;&gt;&lt;a href=&#34;#cb8-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb8-35&#34;&gt;&lt;a href=&#34;#cb8-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような挙動を行う &lt;code&gt;Monoid&lt;/code&gt; を新しく定義してみます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSequence ::&lt;/span&gt; m a }&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  ma &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; mb &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;      a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getSequence ma&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;      b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getSequence mb&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; m a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に確かめてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (&amp;lt;&amp;gt;) に変更した。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldr&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e1)&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e2)&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;期待通りに動いていますね。&lt;code&gt;foldMap&lt;/code&gt; を使うともう少し短くかけます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Sequence&lt;/span&gt; {getSequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ap-モノイド&#34;&gt;Ap モノイド&lt;/h2&gt;
&lt;p&gt;ここまでで定義した &lt;code&gt;Sequence&lt;/code&gt; モノイドは &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Ap&#34;&gt;Ap&lt;/a&gt; という名前で定義されています。&lt;/p&gt;
&lt;p&gt;今回は &lt;code&gt;Monad&lt;/code&gt; で話を進めましたが、実際は &lt;code&gt;Applicative&lt;/code&gt; でも成り立ちます。 最初の例を &lt;code&gt;Ap&lt;/code&gt; モノイドで置き換えれば以下のようになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;], &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; e1&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; {getAp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;]}&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; e2&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; {getAp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ap&lt;/code&gt; モノイドの使い道がわかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miz-ar.info/2019/02/monoid-for-haskellers/&#34;&gt;Haskellerのためのモノイド完全ガイド&lt;/a&gt; でも解説されているので、気になった方はこちらもどうぞ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmap fold . sequenceA&lt;/code&gt; と &lt;code&gt;getAp . foldMap Ap&lt;/code&gt; を比較すると型クラス制約が若干違う&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;t &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; fold &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sequenceA&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; fold &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; sequenceA ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Traversable&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t (f a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;t getAp &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;getAp &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Foldable&lt;/span&gt; t, &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t (f a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html</id><title type="text">HUnit で日本語が文字化けする問題</title><updated>2020-02-19T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html"/><summary type="html">&lt;p&gt;&lt;code&gt;HUnit&lt;/code&gt; で日本語を扱おうとすると、以下のように文字化けしますよね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題は簡単に回避できるので、その方法を紹介します。やり方は &lt;a href=&#34;https://github.com/hspec/hspec/issues/384&#34;&gt;Human-readable output of unicode characters in expectation results #384&lt;/a&gt; の方法そのまんまです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;問題が発生している原因&#34;&gt;問題が発生している原因&lt;/h2&gt;
&lt;p&gt;今回使うコードはとてもシンプルです。依存しているパッケージは &lt;a href=&#34;https://hackage.haskell.org/package/HUnit&#34;&gt;HUnit&lt;/a&gt; です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;bad ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;bad &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のコードを実行すると、以下のような結果になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package HUnit ./Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; bad&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;### Failure:                              &lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;guchi&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Desktop&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;repos&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;haskell&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;blog&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;sample&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;code&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;Main.hs&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Cases&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Tried&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Errors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Failures&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題は何故発生するかと言うと、&lt;code&gt;HUnit&lt;/code&gt; 内部で &lt;code&gt;show&lt;/code&gt; 関数を利用しているためです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\12495\12473\12465\12523&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のような文字化けに対応するには &lt;a href=&#34;https://hackage.haskell.org/package/unicode-show&#34;&gt;unicode-show&lt;/a&gt; パッケージの &lt;strong&gt;ushow&lt;/strong&gt; 関数が便利です。より詳しい紹介は「&lt;a href=&#34;https://haskell.jp/blog/posts/2019/unicode-show.html&#34;&gt;日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; stack repl &lt;span class=&#34;co&#34;&gt;--package HUnit --package unicode-show ./Main.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; ushow &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということで、&lt;strong&gt;HUnit&lt;/strong&gt; を &lt;strong&gt;ushow&lt;/strong&gt; を使うようにしてみましょう。&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策&lt;/h2&gt;
&lt;p&gt;やり方はとても簡単です。&lt;strong&gt;(@?=)&lt;/strong&gt; を以下のように再定義するだけです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ushow s&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(@?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit.Assertion&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;actual &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; expected &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; actual &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; expected&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コード全体は以下の通りです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.HUnit&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HUnit&lt;/span&gt; ((@?=))&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Show.Unicode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;bad ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;bad &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ushow s&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(@?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Assertion&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;actual &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; expected &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; actual &lt;span class=&#34;op&#34;&gt;HUnit.@?=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UString&lt;/span&gt; expected&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;good ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;good &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runTestTT (&lt;span class=&#34;dt&#34;&gt;TestCase&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@?=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみましょう！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; good&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;### Failure:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;home&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;guchi&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Desktop&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;repos&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;haskell&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;blog&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;sample&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;code&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;Main.hs&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;expected&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ハスケル&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt; but got&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Cases&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Tried&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Errors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Failures&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じで他の関数も同様に定義してしまえば良い感じです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;日本語の文字化けで困っている人向け情報でした。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iwamototakashi.hatenadiary.jp/entry/20100722/p1&#34;&gt;HUnitで日本語を出力してみる→成功&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hspec/hspec/issues/384&#34;&gt;Human-readable output of unicode characters in expectation results #384&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2019/unicode-show.html&#34;&gt;日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html</id><title type="text">cabal の build-tool-depends フィールド</title><updated>2020-01-22T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html"/><summary type="html">&lt;p&gt;cabal の &lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends&#34;&gt;build-tool-depends&lt;/a&gt; というフィールドが便利だったので紹介します。&lt;/p&gt;
&lt;p&gt;テストを書くときに &lt;a href=&#34;https://hackage.haskell.org/package/hspec-discover&#34;&gt;hspec-discover&lt;/a&gt; や &lt;a href=&#34;https://hackage.haskell.org/package/tasty-discover&#34;&gt;tasty-discover&lt;/a&gt; などを使う場合、このフィールドを設定しておくことで依存している実行ファイルを自動的にダウンロードして使ってくれます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal --version
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library &lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;サンプルプロジェクトの構成&#34;&gt;サンプルプロジェクトの構成&lt;/h2&gt;
&lt;p&gt;全体のディレクトリ構成は以下のようになっているとしましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ tree .
.
├── example.cabal
├── src
│   └── Lib.hs
├── stack.yaml
└── test
    ├── LibSpec.hs
    └── Spec.hs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;それぞれのファイルの内容は以下のようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- src/Lib.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lib&lt;/span&gt; (someFunc) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;someFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;someFunc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;someFunc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- test/LibSpec.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LibSpec&lt;/span&gt; (spec) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;spec ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Spec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;spec &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- test/Spec.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# OPTIONS_GHC -F -pgmF hspec-discover #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;-- example.cabal
cabal-version: 2.4
name:          example
version:       0.1.0.0

library
  exposed-modules:  Lib
  hs-source-dirs:   src
  build-depends:    base &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
  default-language: Haskell2010

test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-14.20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; .&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このような状況で &lt;code&gt;cabal&lt;/code&gt; や &lt;code&gt;stack&lt;/code&gt; がどのように振舞うか見ていきましょう。&lt;/p&gt;
&lt;p&gt;現時点では &lt;code&gt;hspec-discover&lt;/code&gt; の実行ファイルは存在していません。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ hspec-discover
bash: hspec-discover: コマンドが見つかりません&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stack&#34;&gt;stack&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hspec-discover&lt;/code&gt; の実行ファイルが無い状態で &lt;code&gt;stack test&lt;/code&gt; を実行すると以下のようにエラーになります。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hspec-discover-をインストールした場合&#34;&gt;hspec-discover をインストールした場合&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のようにインストールした場合は、問題無く動作します。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hspec-discover&lt;/code&gt; がファイルを自動的に見つけてくれたので、コンパイルエラーになりました。&lt;/p&gt;
&lt;p&gt;次に進む前に実行ファイルを削除しておきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ rm ~/.local/bin/hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-depends-に追加した場合&#34;&gt;build-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;example.cabal&lt;/code&gt; ファイルの &lt;code&gt;build-depends&lt;/code&gt; に追加した場合はどうなるのでしょうか？&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example
    , hspec-discover  -- 新しく追加した

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;では &lt;code&gt;stack test&lt;/code&gt; を実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行ファイルがローカル環境に存在しなくても自動的に &lt;code&gt;hspec-discover&lt;/code&gt; が動作しています。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;stack&lt;/code&gt; プロジェクトでは &lt;code&gt;hspec-discover&lt;/code&gt; を依存関係 (&lt;code&gt;build-depends&lt;/code&gt;) に追加するだけで良い感じにテストが進みます。&lt;/p&gt;
&lt;h2 id=&#34;cabal&#34;&gt;cabal&lt;/h2&gt;
&lt;p&gt;同様に &lt;code&gt;cabal&lt;/code&gt; の場合も確かめてみましょう。(&lt;code&gt;example.cabal&lt;/code&gt; ファイルから &lt;code&gt;hspec-discover&lt;/code&gt; を削除しておきます)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; と同様のエラーになりました。&lt;/p&gt;
&lt;h3 id=&#34;hspec-discover-をインストールした場合-1&#34;&gt;hspec-discover をインストールした場合&lt;/h3&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様に &lt;code&gt;cabal test&lt;/code&gt; を実行してみます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; の場合と同じように、ちゃんと動いていますね。&lt;/p&gt;
&lt;h3 id=&#34;build-depends-に追加した場合-1&#34;&gt;build-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;まずはバイナリファイルを削除しておきます。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ rm ~/.cabal/bin/hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;example.cabal&lt;/code&gt; ファイルは先ほどと同じように &lt;code&gt;build-depends&lt;/code&gt; に &lt;code&gt;hspec-discover&lt;/code&gt; を追加した状態です。&lt;/p&gt;
&lt;p&gt;テストを実行してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

ghc: could not execute: hspec-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; と異なる結果になりましたね・・・。僕は今までこの結果への対処法は &lt;code&gt;hspec-discover&lt;/code&gt; をインストールしておくしかないと思っていました。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;build-tool-depends&lt;/code&gt; をフィールドを利用することで &lt;code&gt;stack&lt;/code&gt; と同じ挙動になるということがわかりました。&lt;/p&gt;
&lt;p&gt;実際に試してみましょう。&lt;/p&gt;
&lt;h3 id=&#34;build-tool-depends-に追加した場合&#34;&gt;build-tool-depends に追加した場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build-tool-depends&lt;/code&gt; に追加するとこんな感じです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &amp;gt;=4.7 &amp;amp;&amp;amp; &amp;lt;5
    , example

  build-tool-depends:                 -- 新たに追加した行
    , hspec-discover:hspec-discover   -- 新たに追加した行

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;build-depends&lt;/code&gt; が &lt;code&gt;&amp;lt;package_name&amp;gt;&lt;/code&gt; という指定方法でしたが、&lt;code&gt;build-tool-depends&lt;/code&gt; では &lt;code&gt;&amp;lt;package_name&amp;gt;:&amp;lt;exe_name&amp;gt;&lt;/code&gt; という指定方法になっている点に注意です。&lt;/p&gt;
&lt;p&gt;バージョン制約が必要な場合は &lt;code&gt;build-depends&lt;/code&gt; と同じように指定できます。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;hspec-discover:hspec-discover ^&amp;gt;=2.7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでテストを実行してみましょう。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで &lt;code&gt;stack&lt;/code&gt; と同じような挙動になりました！happy!&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;こんな便利なフィールドがあるなんて全然知りませんでした・・・。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build-tool-depends&lt;/code&gt; を指定しておけば、実行ファイルが無くても大丈夫&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt; は初心者に優しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/ghc/blog/20200116-ghc-8.8.2-released.html&#34;&gt;GHC-8.8.2 がリリース&lt;/a&gt;されましたね。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends&#34;&gt;cabal user guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html</id><title type="text">Memo - unexpected At most 9 numbers are allowed per version number part</title><updated>2020-01-22T00:00:00+09:00</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html"/><summary type="html">&lt;p&gt;GHC-8.8 への移行中に GitHub Actions で以下のようなエラーが発生しました。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;proj/dist-newstyle/src/barbies-6f24224e2c384e2f/barbies.cabal:2:31: error:
unexpected At most 9 numbers are allowed per version number part

    1 | name:           barbies
    2 | version:        1.999999999999
      |                               ^

##[error]Process completed with exit code 1.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初めて見るエラーだったのでメモとして残しておきます。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;エラーが発生した理由&#34;&gt;エラーが発生した理由&lt;/h2&gt;
&lt;p&gt;エラー発生の原因はたぶんこれです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haskell/cabal/pull/6386&#34;&gt;Limit version number parts to be 9 digits #6386&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この変更は &lt;code&gt;cabal-3.0.1.0&lt;/code&gt; に含まれるはずなので &lt;code&gt;cabal-3.0.0.0&lt;/code&gt; では関係ないと思っていたのですが、&lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/commit/73a7adcb8bf8204dd81de35d014c967b76040526/checks?check_suite_id=384131716&#34;&gt;GitHub Actions のログ&lt;/a&gt;を見るとわかるとおり、GitHub Actions では &lt;code&gt;cabal-3.0.1.0&lt;/code&gt; がインストールされていました。(何故?&lt;a href=&#34;https://github.com/haskell/cabal/issues/6328&#34;&gt;cabal-install 3.0.1.0 release planning #6328&lt;/a&gt; はまだ閉じられてない)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;...
The Glorious Glasgow Haskell Compilation System, version 8.6.5
cabal-install version 3.0.1.0
compiled using version 3.0.1.0 of the Cabal library 
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また &lt;a href=&#34;https://github.com/actions/setup-haskell&#34;&gt;actions/setup-haskell&lt;/a&gt; の README を見る限り &lt;code&gt;cabal&lt;/code&gt; のバージョン指定方法は &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;2.2&lt;/code&gt;, &lt;code&gt;2.4&lt;/code&gt;, &lt;code&gt;3.0&lt;/code&gt; しか無いので &lt;code&gt;3.0.0.0&lt;/code&gt; を使う方法がありません・・・。&lt;/p&gt;
&lt;h2 id=&#34;とりあえずの解決策&#34;&gt;とりあえずの解決策&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jcpetruzza/barbies/blob/0b09a4235cd719aa3df9f9467f3e8fee81446bc8/barbies.cabal&#34;&gt;barbies.cabal&lt;/a&gt; のバージョン番号が長すぎるために起きているエラーなので、fork して一時的にバージョンを短くして対応しました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name:           barbies
version:        1.999999999999  -- 変更前
version:        1.999999999     -- 変更後&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;もうすぐ GHC-8.10.1 がリリースされそうですね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/status/ghc-8.10.1&#34;&gt;GHC plans for 8.10.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2020-01-20T11:46:31.459+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>http://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>http://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v6</id><title type="text">test6</title><updated>2018-03-03T13:44:46Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v6"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v5</id><title type="text">test5</title><updated>2018-03-03T12:20:13Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v5"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v4</id><title type="text">test4</title><updated>2018-03-03T05:46:33Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v4"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v3</id><title type="text">test3</title><updated>2018-03-03T05:05:52Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v3"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v2</id><title type="text">test2</title><updated>2018-03-03T04:59:34Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v2"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v1</id><title type="text">test1</title><updated>2018-03-03T04:55:52Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v1"/></entry><entry><id>http://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>http://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>http://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry></feed>
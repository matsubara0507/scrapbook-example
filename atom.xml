<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Sample Site Posts</title><id>https://matsubara0507.github.io/scrapbook-example/atom.xml</id><updated>2018-03-04T00:00:00Z</updated><link href="https://matsubara0507.github.io/scrapbook-example"/><entry><id>https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html</id><title type="text">tasty-discover が Windows+日本語環境で動かなかったので直す</title><updated>2018-03-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;tasty-discover が Windows+日本語環境で動かなかったので直す&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-03-04" itemprop="datePublished"&gt;
        Mar 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;おそらく少数派であろう Windows + 日本語環境の Haskeller のひげです．&lt;/p&gt;
&lt;p&gt;最近は知人のすゝめで，Haskell のテストフレームワークに &lt;a href="https://hackage.haskell.org/package/tasty"&gt;&lt;code&gt;tasty&lt;/code&gt;&lt;/a&gt; を使ってます． &lt;code&gt;tasty&lt;/code&gt; にも例に漏れず &lt;a href="http://hackage.haskell.org/package/tasty-discover"&gt;&lt;code&gt;tasty-discover&lt;/code&gt;&lt;/a&gt; というテスト用の関数を &lt;code&gt;.hs&lt;/code&gt; ファイルから集めてきてくれるツールがある． しかし，悲しいことに &lt;code&gt;tasty-discover&lt;/code&gt; がマルチバイト文字(日本語とか)を Windows で読み込むと &lt;strong&gt;いつもの&lt;/strong&gt; エラーで死んでしまう．&lt;/p&gt;
&lt;p&gt;なので，直して PR 出した． この記事はそのメモです．&lt;/p&gt;
&lt;h2 id="問題のエラー"&gt;問題のエラー&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Building test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
tasty-discover: test\ConfigTest.hs: hGetContents: invalid argument (invalid byte sequence)
`tasty-discover&amp;#39; failed in phase `Haskell pre-processor&amp;#39;. (Exit code: 1)
Progress: 1/2
--  While building custom Setup.hs for package tasty-discover-4.1.3 using:
      C:\Users\Hoge\AppData\Roaming\stack\setup-exe-cache\i386-windows\Cabal-simple_Z6RU0evB_2.0.1.0_ghc-8.2.2.exe --builddir=.stack-work\dist\010ee936 build lib:tasty-discover exe:tasty-discover test:test --ghc-options &amp;quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&amp;quot;
    Process exited with code: ExitFailure 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hGetContents: invalid argument (invalid byte sequence)&lt;/code&gt; は 日本語 Windows Haskeller なら親の顔より良く見るエラーメッセージですね(そんなことは無い)． このエラーは &lt;code&gt;hGetContents&lt;/code&gt; で読み込もうとしているファイルの文字コードが，&lt;code&gt;hGetContents&lt;/code&gt; で設定されている文字コードと違うために起きている(&lt;code&gt;hGetContents&lt;/code&gt; 関数は，例えば &lt;code&gt;readFile&lt;/code&gt; 関数などで呼び出されている)．&lt;/p&gt;
&lt;h2 id="対処法"&gt;対処法&lt;/h2&gt;
&lt;p&gt;日本語 Windows Haskeller 筆頭の igrep 氏が Haskell-jp Blog に投稿してくれてる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.jp/blog/posts/2017/windows-gotchas.html"&gt;WindowsでHaskellを扱う時によく遭遇するエラーと対処法 - Haskell-jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は(孫プロセスとして読んでるせいか)「それでもダメな場合」に当たる． つまり，場当たり的な解決方法(&lt;code&gt;chcp 65001&lt;/code&gt; と打つとか)ではダメで，プログラムを修正するしかない．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;神な igrep 氏は，この場合の解決策も書いておいてくれた． この &lt;a href="https://github.com/haskell/haddock/pull/566"&gt;PR&lt;/a&gt; を参考にして書き換えてやればよい．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tasty-discover&lt;/code&gt; も&lt;a href="https://github.com/lwm/tasty-discover/pull/138/files"&gt;こんな感じに書き加えた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="pr-を出す"&gt;PR を出す&lt;/h2&gt;
&lt;p&gt;修正自体は1時間ほどで終わり(移動中の新幹線の中で直した)，これでテストを実行できるようになったので PR を出さずに満足してしまった(あるある)． 半月ほどほっといてたら，同じケースで困った知り合いに &lt;a href="https://github.com/lwm/tasty-discover/issues/135"&gt;Issue&lt;/a&gt; を出されてしまった(笑)&lt;/p&gt;
&lt;p&gt;しょうがないので PR を出そうとしたら，「Windows は良く分からないから，ぜひ Windows 環境用の自動テストも欲しい！」と&lt;a href="https://github.com/lwm/tasty-discover/issues/127"&gt;作者に言われてしまった&lt;/a&gt;(「時間があればやって」とね)．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.appveyor.com/"&gt;AppVeyor&lt;/a&gt; と言うのを使えばいいみたい． 調べたらサクッとできそうなので，やってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci"&gt;Using AppVeyor for Haskell+Windows CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事にある設定ファイルをそのままコピペしてやってみたが，問題がふたつあった． ひとつ目は，&lt;code&gt;tasty-discover&lt;/code&gt; のテスト自体に &lt;code&gt;tasty-discover&lt;/code&gt; を使っている点だ． 最初に &lt;code&gt;stack test&lt;/code&gt; を実行するときにはまだ &lt;code&gt;tasty-discover&lt;/code&gt; はインストールされてないのでテストが落ちてしまう．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2 of 2] Compiling Paths_tasty_discover ( .stack-work\dist\010ee936\build\tasty-discover\autogen\Paths_tasty_discover.hs, .stack-work\dist\010ee936\build\tasty-discover\tasty-discover-tmp\Paths_tasty_discover.o )
Linking .stack-work\dist\010ee936\build\tasty-discover\tasty-discover.exe ...
Preprocessing test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
Building test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
ghc.EXE: could not execute: tasty-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なので，&lt;code&gt;stack test&lt;/code&gt; する前に &lt;code&gt;stack install&lt;/code&gt; することにした．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;ふたつ目は，そもそも WIndows のビルドが落ちる点． &lt;code&gt;System.FilePath&lt;/code&gt; に関するバグだったので，&lt;a href="https://github.com/lwm/tasty-discover/pull/136/files#diff-383b12983902facd1ce205458e1061b6"&gt;サクッと直した&lt;/a&gt;． Windows のテストに関する &lt;a href="https://github.com/lwm/tasty-discover/pull/136"&gt;PR&lt;/a&gt; もマージされたので，本命の &lt;a href="https://github.com/lwm/tasty-discover/pull/138"&gt;PR&lt;/a&gt; も出した(これもマージされた)．&lt;/p&gt;
&lt;h2 id="今回の問題をテストする"&gt;今回の問題をテストする(？)&lt;/h2&gt;
&lt;p&gt;今回の問題のテストも欲しいと言われた． &lt;code&gt;tasty-discover&lt;/code&gt; のテスト自体が &lt;code&gt;tasty-discover&lt;/code&gt; を使うため，ユニットテストとして表現できない． &lt;code&gt;stack test&lt;/code&gt; そのものが落ちるか落ちないかのテストはできるが，それはなんか違うなぁと思い，結局コミットはしていない．&lt;/p&gt;
&lt;p&gt;ただし，いちおう AppVeyor で&lt;a href="https://ci.appveyor.com/project/matsubara0507/tasty-discover/build/1.0.9"&gt;再現できるようにはした&lt;/a&gt;． AppVeyor はデフォルトだと日本語環境になっていない(即ち Shift-JIS じゃない)ため落ちない． なので，以下を参考にして日本語環境にして実行した．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appveyor/ci/issues/846"&gt;Support a different code page · Issue #846 · appveyor/ci&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;init:
- ps: Set-WinSystemLocale ja-JP
- ps: Start-Sleep -s 5
- ps: Restart-Computer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というのを &lt;code&gt;appveyor.yml&lt;/code&gt; に書き加えるだけで良い．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;なんか &lt;a href="https://github.com/lwm/tasty-discover/issues/139"&gt;Push 権限を貰った&lt;/a&gt;． こういうこともあるんですね(OSS歴が浅いので驚いた)．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v6</id><title type="text">test6</title><updated>2018-03-03T13:44:46Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v6"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v5</id><title type="text">test5</title><updated>2018-03-03T12:20:13Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v5"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v4</id><title type="text">test4</title><updated>2018-03-03T05:46:33Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v4"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v3</id><title type="text">test3</title><updated>2018-03-03T05:05:52Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v3"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v2</id><title type="text">test2</title><updated>2018-03-03T04:59:34Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v2"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v1</id><title type="text">test1</title><updated>2018-03-03T04:55:52Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v1"/></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-03-03-liquidhaskell-intro.html</id><title type="text">Liquid Haskell のインストールと学習方法</title><updated>2018-03-03T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-03-03-liquidhaskell-intro.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; を半年ほど勉強した結果、色々と出来ることが増えて楽しくなってきました。&lt;/p&gt;
&lt;p&gt;現状、日本語で詳しく説明しているブログ記事や &lt;code&gt;Qiita&lt;/code&gt; 記事はほとんどありません。&lt;/p&gt;
&lt;p&gt;とても面白いツールだと思いますので、色々と紹介していけたらと思います。&lt;/p&gt;
&lt;p&gt;今回は &lt;code&gt;Liquid Haskell&lt;/code&gt; の導入方法について簡単に説明したいと思います。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="liquid-haskell-とは"&gt;Liquid Haskell とは？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; は &lt;code&gt;GHC&lt;/code&gt; の型よりも、さらに厳密な &lt;code&gt;篩型 (Refinement Type)&lt;/code&gt; の型検査器です。&lt;/p&gt;
&lt;p&gt;既存のコードを変更 (さらには実行すら) することなく利用できるため、既存のプロジェクトの一部にだけ導入することも可能です。&lt;/p&gt;
&lt;p&gt;また、つい最近も &lt;code&gt;GADT&lt;/code&gt; をサポートしたりと、開発はとても活発に行われています。&lt;/p&gt;
&lt;p&gt;正しいソフトウェアを楽しく作るために、&lt;code&gt;Liquid Haskell&lt;/code&gt; を学習してみるのはどうでしょうか！&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;Liquid&lt;/code&gt; という単語は &lt;code&gt;液体&lt;/code&gt; と言いたくなりますが、それとはあまり関係なく、実際は &lt;code&gt;Logically Qualified Data&lt;/code&gt; の略です。(ロゴは &lt;code&gt;水滴&lt;/code&gt; + &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; なので、全く無関係では無いかもですが)&lt;/p&gt;
&lt;h2 id="インストール"&gt;インストール&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; は以下の2つのリポジトリで開発が進められています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquidhaskell"&gt;ucsd-progsys/liquidhaskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquid-fixpoint"&gt;ucsd-progsys/liquid-fixpoint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;liquidhaskell&lt;/code&gt; がフロントエンド (コマンドライン処理やパーサーなどの処理等) を行い &lt;code&gt;liquid-fixpoint&lt;/code&gt; が &lt;code&gt;SMT&lt;/code&gt; ソルバに投げるための処理を色々とやっている印象です。(詳しくないので間違ってたらすみません)&lt;/p&gt;
&lt;p&gt;なので、僕らが関係するのは基本的に &lt;code&gt;liquidhaskell&lt;/code&gt; リポジトリの方です。(&lt;code&gt;liquid-fixpoint&lt;/code&gt; はサブモジュールになっています)&lt;/p&gt;
&lt;p&gt;また、実際にチェックを行うのは &lt;code&gt;SMT&lt;/code&gt; ソルバなので、そちらも同様にインストールが必要です。&lt;/p&gt;
&lt;h3 id="smt-ソルバのインストール"&gt;SMT ソルバのインストール&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SMT&lt;/code&gt; ソルバも色々と種類があるようで、公式では以下の3種類が紹介されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Z3&lt;/li&gt;
&lt;li&gt;CVC4&lt;/li&gt;
&lt;li&gt;MathSat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どれでもちゃんと動くので好きなソルバを使えば良いのですが、どれを選んだら良いかわからない人は &lt;code&gt;Z3&lt;/code&gt; にしましょう。&lt;/p&gt;
&lt;p&gt;理由としてはインストール方法が簡単で、性能も良いそうです。&lt;/p&gt;
&lt;h4 id="ubuntu"&gt;Ubuntu&lt;/h4&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ sudo apt install z3

$ z3 --version
Z3 version 4.4.1&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="mac-brew"&gt;Mac (brew)&lt;/h4&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ brew install z3

$ z3 --version
Z3 version 4.6.0 - 64 bit&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="liquid-haskell-のインストール"&gt;Liquid Haskell のインストール&lt;/h3&gt;
&lt;p&gt;現状、一番安定しているのは &lt;code&gt;github&lt;/code&gt; の &lt;a href="https://github.com/ucsd-progsys/liquidhaskell"&gt;&lt;strong&gt;develop&lt;/strong&gt;&lt;/a&gt; ブランチを &lt;code&gt;stack&lt;/code&gt; でビルドしてインストールする方法だと思います。&lt;/p&gt;
&lt;p&gt;また、その他のインストール方法等は &lt;a href="https://github.com/ucsd-progsys/liquidhaskell/blob/develop/INSTALL.md"&gt;INSTALL.md&lt;/a&gt; をご参照下さい。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ git clone --recursive git@github.com:ucsd-progsys/liquidhaskell.git
$ cd liquidhaskell
$ stack install

$ liquid
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stack プロジェクトで利用する場合は、以下のように &lt;code&gt;stack exec&lt;/code&gt; コマンドで呼び出します。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack exec -- liquid
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="サンプルプログラム"&gt;サンプルプログラム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;myDiv&lt;/code&gt; 関数の例を使って &lt;code&gt;LiquidHaskell&lt;/code&gt; に慣れましょう！&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- MyDiv.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;MyDiv&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;myDiv&lt;/code&gt; の実装は単に &lt;code&gt;div&lt;/code&gt; をラップしただけです。&lt;/p&gt;
&lt;p&gt;この関数はだいたい上手く動きますが、もし第二引数に &lt;strong&gt;0&lt;/strong&gt; が与えられたらどうでしょうか？そう、実行時エラーになります・・・。試してみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack repl -- MyDiv.hs
*MyDiv&amp;gt; myDiv 10 2
5
*MyDiv&amp;gt; myDiv 10 0
*** Exception: divide by zero&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;全然安全ではありませんね。&lt;/p&gt;
&lt;p&gt;では、どうしたら本当に安全な &lt;code&gt;myDiv&lt;/code&gt; を作れるのでしょうか？&lt;/p&gt;
&lt;p&gt;その答えは&lt;code&gt;篩(ふるい)型&lt;/code&gt;にあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; では &lt;code&gt;篩型&lt;/code&gt; を &lt;code&gt;{-@ ... @-}&lt;/code&gt; のコメント形式で記述します。&lt;code&gt;Liquid Haskell&lt;/code&gt; を利用するメリットの1つは、篩型の自動推論です。(推論できない場合も多々ありますが、結構色々と推論してくれます)&lt;/p&gt;
&lt;p&gt;先程の &lt;code&gt;myDiv&lt;/code&gt; には篩型を書いていませんが、こういう場合に &lt;code&gt;Liquid Haskell&lt;/code&gt; は &lt;code&gt;Haskell&lt;/code&gt; の型をそのまま篩型として利用します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;myDiv&lt;/code&gt; に対して明示的に篩型を書いてみましょう！&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; Int -&amp;gt; Int @-}&lt;/span&gt; &lt;span class="co"&gt;-- これが篩型&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;myDiv&lt;/code&gt; 関数を &lt;code&gt;LquidHaskell&lt;/code&gt; でチェックしてみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid MyDiv.hs
**** RESULT: UNSAFE ************************************************************

 MyDiv.hs:4:11-13: Error: Liquid Type Mismatch

 4 | myDiv = div
             ^^^

   Inferred type
     VV : Int

   not a subtype of Required type
     VV : {VV : Int | VV /= 0}

   In Context&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なぜか &lt;code&gt;UNSAFE&lt;/code&gt; が表示されましたね。これは &lt;code&gt;Liquid Haskell&lt;/code&gt; で既に &lt;code&gt;div&lt;/code&gt; の篩型が定義されているからです。(&lt;a href="https://github.com/ucsd-progsys/liquidhaskell/blob/develop/include/GHC/Real.spec#L19"&gt;div&lt;/a&gt; 以外にも色々ありますが、充実しているとは言い難いと思います)&lt;/p&gt;
&lt;p&gt;だいたいこんな感じで、第二引数に &lt;strong&gt;0を含まないInt型&lt;/strong&gt; という事前条件がついているのです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ div :: Int -&amp;gt; {v:Int | v /= 0} -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そのため、先程のエラーメッセージで以下のように指摘されてしまったのです。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;not a subtype of Required type
     VV : {VV : Int | VV /= 0}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;つまり、僕らの定義した篩型は &lt;code&gt;0&lt;/code&gt; を含む &lt;code&gt;Int&lt;/code&gt; 型なので、このままだと &lt;code&gt;div&lt;/code&gt; に &lt;code&gt;0&lt;/code&gt; が与えられてしまう可能性があるよ！ということを教えてくれています。&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; Int -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;myDiv&lt;/code&gt; にも同じ篩型をつけてみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; {v:Int | v /= 0} -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;SAFE&lt;/code&gt; になります。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid MyDiv.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt; を含まない &lt;code&gt;Int&lt;/code&gt; 型というのは、よく使いそうなので篩型のエイリアスとして定義してみます。&lt;/p&gt;
&lt;p&gt;篩型のエイリアスは &lt;code&gt;type&lt;/code&gt; キーワードを使います。&lt;code&gt;Haskell&lt;/code&gt; と同じですね。&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ type NonZero = {v:Int | v /= 0} @-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして &lt;code&gt;myDiv&lt;/code&gt; の篩型も &lt;code&gt;NonZero&lt;/code&gt; で置き換えます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ type NonZero = {v:Int | v /= 0} @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; NonZero -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;意味は全く同じですが、先程よりもわかりやすくなりました。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid MyDiv.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後に &lt;code&gt;myDiv&lt;/code&gt; を呼び出す関数を定義してみましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;good&lt;/code&gt; は問題の無い使い方です。&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="ot"&gt;good ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;good &lt;span class="fu"&gt;=&lt;/span&gt; myDiv &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、以下のような関数 &lt;code&gt;bad&lt;/code&gt; が定義された場合、&lt;code&gt;Liquid Haskell&lt;/code&gt; は &lt;code&gt;UNSAFE&lt;/code&gt; を返します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;&lt;span class="ot"&gt;bad ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;bad &lt;span class="fu"&gt;=&lt;/span&gt; myDiv &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid MyDiv.hs
**** RESULT: UNSAFE ************************************************************

 MyDiv.hs:13:7-16: Error: Liquid Type Mismatch

 13 | bad = myDiv 10 0
            ^^^^^^^^^^

   Inferred type
     VV : {v : Int | v == (0 : int)
                     &amp;amp;&amp;amp; v == ?a}

   not a subtype of Required type
     VV : {VV : Int | VV /= 0}

   In Context
     ?a : {?a : Int | ?a == (0 : int)}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="問題"&gt;問題&lt;/h2&gt;
&lt;p&gt;以下のプログラムは標準入力から入力された数 &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; で &lt;code&gt;safeDiv n m&lt;/code&gt; を計算します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;safeDiv&lt;/code&gt; の &lt;code&gt;check&lt;/code&gt; を正しく実装して &lt;code&gt;Liquid Haskell&lt;/code&gt; の結果を &lt;code&gt;SAFE&lt;/code&gt; にしてみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb20-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- Main.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Main&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-4" data-line-number="4"&gt;&lt;span class="co"&gt;{-@ type NonZero = {v:Int | v /= 0} @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-6" data-line-number="6"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; NonZero -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-7" data-line-number="7"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-8" data-line-number="8"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-10" data-line-number="10"&gt;&lt;span class="co"&gt;{-@ lazy main @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-11" data-line-number="11"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-12" data-line-number="12"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-13" data-line-number="13"&gt;  n &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-14" data-line-number="14"&gt;  m &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-15" data-line-number="15"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; safeDiv (read n) (read m) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-16" data-line-number="16"&gt;    &lt;span class="dt"&gt;Just&lt;/span&gt; res &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; print res&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-17" data-line-number="17"&gt;    &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-18" data-line-number="18"&gt;      putStrLn &lt;span class="st"&gt;&amp;quot;第二引数に0が入力されています&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-19" data-line-number="19"&gt;      putStrLn &lt;span class="st"&gt;&amp;quot;もう一度入力してください&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-20" data-line-number="20"&gt;      main&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-22" data-line-number="22"&gt;&lt;span class="co"&gt;{-@ safeDiv :: Int -&amp;gt; Int -&amp;gt; Maybe Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-23" data-line-number="23"&gt;&lt;span class="ot"&gt;safeDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-24" data-line-number="24"&gt;safeDiv n m&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-25" data-line-number="25"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; check     &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; div n m&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-26" data-line-number="26"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; otherwise &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-27" data-line-number="27"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-28" data-line-number="28"&gt;   check &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hint: &lt;code&gt;div&lt;/code&gt; に &lt;code&gt;0&lt;/code&gt; を通さないよう &lt;code&gt;check&lt;/code&gt; でバリデーションすれば良いです。&lt;/p&gt;
&lt;h3 id="エラーメッセージ"&gt;エラーメッセージ&lt;/h3&gt;
&lt;p&gt;現状では、&lt;code&gt;Liquid Haskell&lt;/code&gt; は以下のエラーメッセージを返します。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid Main.hs
**** RESULT: UNSAFE ************************************************************

 Main.hs:24:24-30: Error: Liquid Type Mismatch

 24 |   | check     = Just $ div n m
                             ^^^^^^^

   Inferred type
     VV : {v : Int | v == m}

   not a subtype of Required type
     VV : {VV : Int | VV /= 0}

   In Context
     m : Int&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="実行例"&gt;実行例&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; が &lt;code&gt;UNSAFE&lt;/code&gt; の場合は実行時エラーが発生します。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack repl -- Main.hs
*Main&amp;gt; main
10
2
5

*Main&amp;gt; main
10
0
*** Exception: divide by zero&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; を &lt;code&gt;SAFE&lt;/code&gt; にすると、再入力を促すようになります。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;*Main&amp;gt; main
10
0
第二引数に0が入力されています
もう一度入力してください
10
2
5&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="興味を持った方へ"&gt;興味を持った方へ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; に興味を持った方は以下の文献を読んで &lt;code&gt;Liquid Haskell&lt;/code&gt; に詳しくなりましょう！(個人的にまとめているやつを貼り付けただけなので雑ですみません・・・)&lt;/p&gt;
&lt;p&gt;たぶん、おすすめは以下のチュートリアルです。(僕はまだ読んでないですが、かなり最近できたものなので情報が新しく良いのではないかと思います)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://liquid.kosmikus.org/"&gt;Liquid Haskell Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="日本語の情報"&gt;日本語の情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ccvanishing.hateblo.jp/entry/2016/12/24/193038"&gt;LiquidHaskell コトハジメ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dodgsonlabs.booth.pm/items/490689"&gt;入門 LiquidHaskell −篩型による静的コード解析−&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://demand-side-science.jp/blog/2014/flops2014%E5%A0%B1%E5%91%8A/"&gt;FLOPS2014報告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ブログ"&gt;ブログ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ucsd-progsys.github.io/liquidhaskell-blog/"&gt;liquidhaskell-blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.haskellforall.com/2015/12/compile-time-memory-safety-using-liquid.html"&gt;Compile-time memory safety using Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://conscientiousprogrammer.com/blog/2015/12/23/24-days-of-hackage-2015-day-23-liquid-haskell-refinement-types-for-the-real-world/"&gt;Liquid Haskell: refinement types for the real world&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="チュートリアル"&gt;チュートリアル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://liquid.kosmikus.org/"&gt;Liquid Haskell Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquidhaskell-tutorial"&gt;liquidhaskell-tutorial&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;long tutorial&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ucsd-progsys.github.io/liquidhaskell-tutorial/book.pdf"&gt;book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquidhaskell-tutorial/blob/master/pdf/programming-with-refinement-types.pdf"&gt;programming-with-refinement-types.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/lh-workshop"&gt;lh-workshop&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;short tutorial&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~nvazou/presentations/shonan17/01-index.html"&gt;Liquid Haskell: Verification of Haskell Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="スライド"&gt;スライド&lt;/h3&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/00_Index.lhs.slides.html#/"&gt;Liquid Types For Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/01_SimpleRefinements.lhs.slides.html#/"&gt;Simple Refinement Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/02_Measures.lhs.slides.html#/"&gt;Measuring Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/03_HigherOrderFunctions.lhs.slides.html#/"&gt;Higher-Order Specifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/04_AbstractRefinements.lhs.slides.html#/"&gt;Abstract Refinements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/09_Laziness.lhs.slides.html#/"&gt;Lazy Evaluation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/10_Termination.lhs.slides.html#/"&gt;Refinements &amp;amp; Termination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/11_Evaluation.lhs.slides.html#/"&gt;Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://web.eecs.umich.edu/~weimerw/students/anish-ms-pres.pdf"&gt;Finding and Fixing Bugs in Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Gabriel439/slides/blob/master/liquidhaskell/slides.md"&gt;Scrap your Bounds Checks with Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikivazou.github.io/static/popl18/reflection.pdf"&gt;Refinement Reflection: Complete Verification with SMT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://popl18.sigplan.org/event/plmw-popl-2018-liquidhaskell-overview"&gt;Liquid Haskell: Refinement Types for Haskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="論文"&gt;論文&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~pmr/papers/rondon-liquid-types.pdf"&gt;Pat Rondon’s Ph.D Dissertation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/liquid/liquid_types_techrep.pdf"&gt;Tech Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/papers/refinement_types_for_haskell.pdf"&gt;Refinement Types For Haskell, ICFP 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/papers/real_world_liquid.pdf"&gt;LiquidHaskell in the Real World, Haskell 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/papers/abstract_refinement_types.pdf"&gt;Abstract Refinement Types, ESOP 2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1701.03320.pdf"&gt;An Introduction to Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~nvazou/thesis/main.pdf"&gt;Liquid Haskell: Haskell as a Theorem Prover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikivazou.github.io/static/Haskell17/a-tale.pdf"&gt;A Tale of Two Provers Verifying Monoidal String Matching in Liquid Haskell and Coq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="youtube"&gt;Youtube&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LEsEME7JwEE"&gt;Liquid Types for Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vYh27zz9530"&gt;Ranjit Jhala - Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vQrutfPAERQ"&gt;LambdaConf 2015 - LiquidHaskell Refinement Types for Haskell Ranjit Jhala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vqvNQixKr6w"&gt;Haskell 2014: LiquidHaskell: Refinement Types for the Real World, Eric L. Seidel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nd3buP97Ryw"&gt;07 Bounded Refinement Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;篩型は &lt;code&gt;{-@ ... @-}&lt;/code&gt; で記述する&lt;/li&gt;
&lt;li&gt;篩型の型エイリアスは &lt;code&gt;{-@ type @-}&lt;/code&gt; で記述する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20180302/1519966635</id><title type="text">TLS 1.3 開発日記 その26 ID 24</title><updated>2018-03-02T04:57:15Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20180302/1519966635"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;TLS 1.3 ドラフト24で重要な変更は1つだけ。レコードのバージョン。&lt;/p&gt;
&lt;p&gt;ドラフト23では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0301 (TLS 1.0)&lt;/li&gt;
&lt;li&gt; ServerHello のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;に定められた。これはこれでよい。&lt;/p&gt;
&lt;p&gt;しかし、サーバから HelloRetryRequest なる ServerHello が返され場合はどうなるだろう？ ある実装では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0301 (TLS 1.0)&lt;/li&gt;
&lt;li&gt; ServerHello (HRR) のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0301 (TLS 1.0)&lt;/li&gt;
&lt;li&gt; ServerHello のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となるだろう。また別の実装では、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0301 (TLS 1.0)&lt;/li&gt;
&lt;li&gt; ServerHello (HRR) のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;li&gt; ServerHello のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となるだろう。&lt;/p&gt;
&lt;p&gt;どちらがミドルボックスを騙せるかというと、後者である。前者はレコードのバージョンがころころ変わるから、ミドルボックスが怪しいと思って通信を遮断するかもしれない。&lt;/p&gt;
&lt;p&gt;というわけで、2回目の ClientHello のレコードバージョンは、0x0303 に定められた。なお、実装者間の合意ではドラフト 24 に対応しても、supported_versions 拡張に指定するTLSのバージョンにはドラフト 23 の値を使うことで合意が取れている。&lt;/p&gt;
&lt;p&gt;個人的には、レコードの書式にバージョンフィールドがあるのはプロトコルの設計ミスだと思う。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-03-01-liquidhaskell.html</id><title type="text">Liquid Haskell</title><updated>2018-03-01T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-03-01-liquidhaskell.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Liquid Haskell で少しハマったのでメモとして残しておきます。&lt;/p&gt;
&lt;p&gt;本来なら先に仕様を書いて実装を書くべきだと思いますが、今回の例は既存のコードにリファインメント型をつけるような場合を想定しています。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Liquid Haskell を気になってる人向けの記事です。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="やりたいこと"&gt;やりたいこと&lt;/h2&gt;
&lt;p&gt;データの挿入と更新操作を次のような型で表現します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Update&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="dt"&gt;Eq&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のデータ型を使って、次のような関数を定義します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="ot"&gt;isInsert ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;isInsert &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;isInsert _      &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;adjustBound&lt;/code&gt; 関数は以下のように動作します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;span class="dv"&gt;11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;100&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="dv"&gt;11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;&lt;span class="dv"&gt;11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Update&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" data-line-number="9"&gt;&lt;span class="dv"&gt;5&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" data-line-number="10"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Update&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;100&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" data-line-number="11"&gt;&lt;span class="dv"&gt;10&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-12" data-line-number="12"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Update&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-13" data-line-number="13"&gt;&lt;span class="dv"&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;adjustBound&lt;/code&gt; のような関数でバグが無いことを確認するためには何をしたら良いでしょうか？&lt;/p&gt;
&lt;p&gt;型は非常に強力ですが、値について何も教えてくれません。&lt;/p&gt;
&lt;h2 id="バグの少ない世界を目指して"&gt;バグの少ない世界を目指して&lt;/h2&gt;
&lt;p&gt;僕が Haskell を使う理由は、第一に &lt;code&gt;楽しい&lt;/code&gt; からです。そのため、「勉強しても就職する時に役に立たないでしょ？」などと言われても全く気になりません。(そもそも、就職するために勉強するわけじゃないですよね)&lt;/p&gt;
&lt;p&gt;また Haskell を使えば、正しいソフトウェアを普通に作ることができます。また、&lt;code&gt;hspec&lt;/code&gt; などで単体テストを書いたり、&lt;code&gt;QuichCheck&lt;/code&gt; などでランダムテストを書くことで、過去に起こった問題を再発させないようにする努力や、バグを少なくするための取り組みが行われています。&lt;/p&gt;
&lt;p&gt;しかしながら、個人的にはどれもまだ不安です。もしかしたら、チェックしてない部分にバグがあるんじゃないの・・・？&lt;/p&gt;
&lt;p&gt;そんな心配性の方は &lt;code&gt;Liquid Haskell (LH)&lt;/code&gt; を使いましょう！&lt;/p&gt;
&lt;h2 id="型をより厳しく"&gt;型をより厳しく&lt;/h2&gt;
&lt;p&gt;最初に定義した &lt;code&gt;Operation&lt;/code&gt; 型と &lt;code&gt;adjustBound&lt;/code&gt; を再掲します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- LH.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;LH&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Update&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="dt"&gt;Eq&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;&lt;span class="ot"&gt;isInsert ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;isInsert &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;isInsert _      &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とりあえず、現在のコードを &lt;code&gt;LH&lt;/code&gt; にかけてみます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.


**** DONE:  A-Normalization ****************************************************


**** DONE:  Extracted Core using GHC *******************************************


**** DONE:  Transformed Core ***************************************************

Working 100% [=================================================================]

**** DONE:  annotate ***********************************************************


**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RESULT: SAFE&lt;/code&gt; が表示されれば問題ありません！&lt;/p&gt;
&lt;h3 id="入力を自然数に限定させよう"&gt;入力を自然数に限定させよう&lt;/h3&gt;
&lt;p&gt;例えば &lt;code&gt;lower&lt;/code&gt; と &lt;code&gt;upper&lt;/code&gt; が自然数 (0含む) しか許容しないという仕様が与えられた時、どうしますか？&lt;/p&gt;
&lt;p&gt;よくある対応としては、コメントにその旨を書いたり、テストを作ったりという作業になるでしょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; では上記の仕様を &lt;code&gt;事前条件&lt;/code&gt; として記述することができます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ adjustBound :: _ -&amp;gt; Nat -&amp;gt; Nat -&amp;gt; _ -&amp;gt; _ @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Nat&lt;/code&gt; は &lt;a href="https://github.com/ucsd-progsys/liquidhaskell/blob/develop/include/Prelude.spec"&gt;Prelude&lt;/a&gt; で以下のように定義されています。つまり、0以上の &lt;code&gt;Int&lt;/code&gt; のみを含むリファインメント型です。&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ type Nat = {v: Int | v &amp;gt;= 0 } @-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだけです。&lt;code&gt;LH&lt;/code&gt; で結果を確かめてみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
...

**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SAFE&lt;/code&gt; ですね！&lt;/p&gt;
&lt;p&gt;これでもう &lt;code&gt;adjustBound&lt;/code&gt; の &lt;code&gt;lower&lt;/code&gt; と &lt;code&gt;upper&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; 以上の自然数でしか呼び出されていないことが示されました。&lt;/p&gt;
&lt;h3 id="もう少し具体例"&gt;もう少し具体例&lt;/h3&gt;
&lt;p&gt;では、別のプログラマが &lt;code&gt;adjustBound&lt;/code&gt; を利用した関数を作ったとしましょう。この関数自体に意味はないですが、&lt;code&gt;LH&lt;/code&gt; を理解するためにはとても良い例だと思います。&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="ot"&gt;f ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;f &lt;span class="fu"&gt;=&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Insert&lt;/span&gt; (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;) (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;50&lt;/span&gt;) (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;70&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数 &lt;code&gt;f&lt;/code&gt; は、型が正しいため当然コンパイルできます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack repl -- LH.hs
&amp;gt; f
-49&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;けれども、僕らの仕様では &lt;code&gt;adjustBound&lt;/code&gt; の &lt;code&gt;lower&lt;/code&gt; と &lt;code&gt;upper&lt;/code&gt; には自然数しか適用してはいけないはずです。&lt;/p&gt;
&lt;p&gt;次に &lt;code&gt;LH&lt;/code&gt; を実行してみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
**** RESULT: UNSAFE ************************************************************


 LH.hs:18:25-28: Error: Liquid Type Mismatch

 18 | f = adjustBound Insert (-100) (-50) (-70)
                              ^^^^


   Inferred type
    VV : {v : Int | v == (-?a)
                    &amp;amp;&amp;amp; v == ?b}

  not a subtype of Required type
    VV : {VV : Int | VV &amp;gt;= 0}

  In Context
    ?b : {?b : Int | ?b == (-?a)}

    ?a : {?a : Int | ?a == (100 : int)}


 LH.hs:18:32-34: Error: Liquid Type Mismatch

 18 | f = adjustBound Insert (-100) (-50) (-70)
                                     ^^^


   Inferred type
    VV : {v : Int | v == (-?b)
                    &amp;amp;&amp;amp; v == ?a}

  not a subtype of Required type
    VV : {VV : Int | VV &amp;gt;= 0}

  In Context
    ?b : {?b : Int | ?b == (50 : int)}

    ?a : {?a : Int | ?a == (-?b)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;UNSAFE&lt;/code&gt; になりましたね。こういうことです。&lt;/p&gt;
&lt;p&gt;つまり、&lt;strong&gt;自分たちが使っている範囲&lt;/strong&gt;で &lt;code&gt;Liquid Haskell&lt;/code&gt; のリファインメント型について、正しく整合性が取れているのかということを判定しています。&lt;/p&gt;
&lt;h3 id="戻り値の型も厳しくしよう"&gt;戻り値の型も厳しくしよう！&lt;/h3&gt;
&lt;p&gt;先程、事前条件についてリファインメント型を書きました。&lt;/p&gt;
&lt;p&gt;次は事後条件についてリファインメントを書きましょう！&lt;/p&gt;
&lt;p&gt;同様に戻り値の型も自然数という仕様にします。&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ adjustBound :: _ -&amp;gt; Nat -&amp;gt; Nat -&amp;gt; _ -&amp;gt; Nat @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;リファインメント型 (Refinement type) は &lt;code&gt;篩 (ふるい) 型&lt;/code&gt; と訳されている本 (&lt;a href="https://taimen.jp/f/389"&gt;入門LiquidHaskell−篩型による静的コード解析−&lt;/a&gt;) もありますが、それは &lt;code&gt;Haskell&lt;/code&gt; の型の値が条件によって &lt;code&gt;ふるい&lt;/code&gt; 落とされて、新しい型 (リファインメント型) になっているというイメージから来ているのだと思います。(読んだこと無いので間違ってたらすみません・・・。)&lt;/p&gt;
&lt;p&gt;追記: チェシャ猫さんから &lt;code&gt;篩型&lt;/code&gt; について教えてもらいました！&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;
&lt;p lang="ja" dir="ltr"&gt;
&amp;gt; リファインメント型 (Refinement type) は 篩 (ふるい) 型 と訳されている本もありますが&lt;br&gt;&lt;br&gt;頒布したときに最も多かった質問は「これ何て読むんですか？」だった。ちなみに「篩型」はこの本で勝手に作った造語ではなく、論文タイトルなどにも使われています。&lt;a href="https://t.co/Du6mK1hqdD"&gt;https://t.co/Du6mK1hqdD&lt;/a&gt;
&lt;/p&gt;
— チェシャ猫 (&lt;span class="citation" data-cites="y_taka_23"&gt;@y_taka_23&lt;/span&gt;) &lt;a href="https://twitter.com/y_taka_23/status/969499842895495168?ref_src=twsrc%5Etfw"&gt;2018年3月2日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;
&lt;p lang="ja" dir="ltr"&gt;
五十嵐先生と末永先生が発案した訳語のようです。 &lt;a href="https://t.co/rcZuFuptl6"&gt;https://t.co/rcZuFuptl6&lt;/a&gt;
&lt;/p&gt;
— チェシャ猫 (&lt;span class="citation" data-cites="y_taka_23"&gt;@y_taka_23&lt;/span&gt;) &lt;a href="https://twitter.com/y_taka_23/status/969515905737621506?ref_src=twsrc%5Etfw"&gt;2018年3月2日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="もっと仕様を"&gt;もっと仕様を&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;adjustBound&lt;/code&gt; 関数はこれで十分なのでしょうか？人によっては十分だね。と答えるかもしれません。&lt;/p&gt;
&lt;p&gt;しかし、今回は次のような仕様を与えることにします。&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;code&gt;upper&lt;/code&gt; は &lt;code&gt;lower&lt;/code&gt; 以上の自然数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Insert&lt;/code&gt; の操作の場合の戻り値は &lt;code&gt;lower&lt;/code&gt; 〜 &lt;code&gt;upper + 1&lt;/code&gt; の間の自然数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Update&lt;/code&gt; の操作の場合の戻り値は &lt;code&gt;lower&lt;/code&gt; 〜 &lt;code&gt;lower `max` (n `min` upper)&lt;/code&gt; の間の自然数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここからが面白いところです。&lt;/p&gt;
&lt;p&gt;まずは前準備として &lt;code&gt;x 〜 y&lt;/code&gt; までの間の自然数を表すリファインメント型と述語を定義します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ type Btwn Lo Hi = {v:Int | Lo &amp;lt;= v &amp;amp;&amp;amp; v &amp;lt;= Hi} @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;span class="co"&gt;{-@ predicate BtwnP Lo Hi = Lo &amp;lt;= v &amp;amp;&amp;amp; v &amp;lt;= Hi @-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では、&lt;code&gt;仕様1&lt;/code&gt;を反映させてみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ adjustBound :: _ -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u} -&amp;gt; _ -&amp;gt; Nat @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" data-line-number="4"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;では次に、&lt;code&gt;仕様2&lt;/code&gt; と &lt;code&gt;仕様3&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;リファインメント型は以下のようになります。&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ adjustBound ::&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;&lt;span class="co"&gt;      op:Operation -&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" data-line-number="3"&gt;&lt;span class="co"&gt;      l:Nat -&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" data-line-number="4"&gt;&lt;span class="co"&gt;      {u:Nat | l &amp;lt;= u} -&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-5" data-line-number="5"&gt;&lt;span class="co"&gt;      _ -&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-6" data-line-number="6"&gt;&lt;span class="co"&gt;      {v:Nat | if (isInsert op) then (BtwnP l (u+1)) else BtwnP l u }&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-7" data-line-number="7"&gt;&lt;span class="co"&gt;@-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-8" data-line-number="8"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-9" data-line-number="9"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-10" data-line-number="10"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-12" data-line-number="12"&gt;&lt;span class="co"&gt;{-@ measure isInsert @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-13" data-line-number="13"&gt;&lt;span class="ot"&gt;isInsert ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-14" data-line-number="14"&gt;isInsert &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-15" data-line-number="15"&gt;isInsert _      &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="はまったポイント"&gt;はまったポイント&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;if (isInsert op) then (BtwnP l (u+1)) else BtwnP l u&lt;/code&gt; の部分でかなりはまりました。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;if&lt;/code&gt; の括弧を外した場合は次のようなエラーになります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if isInsert op then (BtwnP l (u+1)) else BtwnP l u&lt;/code&gt;&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;**** RESULT: ERROR *************************************************************


 LH.hs:10:73: Error: Cannot parse specification:

 10 | {-@ adjustBound :: op:Operation -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; {v:Nat | if isInsert op then (BtwnP l (u+1)) else BtwnP l u } @-}
                                                                              ^

     unexpected &amp;quot;:&amp;quot;
     expecting operator, white space or &amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、同様に &lt;code&gt;then&lt;/code&gt; の括弧を外してもエラーになります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if (isInsert op) then BtwnP l (u+1) else BtwnP l u&lt;/code&gt;&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;**** RESULT: ERROR *************************************************************


 LH.hs:10:73: Error: Cannot parse specification:

 10 | {-@ adjustBound :: op:Operation -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; {v:Nat | if (isInsert op) then BtwnP l (u+1) else BtwnP l u } @-}
                                                                              ^

     unexpected &amp;quot;:&amp;quot;
     expecting operator, white space or &amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;else&lt;/code&gt; については括弧があっても無くても &lt;code&gt;SAFE&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;この挙動が本当にわからなくてつらかったです・・・。&lt;/p&gt;
&lt;p&gt;ちなみに、以下のような場合も同様にはまるので、ご注意ください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- UNSAFE
{-@ adjustBound :: _ -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; Btwn l (u+1) @-}
{-@ adjustBound :: _ -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; Btwn l {u+1} @-}

-- SAFE
{-@ adjustBound :: _ -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; Btwn {l} {u+1} @-}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt; を使う場合は多めに括弧を付けておいた方が良さそう。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; で囲むと上手くいく場合もある&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LiquidHaskell&lt;/code&gt; はすごい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この良くわからない挙動について一緒に考えてくれた友人の tkg さんありがとうございました。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-02-26-Announcing-the-debug-package.html</id><title type="text">debug パッケージのアナウンス (翻訳)</title><updated>2018-02-26T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-02-26-Announcing-the-debug-package.html"/><summary type="html">&lt;h2 id="debug-パッケージのアナウンス-翻訳"&gt;debug パッケージのアナウンス (翻訳)&lt;/h2&gt;
&lt;p&gt;Original post: &lt;a href="http://neilmitchell.blogspot.jp/2017/12/announcing-debug-package.html"&gt;Announcing the ‘debug’ package&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Haskell は素晴らしい言語ですが、Haskell のデバッグは間違いなく弱い部分です。この問題をどうにかするために、&lt;a href="https://hackage.haskell.org/package/debug"&gt;debug ライブラリ&lt;/a&gt; をリリースしました。このライブラリは全てのことを解決するのではなく、一般的なデバッグのタスクに対してシンプルで簡単に使えるような設計を目指しました。デバッグをするにあたって、みなさんが興味を持ってくれるような関数を例に取って見てみましょう。&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;QuickSort&lt;/span&gt;(quicksort) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.List&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;span class="ot"&gt;quicksort ::&lt;/span&gt; &lt;span class="dt"&gt;Ord&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;quicksort [] &lt;span class="fu"&gt;=&lt;/span&gt; []&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;quicksort (x&lt;span class="fu"&gt;:&lt;/span&gt;xs) &lt;span class="fu"&gt;=&lt;/span&gt; quicksort lt &lt;span class="fu"&gt;++&lt;/span&gt; [x] &lt;span class="fu"&gt;++&lt;/span&gt; quicksort gt&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;    &lt;span class="kw"&gt;where&lt;/span&gt; (lt, gt) &lt;span class="fu"&gt;=&lt;/span&gt; partition (&lt;span class="fu"&gt;&amp;lt;=&lt;/span&gt; x) xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt; と &lt;code&gt;ViewPatterns&lt;/code&gt; を有効にしてから、&lt;code&gt;Debug&lt;/code&gt; をインポートし、コードをインデントして &lt;code&gt;debug&lt;/code&gt; の引数に渡してやりましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TemplateHaskell, ViewPatterns #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;QuickSort&lt;/span&gt;(quicksort) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.List&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Debug&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;debug [d|&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;   quicksort :: Ord a =&amp;gt; [a] -&amp;gt; [a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;   quicksort [] = []&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;   quicksort (x:xs) = quicksort lt ++ [x] ++ quicksort gt&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;       where (lt, gt) = partition (&amp;lt;= x) xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;   |]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでデバッガを走らせることができます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ ghci QuickSort.hs
GHCi, version 8.2.1: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling QuickSort        ( QuickSort.hs, interpreted )
Ok, 1 module loaded.
*QuickSort&amp;gt; quicksort &amp;quot;haskell&amp;quot;
&amp;quot;aehklls&amp;quot;
*QuickSort&amp;gt; debugView&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;debugView&lt;/code&gt; を呼ぶと Webブラウザが起動して、記録されたデバッグの結果を見ることができます。こんな感じです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://cdn.rawgit.com/ndmitchell/debug/f6e8dbc9/debug.png" alt="debugView の実行結果" /&gt;&lt;figcaption&gt;debugView の実行結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ここから、計算の経過をクリックしつつ探すことができます。&lt;/p&gt;
&lt;p&gt;私は &lt;code&gt;debug&lt;/code&gt; を使った感想や、これを改善できるようなアイディアを求めています。そのため、フィードバックや&lt;a href="https://github.com/ndmitchell/debug/issues"&gt;バグトラッカー&lt;/a&gt;経由のお手伝いなどをお待ちしています。&lt;/p&gt;
&lt;p&gt;また別の Haskell のデバッガに興味があるのなら、&lt;a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#the-ghci-debugger"&gt;GHCi デバッガ&lt;/a&gt;や &lt;a href="https://hackage.haskell.org/package/Hoed"&gt;Hood/Hoed&lt;/a&gt; などを試してみるべきでしょう。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-02-25-SLURP.html</id><title type="text">SLURP (翻訳)</title><updated>2018-02-25T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-02-25-SLURP.html"/><summary type="html">&lt;h2 id="slurp"&gt;SLURP&lt;/h2&gt;
&lt;p&gt;Great original post: &lt;a href="https://www.snoyman.com/blog/2018/01/slurp"&gt;SLURP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;すでにコミュニティの多くの人々が SLURP の提案を見ていると思います。何人かの人たちに私の意見を聞かれたり、私が議論に参加しないことについて、まぁいろいろな意見をもらいました。この議題を私が避けてきた理由を今ここで書かせてください。作者はその提案をリリース前に教えてくれましたが、その時はサポートしないことを伝えました。私はまた、失礼にならないような形で SLURP へのコメントを控えていることも伝えました。残念ながら、その結果2つのことが起こりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人によっては、とても良くない影響を与えてしまいました。&lt;/li&gt;
&lt;li&gt;“fork” という用語の使い方の誤解、そして残念ながら作者はその間違いを訂正していません。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;つまりまとめると: 提案は私のものではなく、変更を頼んだわけでも、誰かの頭に銃を向けているわけでもありません。この説明は間違っています。他に出すことができるコメントはいくらでもありますが、正直価値はないでしょう。&lt;/p&gt;
&lt;p&gt;間違ってはいないことは、私は日常的に多くの人や Haskell のコミュニティやエコシステムマネジメントチームと直面している問題についてコミュニケーションを取っています。仕事で幅広いユーザーと交流し、不満を聞けばそれを誰かに伝えます。私も不満を持つことがあって、それを誰かに聞いてもらいます。この不満の中には、全てが同じようなものを指しているものもあります。&lt;/p&gt;
&lt;p&gt;私が公開できる情報というのは限られています。なぜなら、私に寄せられるかなり多くのコメントが、公にされることを嫌うようなプライベートなメールで書かれているからです。そして経験上、私のことを嘘つきだと誹謗中傷する人たちがいることも分かっています。この絶え間ない誹謗中傷を理由に発言を避けてきましたが、私はここに残しておくべきだと決断しました。わかったのは次の2つのことです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私のやること成すこと全てが悪だと信じている人は、私が何か根拠を持っていてもそれを見ようとはしません。&lt;/li&gt;
&lt;li&gt;私が悪魔ではないという可能性を否定しない人は、もしかしたら私の声明をその通りに受け取ってくれるかもしれないということです。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前の私は、アーキテクチャとエコシステム開発についてオープンに議論していました。これはオープンソースコミュニティを作る唯一無二の方法だと私は信じています。Stack 対 cabal の時代の緊張が最も高まったときに、多くの人がオープンな議論に異論を唱えたため、私はより静かなコミュニケーションのチャネルに移ることにしました。これはとても残念なことだったと感じています。私はエコシステムの計画についてもっとオープンに、声高に議論をしたいと思っています。他の人たちが簡単に情報にたどり着けるようにしたいと思っています。私は閉じた扉の裏側で全てを議論することを強く反対します。オープンな議論が再開できるかどうかはいずれわかることでしょう。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="fork-ってなに"&gt;“fork” ってなに?&lt;/h2&gt;
&lt;p&gt;SLURP に関する議論の大部分が SLURP そのものとはなんの関係もないことは明らかですが、fork に関するコメントは関係があります。作者がドキュメントの中で fork という言葉を使うつもりだったのなら、まずは fork についてしっかりと説明することが望ましかったのではないでしょうか。これから Stackage と Stack の世界で使われている fork という言葉の意味について、私が知っていることをお話しようと思います。この話が本当に作者たちの意図を反映しているのかどうか、それは作者たちの発言を待って確認するしかありません。&lt;/p&gt;
&lt;p&gt;ここでいう “fork” という用語は、「何かソフトウェアのプロジェクトを取ってきて、ソースコードを他の場所にホストして、別名で開発を続ける」といった文字通りの意味で使われているわけではありません (私の定義ですが)。この用語は、より一般的なものです。例えば、Stack はコードなんて何も共有していないのに、多くの人に cabal-install の fork だと言われています (もちろん、Cabal のようなベースとなるライブラリは共有していますが)。&lt;/p&gt;
&lt;p&gt;誰もが固執していることについて、明確に言及しておきましょう。誰もが考えるような Hackage の直接の競争相手を作ろうとするやりとりには、全く関わっていません。私が知っている人で、こういうことをしたい人はいませんし、私もしたくありません。なぜなら、今日の Stackage と Stack は Hackage あってこそのものだからです。そして私の知人で、この構図を変えたい人は誰一人としていません。Hackage をコントロールしたいなどと考えている人はいないのです。&lt;/p&gt;
&lt;p&gt;Hackage の “fork” というと、論理的にそういう結論に至るかもしれませんが、そうではないのです。&lt;/p&gt;
&lt;p&gt;次に、この “fork” に関する具体的な頭痛のタネについてお話しましょう。&lt;/p&gt;
&lt;h2 id="hackage-のリビジョン"&gt;Hackage のリビジョン&lt;/h2&gt;
&lt;p&gt;多くの人が Hackage のリビジョンについて嫌悪感を示しています。私も Hackage リビジョンは嫌いです。そして、他の誰よりも嫌悪感を抱く理由を持っています。私は数週間から数ヶ月ほどの自分の人生を使って、いくつかのツールにリビジョンをサポートさせたことがあります。この凄惨な歴史を辿ることもできますが、プログラマの戦記になるだけで価値はないでしょう。それよりも今に向き合うことにします。&lt;/p&gt;
&lt;p&gt;私はついに Stack 1.6 で、リビジョンの指定 (pinning) を完全にサポートしました。Stackage は既に長い間リビジョンの指定をサポートし続けています。Stackage にはいくつかのパッケージのリビジョンを無視しているものとしてリストアップする機能があります。&lt;/p&gt;
&lt;p&gt;もし仮に、今聞かれたら私はリビジョンが悪いアイディアで、無効にすべきだと答えるでしょう。そして、依存関係の解決に関する問題について、より良い解決方法があると依然として答えるでしょう (これらについては、過去に長々と議論したことがあります)。同時に、そのコストは下がっています。ユーザーが extra-deps に特定のリビジョンを付けていないこと、そして Hackage におけるリビジョンのルールが緩すぎることについては実際、いまだに心配です。これについて懸念を抱いていることは確かですが、私の中の最優先事項ではありません。&lt;/p&gt;
&lt;p&gt;ところが他の人は違う考えを持っているようです。私は Hackage Truestee が強制的に cabalファイルを編集することについて腹を立てている多くの人を知っています。彼らに反対することはありませんが、この話題に情熱を持っているわけでもありません。コミュニティのリーダーとの会話の中で、私はこの区別を明確に強調しました (少なくともそうしようとはしました)。&lt;/p&gt;
&lt;p&gt;リビジョンに関する最大の懸念は、それの持つ社会的な影響です。すなわち、誰か別のものが自分のビルドの安定性を担うということです。これまでに何度も言及してきましたが、社会的緊張の原因の最たるものに、ビルドがいきなり止まったので上流の開発者に文句を言う、というものがあります。これは大惨事への第一歩で、PVP (Package Versioning Policy) + 依存解決という手法が持つ原理的な欠陥でした。そのため、固定ビルドプランに焦点を当てたツールが必要となるのです。私はこれを何年も主張してきましたが、結局は上流を説得することができなかったので Stack を大々的に作りました。&lt;/p&gt;
&lt;p&gt;以上のことから、リビジョンとはフォークのような何かなのでしょうか? 違います。&lt;/p&gt;
&lt;h2 id="キュレーション"&gt;キュレーション&lt;/h2&gt;
&lt;p&gt;数週間前、私はこんなツイートをしました。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;
&lt;p lang="en" dir="ltr"&gt;
I did that initially. When collaborating on GPS Haskell, I removed that functionality as a requirement of the Hackage, Cabal, and Haskell Platform teams. Then GPS died and we're stuck unable to work around upstream breakage like this.
&lt;/p&gt;
— Michael Snoyman (&lt;span class="citation" data-cites="snoyberg"&gt;@snoyberg&lt;/span&gt;) &lt;a href="https://twitter.com/snoyberg/status/949385673982730240?ref_src=twsrc%5Etfw"&gt;January 5, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;Stackage のオリジナルデザインは、標準的な Linux ディストリビューションモデルに準拠していました。Hackage は私たちの上流でしたが、バージョンの境界が大きく壊れるのを防ぐために一連のパッチを整備し、あまりありませんでしたが時折 (たとえそうでも、正直覚えていませんが)、バグを修正するためにソースを編集したりしました。&lt;/p&gt;
&lt;p&gt;2014年に Stackage を cabal と Haskell のプラットフォームに組み込む計画 (GPS Haskell のコードネームで開発していました。それが地面から飛び立つことは一度もありませんでしたが) について議論をしたとき、cabal, Hackage, そして Haskell Platform のメンテナに、ローカルの変更を Stackage が整備しないことを要求されました。なので私はその機能を削除したのですが、それは私たちが今までいた世界の話です。&lt;/p&gt;
&lt;p&gt;この機能を復活させるかどうかは再検討中です。その理由を簡潔に説明しますと、これはフォークと捉えることができます。ソフトフォークと呼ぶ人もいるかもしれません。正直なところ、一連のパッチを整備するのは重労働なので Stackage に追加し直したい機能ではありません。しかし、多くのコミュニティがこの作業を必要としています。私がこのことを理解しているように、Nix も理解しています。もしもこれをフォークと言うのなら、私たちのエコシステムに広く浸透しているフォークなんでしょう。&lt;/p&gt;
&lt;p&gt;このキュレーションで扱う理由としては、新しい依存バージョンへの更新が遅いパッケージを避けるため、というものがあります。Stackage のパッケージメンテナにとって、誰か他の人がその上限に満足しないからといって、自分のパッケージのバージョンを下げるのはかなりイライラするものがあるでしょう。キュレーションはこの辺の問題を何とかできるかもしれません。私はこれをおまけの特典のように考えていますが、必要なものではないです。&lt;/p&gt;
&lt;p&gt;しかし、キュレーションには cabal-install 界隈では問題になっていないものの、Stackage や Stack 界隈で問題を引き起こしているパッケージをどうにかする、というもっと重要な理由があります。ここ数ヶ月の間に何回も問題が起こるまで、私は本当の問題だとは認識していませんでした。&lt;a href="https://github.com/haskell-hvr/cassava/pull/155"&gt;例えばこんな例があります&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;私はこの記事で、作者の誰かに何かを要求するつもりはありません。でも私は結局、これらの類の問題に多くの自分の時間を費やして対処してきています。これが現実です。私の友達や同僚は、緊急のリリースポイントを切ったり、様々な持ち越し作業に巻き込まれています。Cabal のライブラリの仕様に明記されているべきだが文書化されていないような何かのために、多くの時間を割いて Stack を変更しなければならないような現状に私の人生を浪費したくはありません。&lt;/p&gt;
&lt;p&gt;Hackage は cabal-install を壊さないために、既に大きな苦労をしています。多くの人が、 &lt;code&gt;^&amp;gt;=&lt;/code&gt; 演算子の導入がどのように Stack 1.5 を破壊したか聞いたことがあるのではないでしょうか。しかし、実はこの演算子の導入は cabal-install 1.24 も壊していたのです。この事実を知っている人がいないのは、&lt;a href="https://github.com/haskell/cabal/issues/4624"&gt;Hackage がこれらのファイルを古いバージョンの cabal-install から隠すような措置を導入した&lt;/a&gt;からです。このキュレーションのアイディアは Stack の破壊に対応する術を Stackage に対して提供するものです。Hackage も同じ方法で cabal-install へのダメージに対処するでしょう。&lt;/p&gt;
&lt;p&gt;そして、私は同じ類の処置を、Hackage から Stack へしてもらえないかとお願いしました。このお願いは、優先的な処置を求める声に後押しされています。この記事の読者は、各々の判断で自分がどう感じるか考えてください。&lt;/p&gt;
&lt;p&gt;まとめると: 私は Stackage に上流のパッケージのパッチを当てられるようにしようとしています。他の人はフォークという言葉を使うかもしれませんが、私はこれをフォークではなくキュレーションだと考えています。&lt;/p&gt;
&lt;h2 id="hackage-へのアップロードを避ける"&gt;Hackage へのアップロードを避ける&lt;/h2&gt;
&lt;p&gt;まず、これは私の好みですが、私のパッケージは Hackage に上げ続けたいと考えています。conduit や yesod, その他鋭意 Hackage でメンテ中の 80 を超えるパッケージの更新をやめるつもりも、そうしたいという願望もありません。そうは言っても、全員が全員同じように感じているわけではありません。&lt;/p&gt;
&lt;p&gt;現在 Stackage は Hackage の下流になっています。最初にパッケージが Hackage にアップロードされない限り、そのパッケージを Stackage に入れることはできません。しかし、この状況は終わりを告げようとしています。およそ、現状を変えようとしているグループは以下の 3 パターンに分けられるでしょう。&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;少なくとも一部の PVP 支持者は、PVP に従わないパッケージ作成者に対して、そのパッケージを Hackage にアップロードしないように要請 (要求) しています。これは私が幾度となく指摘してきたように、Hackage 公式のガイドラインと完全に矛盾しているにも関わらず、彼らはしつこく同じ趣旨の発言を続けています。&lt;/li&gt;
&lt;li&gt;PVP に反対する人の中には、基本的に (1) の理由で、Hackage にアップロードしたくない、という人もいます。PVP の遵守という観点で、たくさんの張りつめた議論がありました。これを避けるための最も簡単な方法は Hackage にアップロードしない、というものでした。私はこういった事情があって Hackage や Stackage にコードをリリースしない人たちを知っています。しぶしぶこうしている人もいますが、その全員が同じ理由で Hackage を避けたがっています。&lt;/li&gt;
&lt;li&gt;技術的に見て、中央リポジトリに手作業で tarball をアップロードするようなモデルは、時代遅れになってきていると感じる人もいます。そういった人たちは、タグやリリースブランチを使って自動化された、Git ベースのリリースに基づいたワークフローを考えています。これによる社会的な影響は何もなく、どちらかと言うと Hackage が現在サポートしていない、技術的に違うものを探してみたいという願望です。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol type="1"&gt;
&lt;li&gt;番目の状況は、私の大きな頭痛の種でした。私は Hackage Trustee のガイドラインと Hackage のルールを変更して、彼らの言動 (Hackage にアップロードしないように私的なメールで要求したり、個人や企業に対して PVP に従っていないことを公に批判したり) について明確に禁止するように要望を出していました。実際、私が思うに、この要望は究極的には SLURP に結びつくものです。私は変更しなければフォークするぞと脅したりしたでしょうか? あー、そう思いたいならそれでもいいでしょう。私は Hackage を使うのをやめようと言い続けてきました。完全にです。私はこのような Hackage の使い方が許可されるように、公式のポリシーに対して変更を求めました。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現状を見たらわかりますが、Hackage のポリシーにそんな変更はされませんでした。私は (2) と (3) のグループに対して何を思うのか、言及していませんでしたね。しかし (3) の主張からもわかるように、Hackage とは別の代替パッケージリポジトリをホストしたりするのは全くもって意味がありません。なので、私はまたここで保証します。最も文字通りの Hackage の fork は、私も私が話しかけているあなたも誰も望んでいないものになるでしょう。&lt;/p&gt;
&lt;p&gt;また他の選択肢は Stackage に Hackage に加え、Git リポジトリから直接パッケージをプルできるようにする、というものです。これは先に挙げた 問題 (1) に対するワークアラウンドとして議論されています。あることを主張して、一度離れてもう一度それを主張するようになる… なんてことはありません。私はむしろ、Hackage が全員からパッケージのアップロードを受け付けることを明確にすることを望んでいますし、それと比べれば Stackage を別のソースに対して解放するような要求は少なくなります (3 番目のグループは純粋に技術的な観点から実験したいと思っているようですが)。&lt;/p&gt;
&lt;p&gt;私は銃で誰かの頭を狙っているでしょうか? それはあなたが決めることです。これが私が知る限りの本当の物語です。&lt;/p&gt;
&lt;p&gt;まとめると、これは潜在的な fork に最も近いもので、Git リポジトリが Hackage の代替のソースとして許可されたらこうなります。&lt;/p&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;私は上記の問題を解決するための努力をするにあたって、複数の人と長く非公開な議論をしてきました。先ほども話したように、私はいつも公の場で行われる議論が好きです。SLURP の提案がどうなったかを鑑み、私はやはり公の議論はより良いという立場を取ろうと思います。“fork” という言葉を使って、とても多くの人を怖がらせてしまったことは申し訳なく思っています。本当に怖がっていた人に対して、私は鬼のようなことをしてしまっていたようです。説明に 2 日間待たせてしまい、申し訳ありませんでした。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-02-23-stack-build-failure.html</id><title type="text">stack でどうしてもビルドできないとき</title><updated>2018-02-23T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-02-23-stack-build-failure.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;僕は &lt;code&gt;stack&lt;/code&gt;, &lt;code&gt;hlint&lt;/code&gt;, &lt;code&gt;liquidhaskell&lt;/code&gt; などのパッケージを毎日なんとなくビルドしてインストールしているのですが、ある時 &lt;code&gt;stack&lt;/code&gt; のビルドで &lt;code&gt;GHC panic&lt;/code&gt; が発生し、ビルドができなくなってしまいました。&lt;/p&gt;
&lt;p&gt;数日放置していたのですが、直らず・・・。そればかりか別のPCでは問題なくビルドができているため &lt;code&gt;stack&lt;/code&gt; の問題だな！と意気揚々と &lt;a href="https://github.com/commercialhaskell/stack/issues/3876"&gt;issue&lt;/a&gt; を作ったのですが、結局は自分の環境の問題でした・・・。&lt;/p&gt;
&lt;p&gt;僕は英語が得意ではありませんが、こういった時に批判だけするのは良くないと思っているので、頑張って &lt;code&gt;issue&lt;/code&gt; や &lt;code&gt;PR&lt;/code&gt; を投げるようにしています。Google 翻訳とかもありますし、誰か助けてくれますよ、きっと。 (放置されたり却下されることもありますが、気にせずコツコツ続けると楽しいです)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="stack-のビルドがどうしてもできない時"&gt;Stack のビルドがどうしてもできない時&lt;/h2&gt;
&lt;p&gt;ちゃんと &lt;code&gt;stack clean --full&lt;/code&gt; を行った上でビルドコマンドを叩いたら、以下のような &lt;code&gt;ghc panic&lt;/code&gt; エラーになりました。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack build
...

ghc: panic! (the &amp;#39;impossible&amp;#39; happened)
      (GHC version 8.2.2 for x86_64-apple-darwin):
    	Loading temp shared object failed: dlopen(/var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib, 5): Symbol not found: _hackagezmsecurityzm0zi5zi2zi2zm9BfzzLHvNB6mEIMD9YTAK2zz_HackageziSecurityziUtilziChecked_zdwthrowChecked_closure
      Referenced from: /var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib
      Expected in: flat namespace
     in /var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib

    Please report this as a GHC bug:  http://www.haskell.org/ghc/reportabug&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ghc panic&lt;/code&gt; は、言語拡張とか最新の機能とかを触っていれば良く見るエラーですが、なぜこれが起きたのか全くわかりません・・・。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;issue&lt;/code&gt; のアドバイス通り &lt;code&gt;stack exec -- ghc-pkg unregister hackage-security&lt;/code&gt; も試してみたのですがダメでした。&lt;/p&gt;
&lt;p&gt;なので最終手段の &lt;code&gt;~/.stack&lt;/code&gt; を削除することになったんですが、今までどのフォルダを削除したら良いのかイマイチわかっていませんでした。&lt;/p&gt;
&lt;p&gt;しかし &lt;code&gt;stack&lt;/code&gt; の中の人は違います！ &lt;code&gt;precompiled&lt;/code&gt;, &lt;code&gt;snapshots&lt;/code&gt; を削除しなよ！と優しく教えてくれたので、指示通りこんな感じで削除したところ、無事にビルドが通るようになりました！&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack path --stack-root
~/.stack

$ rm -rf $(stack path --stack-root)/precompiled
$ rm -rf $(stack path --stack-root)/snapshots&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もう知ってるよ・・・。という話かもしれませんが、どうしてもビルドできない人は試してみてはいかがでしょうか。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html</id><title type="text">拡張可能タングルでDo記法レスプログラミング♪ (Haskell)</title><updated>2018-02-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;拡張可能タングルでDo記法レスプログラミング♪ (Haskell)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-02-22" itemprop="datePublished"&gt;
        Feb 22, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/extensible-package.html"&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;「&lt;a href="https://hackage.haskell.org/package/extensible"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; パッケージの楽しみ その３」です．&lt;/p&gt;
&lt;p&gt;拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; について，割とドキュメントには無い(？)ネタを書いておくシリーズ第三弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．&lt;/p&gt;
&lt;p&gt;また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="/posts/2017-11-28-fun-of-extensible-1.html"&gt;前々回&lt;/a&gt;は拡張可能レコードの拡縮の話を，&lt;a href="/posts/2018-01-31-fun-of-extensible-2.html"&gt;前回&lt;/a&gt;は拡張可能直和型(バリアント)を引数に取る関数の話を書きました．&lt;/p&gt;
&lt;p&gt;今回は &lt;strong&gt;拡張可能タングル&lt;/strong&gt; で遊んでみます． 今回の Haskell コードは基本的に&lt;a href="https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96"&gt;コレ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="拡張可能タングル"&gt;拡張可能タングル&lt;/h2&gt;
&lt;p&gt;作者さんの拡張可能タングルについての記事があり，非常に分かりやすいです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"&gt;波打たせるものの正体(エクステンシブル・タングル) - モナドとわたしとコモナド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拡張可能タングルを用いれば，文脈付き(&lt;code&gt;IO&lt;/code&gt; などの &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス)で拡張可能レコードを生成し，更にフィールド間で依存関係を持つ際に，型クラスを用いて各フィールドごとに振る舞いを記述できるようになる． まぁこのヒトコトでは伝わらないですよね．&lt;/p&gt;
&lt;p&gt;百聞は一見に如かず．例えば&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Rec&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;    &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;     , &lt;span class="st"&gt;&amp;quot;hoge2&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;     , &lt;span class="st"&gt;&amp;quot;hoge3&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;&lt;span class="ot"&gt;makeRec ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Rec&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;makeRec &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;  hoge1 &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;  hoge3 &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; randomRIO (&lt;span class="dv"&gt;0&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="fu"&gt;*&lt;/span&gt; length hoge1)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;  pure&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;     &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge1 &lt;span class="fu"&gt;@=&lt;/span&gt; hoge1&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;    &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge2 &lt;span class="fu"&gt;@=&lt;/span&gt; (length hoge1 &lt;span class="fu"&gt;&amp;lt;=&lt;/span&gt; hoge3)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;    &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge3 &lt;span class="fu"&gt;@=&lt;/span&gt; hoge3&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;    &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というような関数があったとする． これを拡張可能タングルを使って書き直すと次のようになります．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="ot"&gt;makeRec ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Rec&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;makeRec &lt;span class="fu"&gt;=&lt;/span&gt; runTangles tangles (wrench emptyRecord)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;&lt;span class="ot"&gt;tangles ::&lt;/span&gt; &lt;span class="dt"&gt;Comp&lt;/span&gt; (&lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt;) &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="fu"&gt;:*&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;tangles &lt;span class="fu"&gt;=&lt;/span&gt; htabulateFor (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt;) &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;  \m &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Comp&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt; pure &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; make m&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt; kv &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;&lt;span class="ot"&gt;  make ::&lt;/span&gt; proxy kv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" data-line-number="13"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;hoge1&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" data-line-number="14"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; lift getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" data-line-number="16"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;hoge2&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" data-line-number="17"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; (&lt;span class="fu"&gt;&amp;lt;=&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (length &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;hoge1) &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;hoge3&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-18" data-line-number="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-19" data-line-number="19"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;hoge3&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-20" data-line-number="20"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-21" data-line-number="21"&gt;    ml &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; length &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;hoge1&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-22" data-line-number="22"&gt;    lift &lt;span class="fu"&gt;$&lt;/span&gt; randomRIO (&lt;span class="dv"&gt;0&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="fu"&gt;*&lt;/span&gt; ml)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コード量そのものは倍近くなっている． しかし，フィールドの構築方法ごとにインスタンスメソッドとして切り分けることが出来ている． しかも，&lt;strong&gt;摩訶不思議な &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Tangle.html#v:lasso"&gt;&lt;code&gt;lasso&lt;/code&gt;&lt;/a&gt; 関数により依存関係も勝手に解決してくれる&lt;/strong&gt; ． もちろん，フィールドのインスタンスが足りないときは，足りないというコンパイルエラーになるよ．&lt;/p&gt;
&lt;h2 id="do記法レスプログラミング"&gt;Do記法レスプログラミング&lt;/h2&gt;
&lt;p&gt;Haskell はなんらかの作用付きの振る舞いは次のように &lt;code&gt;Monad&lt;/code&gt; と &lt;code&gt;do&lt;/code&gt; 記法を用いて書くのが一般的だ． しかし，便利な Do 記法に甘えて無駄に長い，数十行もある Do 式を書いたことは無いだろうか？ たしかに(関数合成だけで記述するより)読みやすいが，なんかこう…ちがうじゃないですか！？&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;そこで，先述した拡張可能タングルを用いて長いDo式をフィールドごとに切り分けてみよう． 例題として次のようなログ(っぽいなにか)を読み込む関数を考える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Log&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="dt"&gt;LogFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;LogFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;    &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;path&amp;quot;    &amp;gt;: FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;     , &lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Time&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;     , &lt;span class="st"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;     , &lt;span class="st"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Time&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;LogCsv&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="dt"&gt;CsvFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;CsvFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;    &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;time&amp;quot;    &amp;gt;: Time&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;     , &lt;span class="st"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" data-line-number="16"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" data-line-number="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" data-line-number="18"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" data-line-number="19"&gt;    &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;code&amp;quot;    &amp;gt;: Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-20" data-line-number="20"&gt;     , &lt;span class="st"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-21" data-line-number="21"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-22" data-line-number="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-23" data-line-number="23"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Eff&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-24" data-line-number="24"&gt;    &lt;span class="ch"&gt;&amp;#39;[ EitherDef String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-25" data-line-number="25"&gt;     , &lt;span class="st"&gt;&amp;quot;IO&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-26" data-line-number="26"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-27" data-line-number="27"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-28" data-line-number="28"&gt;&lt;span class="ot"&gt;runEIO ::&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;Either&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; a)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-29" data-line-number="29"&gt;runEIO &lt;span class="fu"&gt;=&lt;/span&gt; retractEff &lt;span class="fu"&gt;.&lt;/span&gt; runEitherDef&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-30" data-line-number="30"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-31" data-line-number="31"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-32" data-line-number="32"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-33" data-line-number="33"&gt;  result &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; runEIO &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-34" data-line-number="34"&gt;    (path&lt;span class="fu"&gt;:&lt;/span&gt;_) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; liftIO getArgs&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-35" data-line-number="35"&gt;    file &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;  liftIO (LB.readFile path)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-36" data-line-number="36"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-37" data-line-number="37"&gt;      csv &lt;span class="fu"&gt;=&lt;/span&gt; mconcat [header, &lt;span class="st"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;, file]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-38" data-line-number="38"&gt;    (_, logs) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; either throwError pure (decodeByName csv)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; (&lt;span class="dt"&gt;Header&lt;/span&gt;, &lt;span class="dt"&gt;LogCsv&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-39" data-line-number="39"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-40" data-line-number="40"&gt;      log&amp;#39; &lt;span class="fu"&gt;=&lt;/span&gt; V.head logs&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-41" data-line-number="41"&gt;    info &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; either throwError pure (eitherDecode &lt;span class="fu"&gt;$&lt;/span&gt; log&amp;#39; &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;info)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-42" data-line-number="42"&gt;    pure &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-43" data-line-number="43"&gt;      &lt;span class="fu"&gt;#&lt;/span&gt;path &lt;span class="fu"&gt;@=&lt;/span&gt; path &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;time &lt;span class="fu"&gt;@=&lt;/span&gt; (log&amp;#39; &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;time) &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; info&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-44" data-line-number="44"&gt;  either error print result&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-45" data-line-number="45"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-46" data-line-number="46"&gt;&lt;span class="ot"&gt;header ::&lt;/span&gt; &lt;span class="dt"&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-47" data-line-number="47"&gt;header &lt;span class="fu"&gt;=&lt;/span&gt; LB.intercalate &lt;span class="st"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt; fmap fromString &lt;span class="fu"&gt;$&lt;/span&gt; henumerateFor&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-48" data-line-number="48"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;Show&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-49" data-line-number="49"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;CsvFields&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-50" data-line-number="50"&gt;  ((&lt;span class="fu"&gt;:&lt;/span&gt;) &lt;span class="fu"&gt;.&lt;/span&gt; symbolVal &lt;span class="fu"&gt;.&lt;/span&gt; proxyAssocKey)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-51" data-line-number="51"&gt;  []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このメイン関数は次のような CSV をログデータとして読み込んで，2行目の JSON もパースしたうえで，ひとつの拡張可能レコードとして吐き出す．&lt;/p&gt;
&lt;pre class="csv"&gt;&lt;code&gt;2018-02-23T03:10:00,&amp;quot;{&amp;quot;&amp;quot;code&amp;quot;&amp;quot;:123,&amp;quot;&amp;quot;message&amp;quot;&amp;quot;:&amp;quot;&amp;quot;hello&amp;quot;&amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正直，この例だと大した長さではないので切り分けるメリットはなーーんにもないんですけど．&lt;/p&gt;
&lt;h3 id="stack-script-とカスタムスナップショット"&gt;&lt;code&gt;stack script&lt;/code&gt; とカスタムスナップショット&lt;/h3&gt;
&lt;p&gt;その前に，このメイン関数をどうやって実行するか． この程度のモノをいちいち stack プロジェクトにしていてはスペースの無駄なので，&lt;code&gt;stack script&lt;/code&gt; を使う．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack script&lt;/code&gt; コマンド知っていますか？ &lt;code&gt;stack runghc&lt;/code&gt; と基本的には一緒なのだが，違いは2点(たぶん)．&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;resolver の指定が必須 (たしか &lt;code&gt;runghc&lt;/code&gt; は指定しなければプロジェクトのを使うはず)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;パッケージを引数で指定する必要が無い&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(2)がすごいよね． &lt;code&gt;runghc&lt;/code&gt; の場合，使ってるパッケージを &lt;code&gt;--package hoge&lt;/code&gt; と一つずつ指定しなければならない(今回は&lt;a href="https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96#file-fun-of-tangle-hs-L13"&gt;使ってるパッケージが多い&lt;/a&gt;ので尚更大変)が，&lt;code&gt;script&lt;/code&gt; なら指定した resolver から自動で解決してくれる．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;ただ問題がひとつ． 今回は &lt;a href="https://hackage.haskell.org/package/aeson"&gt;&lt;code&gt;aeson&lt;/code&gt;&lt;/a&gt; や &lt;a href="https://hackage.haskell.org/package/cassava"&gt;&lt;code&gt;cassava&lt;/code&gt;&lt;/a&gt; の型クラスのインスタンスを拡張可能レコードで使いたいので，Stackage に登録していない &lt;a href="https://github.com/matsubara0507/extensible-instances"&gt;&lt;code&gt;matsubara0507/extensible-instances&lt;/code&gt;&lt;/a&gt; にも依存したい． そこで，カスタムスナップショットだ． 日本語で詳しくは下記のサイトにまとまっていた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.e-bigmoon.com/posts/2017-12-23-stack161.html"&gt;カスタムスナップショットの紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここには書いてないが，カスタムスナップショットは &lt;code&gt;stack script&lt;/code&gt; にも使える． 例えば今回は次のようなカスタムスナップショットを作った．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="fu"&gt;resolver:&lt;/span&gt;&lt;span class="at"&gt; lts-10.6&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="fu"&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;git:&lt;/span&gt;&lt;span class="at"&gt; https://github.com/matsubara0507/extensible-instances.git&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;commit:&lt;/span&gt;&lt;span class="at"&gt; 8dabe7a3dd9cf162e2d81e4ca16dbe73b98a3809&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;snapshot.yaml&lt;/code&gt; とし，例題のコードを &lt;code&gt;fun-of-tangle.hs&lt;/code&gt; とすると次のように実行できる&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;$ &lt;span class="fu"&gt;cat&lt;/span&gt; sampleLog.csv&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="ex"&gt;2018-02-23T03&lt;/span&gt;:10:00,&lt;span class="st"&gt;&amp;quot;{&amp;quot;&amp;quot;code&amp;quot;&amp;quot;:123,&amp;quot;&amp;quot;message&amp;quot;&amp;quot;:&amp;quot;&amp;quot;hello&amp;quot;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; script --resolver ./snapshot.yaml -- fun-of-tangle.hs sampleLog.csv&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;&lt;span class="ex"&gt;Using&lt;/span&gt; resolver: custom: ./snapshot.yaml specified on command line&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;&lt;span class="ex"&gt;path&lt;/span&gt; @= &lt;span class="st"&gt;&amp;quot;sampleLog.csv&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;: time @= &lt;span class="st"&gt;&amp;quot;2018-02-23T03:10:00&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;: code @= 123 &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;: message @= &lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;: nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ヘッダの生成"&gt;ヘッダの生成&lt;/h3&gt;
&lt;p&gt;CSV の読み込みには &lt;code&gt;cassava&lt;/code&gt; というパッケージを使っている． このパッケージには &lt;code&gt;FromRecord&lt;/code&gt; と &lt;code&gt;FromNamedRecord&lt;/code&gt; 型クラスがある． 前者は前から順に勝手に取っていくのに対し，後者はフィールド名と CSV の列名を対応させて取ってきてくれる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cassava&lt;/code&gt; 系の拡張可能レコードのインスタンスを書いてるときは &lt;code&gt;extensible&lt;/code&gt; 力がまだ低く，フィールドからインデックスをとっていくる方法が分からなかった． そのため &lt;code&gt;FromRecord&lt;/code&gt; 型クラスのインスタンスが &lt;code&gt;extensible-instances&lt;/code&gt; にはない(何故かついこの前，&lt;a href="https://github.com/fumieval/extensible/commit/074210e76ed5bd35f62d452f66c940a40d821534"&gt;本家へコミット&lt;/a&gt;されたけど)．&lt;/p&gt;
&lt;p&gt;なので，型から列名のヘッダーを生成してしまおう，というのが &lt;code&gt;header&lt;/code&gt; 関数．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="ot"&gt;header ::&lt;/span&gt; &lt;span class="dt"&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;header &lt;span class="fu"&gt;=&lt;/span&gt; LB.intercalate &lt;span class="st"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt; fmap fromString &lt;span class="fu"&gt;$&lt;/span&gt; henumerateFor&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;Show&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;CsvFields&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;  ((&lt;span class="fu"&gt;:&lt;/span&gt;) &lt;span class="fu"&gt;.&lt;/span&gt; symbolVal &lt;span class="fu"&gt;.&lt;/span&gt; proxyAssocKey)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;  []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Proxy (KeyValue KnownSymbol Show)&lt;/code&gt; ってのが悲しいですよね…(&lt;code&gt;Show&lt;/code&gt; は全く無意味)． キー側だけ型クラスを指定する方法は無いような気がしたんだよなぁ．&lt;/p&gt;
&lt;h2 id="分割しましょう"&gt;分割しましょう&lt;/h2&gt;
&lt;p&gt;では本題．&lt;/p&gt;
&lt;p&gt;まずは型クラスを考えよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; kv &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  make ::&lt;/span&gt; proxy kv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;LogFields&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; (&lt;span class="dt"&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに，&lt;code&gt;&amp;quot;path&amp;quot; &amp;gt;: FilePath&lt;/code&gt; のインスタンスを書いてみる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;path&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; FilePath) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; lift &lt;span class="fu"&gt;$&lt;/span&gt; liftIO getArgs &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;    (path &lt;span class="fu"&gt;:&lt;/span&gt; _) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; pure path&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;    _          &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; throwError &lt;span class="st"&gt;&amp;quot;please path.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他のはできるだろうか？ 元のメイン関数を見ればわかると思うが，たぶん無理だと思う． 他のフィールドは &lt;code&gt;log'&lt;/code&gt; 変数に保存した中間状態を共有するからだ．&lt;/p&gt;
&lt;h3 id="中間状態をどうするか"&gt;中間状態をどうするか&lt;/h3&gt;
&lt;p&gt;他にもっといい手はあるかもしれないが，今回は &lt;strong&gt;レコードを中間状態も加えて拡張する&lt;/strong&gt; ことにする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;MidFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[&amp;quot;log&amp;quot; &amp;gt;: LogCsv &amp;#39;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;info&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;] &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="dt"&gt;LogFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; kv &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="ot"&gt;  make ::&lt;/span&gt; proxy kv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;MidFields&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; (&lt;span class="dt"&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Product.html#t:-43--43-"&gt;&lt;code&gt;(++)&lt;/code&gt;&lt;/a&gt; は型レベルリストの連結演算子だ． &lt;code&gt;'[&amp;quot;log&amp;quot; &amp;gt;: LogCsv ': &amp;quot;info&amp;quot; &amp;gt;: Info]&lt;/code&gt; が追加する中間状態にあたる． これを最後にどうやって外すかと言うと，実は簡単で &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:shrink"&gt;&lt;code&gt;shrink&lt;/code&gt;&lt;/a&gt; 関数で縮小してやればよい．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="ot"&gt;makeLog ::&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; &lt;span class="dt"&gt;Log&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;makeLog &lt;span class="fu"&gt;=&lt;/span&gt; shrink &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; runTangles tangles (wrench emptyRecord)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;&lt;span class="ot"&gt;tangles ::&lt;/span&gt; &lt;span class="dt"&gt;Comp&lt;/span&gt; (&lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;MidFields&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt;) &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="fu"&gt;:*&lt;/span&gt; &lt;span class="dt"&gt;MidFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;tangles &lt;span class="fu"&gt;=&lt;/span&gt; htabulateFor (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt;) &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;  \m &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Comp&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt; pure &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; make m&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;中間状態のインスタンス定義してしまう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;log&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;LogCsv&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;    file &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class="fu"&gt;.&lt;/span&gt; liftIO &lt;span class="fu"&gt;.&lt;/span&gt; LB.readFile &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;path&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;    (_, log&amp;#39;) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;      either throwError pure (decodeByName &lt;span class="fu"&gt;$&lt;/span&gt; mconcat [header, &lt;span class="st"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;, file])&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;    pure &lt;span class="fu"&gt;$&lt;/span&gt; V.head log&amp;#39;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;info&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" data-line-number="9"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" data-line-number="10"&gt;    log&amp;#39; &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;log&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" data-line-number="11"&gt;    lift &lt;span class="fu"&gt;$&lt;/span&gt; either throwError pure (eitherDecode &lt;span class="fu"&gt;$&lt;/span&gt; log&amp;#39; &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;info)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;うん…まぁ…読みやすさのためにね，多少は &lt;code&gt;do&lt;/code&gt; を残しましたよ(タイトル詐欺)．&lt;/p&gt;
&lt;h3 id="残りは簡単"&gt;残りは簡単&lt;/h3&gt;
&lt;p&gt;あとは，フィールドを取り出すだけなので簡単．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Time&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; view &lt;span class="fu"&gt;#&lt;/span&gt;time &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;log&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; view &lt;span class="fu"&gt;#&lt;/span&gt;code &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;info&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-8" data-line-number="8"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; view &lt;span class="fu"&gt;#&lt;/span&gt;message &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;info&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;メイン関数はこんな感じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; either error print &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; runEIO makeLog&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;わぁすっきり(メイン関数は)．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;これぐらいの規模だとメリットが皆無なんですが，もっと CSV の列数が多くなったらどうでしょう？ うーーーん，あんまり変わらないかも(笑) まぁ，少なくとも面白い(不思議な)プログラミングが出来るのは確かです．&lt;/p&gt;
&lt;p&gt;僕は試しにこの方法で，&lt;a href="https://github.com/matsubara0507/source-gh-pages/blob/tangle/app/Rules.hs"&gt;このサイトの Hakyll コード&lt;/a&gt;を切り刻んでみました．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-02-21-stack165.html</id><title type="text">stack 1.6.5 がリリースされました。</title><updated>2018-02-21T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-02-21-stack165.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;先日 Stack version 1.6.5 が&lt;a href="https://github.com/commercialhaskell/stack/blob/master/ChangeLog.md#v165"&gt;リリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;バグフィックスのみです。&lt;/p&gt;
&lt;p&gt;いくつか前回の &lt;a href="https://haskell.e-bigmoon.com/posts/2017-12-24-stack163.html"&gt;1.6.3&lt;/a&gt; に含まれていた内容が 1.6.5 に移動してますね。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="更新方法"&gt;更新方法&lt;/h2&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack upgrade

$ stack --version
Version 1.6.5, Git revision 24ab0d6ff07f28276e082c3ce74dfdeb1a2ca9e9 (5514 commits) x86_64 hpack-0.20.0&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="バグフィックス"&gt;バグフィックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows でプリコンパイルされたキャッシュファイルのパス名が長過ぎる場合にビルドが失敗する問題を修正しました (&lt;a href="https://github.com/commercialhaskell/stack/issues/3649"&gt;#3649&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;僕は Windows ユーザではないので、どのぐらいこのバグが深刻なのかわかりません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; の内部的には &lt;a href="https://github.com/commercialhaskell/stack/blob/v1.6.5/src/Stack/Build/Cache.hs#L372"&gt;pathTooLong&lt;/a&gt; が新しく定義され、以前まではただの &lt;code&gt;length&lt;/code&gt; で比較していたところを &lt;code&gt;utf16StringLength&lt;/code&gt; の比較に修正したようです。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;スクリプトインタプリタ形式で暗黙的に渡されるファイル引数を他の引数より先に処理するようにしました (&lt;a href="https://github.com/commercialhaskell/stack/issues/3658"&gt;#3658&lt;/a&gt;)。この修正により、スクリプト実行時に &lt;code&gt;-- +RTS ... -RTS&lt;/code&gt; を渡せるようになりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下のような &lt;code&gt;RTS&lt;/code&gt; オプションの指定が適切に処理できるようになりました。&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="ot"&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="co"&gt;{- stack&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;span class="co"&gt;  script&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;span class="co"&gt;  --resolver lts-6.25&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;span class="co"&gt;  --package turtle&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;&lt;span class="co"&gt;  --&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;&lt;span class="co"&gt;  +RTS -s -RTS&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;&lt;span class="co"&gt;-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; putStrLn &lt;span class="st"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;stack 設定ファイルで &lt;code&gt;year&lt;/code&gt; パラメータが設定できるようになりました。それに伴い、ドキュメントもわかりやすくしました。 (&lt;a href="https://github.com/commercialhaskell/stack/issues/2275"&gt;#2275&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じで指定できるようです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="fu"&gt;templates:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;params:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;    &lt;span class="fu"&gt;author-email:&lt;/span&gt;&lt;span class="at"&gt; 415fox@gmail.com&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;    &lt;span class="fu"&gt;author-name:&lt;/span&gt;&lt;span class="at"&gt; michael fox&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;    &lt;span class="fu"&gt;category:&lt;/span&gt;&lt;span class="at"&gt; Application&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;    &lt;span class="fu"&gt;copyright:&lt;/span&gt;&lt;span class="at"&gt; copytright michael fox 2016&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;    &lt;span class="fu"&gt;github-username:&lt;/span&gt;&lt;span class="at"&gt; gitfoxi&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;    &lt;span class="fu"&gt;year:&lt;/span&gt;&lt;span class="at"&gt; 2016&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ドキュメントを見る限り &lt;code&gt;copyright&lt;/code&gt; を省略した場合は &lt;code&gt;author-name&lt;/code&gt; と &lt;code&gt;year&lt;/code&gt; を使って &lt;code&gt;copyright&lt;/code&gt; が生成されるようです。&lt;/p&gt;
&lt;p&gt;また &lt;code&gt;year&lt;/code&gt; を省略した場合は現在の年が設定されるとのことなので、設定しなくても良さそうですね。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;ベンチーマークが別のベンチマークやビルドステップと並行して実行されてしまう問題を修正しました。これは別のプロセスのCPU利用がベンチマークに悪影響を及ぼすと思われるので理想的ではありません。また、デフォルトでベンチマークの出力が表示されないようになっていた件も同様に修正しました (&lt;a href="https://github.com/commercialhaskell/stack/issues/3663"&gt;#3663&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/commercialhaskell/stack/pull/3666"&gt;Never run benchmarks concurrently, always output to console #3663 #3666&lt;/a&gt;が修正のPRです。&lt;/p&gt;
&lt;p&gt;良くわかりませんが &lt;code&gt;Actiontype&lt;/code&gt; 型に &lt;code&gt;ConcurrencyDisallowed&lt;/code&gt; というデータコンストラクタを追加し &lt;code&gt;bench&lt;/code&gt; が呼ばれた際はこの値を &lt;code&gt;Action&lt;/code&gt; 型の &lt;code&gt;actionConcurrency&lt;/code&gt; フィールドに設定することで処理を切り替えるようにしているっぽいです。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;パッケージのコンポーネントごとに別々のビルドキャッシュを持つことによって、未変更のファイルについて不要なリビルドを回避するようになりました (&lt;a href="https://github.com/commercialhaskell/stack/issues/3732"&gt;#3732&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;issue&lt;/code&gt; にあがっている具体例だと &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;bar&lt;/code&gt; の2つのパッケージを作り、&lt;code&gt;bar&lt;/code&gt; は &lt;code&gt;foo&lt;/code&gt; に依存しているという関係です。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack test --no-run-tests
$ stack test --no-run-tests bar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この時、1回目でテストが終わってるので2回目で &lt;code&gt;bar&lt;/code&gt; を指定した時に何も起こらないはずです。&lt;/p&gt;
&lt;p&gt;しかし、実際にはこうなります。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack test --no-run-tests bar
bar-0.1.0.0: unregistering (missing dependencies: foo)
foo-0.1.0.0: unregistering (local file changes: app/Main.hs test/Spec.hs)
foo-0.1.0.0: build (lib + exe)
foo-0.1.0.0: copy/register
bar-0.1.0.0: configure (lib + exe + test)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/commercialhaskell/stack/pull/3750"&gt;Use a separate build cache for each component of a package #3750&lt;/a&gt;で修正されています。&lt;/p&gt;
&lt;p&gt;実装を見る感じ、コンポーネントというのは &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;exe&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;bench&lt;/code&gt; のことで、それぞれを接頭辞にしたビルドキャッシュを持つようになったみたい？です。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;スナップショットからローカルパッケージにパッケージを反映させる処理の動作を修正しました。これはスナップショットのバージョン境界が衝突する時に発生する問題なので、古いパッケージの Hackage リビジョンによって引き起こされます。同様にカスタムスナップショットでも、問題の起きないパッケージの衝突するバージョンが定義できるようになりました。(&lt;a href="https://github.com/fpco/stackage/issues/3185"&gt;Stackage issue #3185&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/commercialhaskell/stack/pull/3758/"&gt;Fix package promotion to snapshot #3758&lt;/a&gt; で修正されました。コードの差分は以下の1行です。&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="ot"&gt;# 変更前&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; version &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; version &lt;span class="ot"&gt;`withinIntervals`&lt;/span&gt; intervals&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;&lt;span class="ot"&gt;# 変更後&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; _version &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにローカルパッケージ反映時？にバージョンチェックを行わないようになりました。&lt;/p&gt;
&lt;p&gt;以下のようにカスタムスナップショットに追加する場合はビルドできます。(&lt;code&gt;async-2.1.1.1&lt;/code&gt; には &lt;code&gt;stm &amp;gt;= 2.2 &amp;amp;&amp;amp; &amp;lt; 2.5&lt;/code&gt; の依存関係が設定されています。&lt;a href="https://hackage.haskell.org/package/async-2.1.1.1/src/async.cabal"&gt;async.cabal&lt;/a&gt;)&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="co"&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="fu"&gt;resolver:&lt;/span&gt;&lt;span class="at"&gt; snapshot.yaml&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;# snapshot.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="fu"&gt;resolver:&lt;/span&gt;&lt;span class="at"&gt; ghc-8.0.2&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; hackage-revisions-are-annoying&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;&lt;span class="fu"&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; async-2.1.1.1&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; stm-2.1.2.2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack build --stack-yaml as-snapshot.yaml
WARNING: Ignoring out of range dependency (trusting snapshot over Hackage revisions): stm-2.1.2.2. async requires: &amp;gt;=2.2 &amp;amp;&amp;amp; &amp;lt;2.5

...

Process exited with code: ExitFailure 1
    Logs have been written to: /home/bm12/Desktop/testProj/test/.stack-work/logs/async-2.1.1.1.log

    Configuring async-2.1.1.1...
    Cabal-simple_mPHDZzAJ_1.24.2.0_ghc-8.0.2: Encountered missing dependencies:
    stm &amp;gt;=2.2 &amp;amp;&amp;amp; &amp;lt;2.5 &amp;amp;&amp;amp; ==2.1.2.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、以下のように &lt;code&gt;extra-deps&lt;/code&gt; に追加する場合はビルドが実行される前にバージョンエラーになります。&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="co"&gt;# stack.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;span class="fu"&gt;resolver:&lt;/span&gt;&lt;span class="at"&gt; ghc-8.0.2&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;span class="fu"&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; async-2.1.1.1&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; stm-2.1.2.2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack build --stack-yaml as-extra-dep.yaml

Error: While constructing the build plan, the following exceptions were encountered:

In the dependencies for async-2.1.1.1:
    stm-2.1.2.2 from stack configuration does not match &amp;gt;=2.2 &amp;amp;&amp;amp; &amp;lt;2.5  (latest matching version is 2.4.5.0)
needed due to test-0.1.0.0 -&amp;gt; async-2.1.1.1

Some different approaches to resolving this:

  * Set &amp;#39;allow-newer: true&amp;#39; to ignore all version constraints and build anyway.

  * Consider trying &amp;#39;stack solver&amp;#39;, which uses the cabal-install solver to attempt to find some working build configuration. This can be convenient when
    dealing with many complicated constraint errors, but results may be unpredictable.

  * Recommended action: try adding the following to your extra-deps in /home/bm12/Desktop/testProj/test/as-extra-dep.yaml:

- stm-2.4.5.0

Plan construction failed.&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; で複数のパッケージで定義されている同名のモジュールを読み込めるようになりました (&lt;a href="https://github.com/commercialhaskell/stack/pull/3776"&gt;#3776&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あんまりわかってないですが、&lt;code&gt;issue&lt;/code&gt; の内容は &lt;code&gt;stack&lt;/code&gt; と &lt;code&gt;rio&lt;/code&gt; の両方のパッケージで同名のモジュールがある場合でも、ちゃんと読み込めるようになったみたいです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Path.Extra (in stack, rio)
RIO (in stack, rio)
RIO.Logger (in stack, rio)
RIO.Prelude (in stack, rio)
RIO.Process (in stack, rio)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/commercialhaskell/stack/pull/3779"&gt;With ghci, allow multiple packages to use the same module #3776 #3779&lt;/a&gt; で修正されました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ghciPkgModules&lt;/code&gt; の型を &lt;code&gt;Set ModuleName&lt;/code&gt; から &lt;code&gt;ModuleMap&lt;/code&gt; に変更しています。&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;ModuleMap&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;ModuleName&lt;/span&gt; (&lt;span class="dt"&gt;Map&lt;/span&gt; (&lt;span class="dt"&gt;Path&lt;/span&gt; &lt;span class="dt"&gt;Abs&lt;/span&gt; &lt;span class="dt"&gt;File&lt;/span&gt;) (&lt;span class="dt"&gt;Set&lt;/span&gt; (&lt;span class="dt"&gt;PackageName&lt;/span&gt;, &lt;span class="dt"&gt;NamedComponent&lt;/span&gt;)))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;モジュール名&lt;/code&gt; → &lt;code&gt;ファイルの絶対パス&lt;/code&gt; の順番で探して、その中を &lt;code&gt;Set (PackageName, NamedComponent)&lt;/code&gt; で持つようになっています。今まではモジュール名の &lt;code&gt;Set&lt;/code&gt; だったので確かに複数のパッケージでも上手く処理できそうな感じがします。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; で &lt;code&gt;base&lt;/code&gt; の依存関係を追加する必要が無くなりました。これはローカルターゲットが存在しない場合に自動的に追加されるためです。これにより、&lt;code&gt;base&lt;/code&gt; を置き換えているコードも同様に読み込めるようになります (&lt;a href="https://github.com/commercialhaskell/stack/issues/3589"&gt;#3589&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修正の&lt;a href="https://github.com/commercialhaskell/stack/commit/196bdbae986ddf887f92999b26129085a8ed0be5"&gt;コミット&lt;/a&gt;を見ると &lt;code&gt;&amp;quot;-package&amp;quot; : &amp;quot;base&amp;quot;&lt;/code&gt; が明示的に追加されています。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--no-rerun-tests&lt;/code&gt; が修正されました。今まではテストを実行した後に結果の記録を忘れていました。そのため、前回テストにパスしていたとしても、常に全てのテストが実行されていました (&lt;a href="https://github.com/commercialhaskell/stack/pull/3770"&gt;#3770&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hackage-security&lt;/code&gt; のパッチを当てたバージョンを含めるようにしました。このパッチには機械故障や &lt;code&gt;SIGKILL&lt;/code&gt; に対して更新処理が正しく復帰できるように、非同期例外処理に関する問題とディレクトリロックからファイルロックへの変更の2つが含まれます (&lt;a href="https://github.com/haskell/hackage-security/issues/187"&gt;hackage-security #187&lt;/a&gt;, &lt;a href="https://github.com/commercialhaskell/stack/issues/3073"&gt;#3073&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この問題よくわかってないのですが、&lt;code&gt;stack&lt;/code&gt; のコミットは &lt;code&gt;extra-deps&lt;/code&gt; にパッチの当たっている &lt;code&gt;hackage-security&lt;/code&gt; を追加しただけです。(&lt;a href="https://github.com/commercialhaskell/stack/commit/4bf68f02d901a6ffc7f4b81a22985d98435fbb14"&gt;コミット&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;実際のパッチは以下の2つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/haskell/hackage-security/pull/202"&gt;Detect asynchronous exceptions via their types #187 #202&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/haskell/hackage-security/pull/203"&gt;Use file instead of dir locking #187 #203&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bug-fix-オリジナル"&gt;Bug fix (オリジナル)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.6.1 introduced a change that made some precompiled cache files use longer paths, sometimes causing builds to fail on windows. This has been fixed. See &lt;a href="https://github.com/commercialhaskell/stack/issues/3649"&gt;#3649&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The script interpreter’s implicit file arguments are now passed before other arguments. See &lt;a href="https://github.com/commercialhaskell/stack/issues/3658"&gt;#3658&lt;/a&gt;. In particular, this makes it possible to pass &lt;code&gt;-- +RTS ... -RTS&lt;/code&gt; to specify RTS arguments used when running the script.&lt;/li&gt;
&lt;li&gt;Don’t ignore the template &lt;code&gt;year&lt;/code&gt; parameter in config files, and clarify the surrounding documentation. See &lt;a href="https://github.com/commercialhaskell/stack/issues/2275"&gt;#2275&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Benchmarks used to be run concurrently with other benchmarks and build steps. This is non-ideal because CPU usage of other processes may interfere with benchmarks. It also prevented benchmark output from being displayed by default. This is now fixed. See &lt;a href="https://github.com/commercialhaskell/stack/issues/3663"&gt;#3663&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some unnecessary rebuilds when no files were changed are now avoided, by having a separate build cache for each component of a package. See &lt;a href="https://github.com/commercialhaskell/stack/issues/3732"&gt;#3732&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Correct the behavior of promoting a package from snapshot to local package. This would get triggered when version bounds conflicted in a snapshot, which could be triggered via Hackage revisions for old packages. This also should allow custom snapshots to define conflicting versions of packages without issue. See &lt;a href="https://github.com/fpco/stackage/issues/3185"&gt;Stackage issue #3185&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When promoting packages from snapshot to local, we were occassionally discarding the actual package location content and instead defaulting to pulling the package from the index. We now correctly retain this information. Note that if you were affected by this bug, you will likely need to delete the binary build cache associated with the relevant custom snapshot. See &lt;a href="https://github.com/commercialhaskell/stack/issues/3714"&gt;#3714&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; now allows loading multiple packages with the same module name, as long as they have the same filepath. See &lt;a href="https://github.com/commercialhaskell/stack/pull/3776"&gt;#3776&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; no longer always adds a dependency on &lt;code&gt;base&lt;/code&gt;. It is now only added when there are no local targets. This allows it to be to load code that uses replacements for &lt;code&gt;base&lt;/code&gt;. See &lt;a href="https://github.com/commercialhaskell/stack/issues/3589#issuecomment"&gt;#3589&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-rerun-tests&lt;/code&gt; has been fixed. Previously, after running a test we were forgetting to record the result, which meant that all tests always ran even if they had already passed before. See &lt;a href="https://github.com/commercialhaskell/stack/pull/3770"&gt;#3770&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Includes a patched version of &lt;code&gt;hackage-security&lt;/code&gt; which fixes both some issues around asynchronous exception handling, and moves from directory locking to file locking, making the update mechanism resilient against SIGKILL and machine failure. See &lt;a href="https://github.com/haskell/hackage-security/issues/187"&gt;hackage-security #187&lt;/a&gt; and &lt;a href="https://github.com/commercialhaskell/stack/issues/3073"&gt;#3073&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack ghci&lt;/code&gt; 周りのバグフィックスもいくつかあったので &lt;code&gt;ghci&lt;/code&gt; を多用する人にとっては嬉しいですね。&lt;/li&gt;
&lt;li&gt;古い &lt;code&gt;LTS&lt;/code&gt; を使っているプロジェクトでビルドができなくて困っている人は &lt;code&gt;1.6.5&lt;/code&gt; にアップデートすると直るかもしれません。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-21-add-feats-mysite-2018.html</id><title type="text">このサイトに機能を追加 2018</title><updated>2018-02-21T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-21-add-feats-mysite-2018.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;このサイトに機能を追加 2018&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-02-21" itemprop="datePublished"&gt;
        Feb 21, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/site.html"&gt;site&lt;/a&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;このサイトは Haskell の静的サイトジェネレーター &lt;a href="https://jaspervdj.be/hakyll/"&gt;Hakyll&lt;/a&gt; を使っています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2016-07-07-started-github-pages.html"&gt;GitHub Pages はじめました - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定期的に自分のサイトをいじってるんだけど，久々に本腰入れて改良した． このサイトを作り始めたころと違い「Haskell力」が段違いなのでサクサクできたぜ．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;追加したのは以下の7つ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リンクチェッカー&lt;/li&gt;
&lt;li&gt;LTS 10 に対応&lt;/li&gt;
&lt;li&gt;可変なキーバリューストアを aeson で&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post/&lt;/code&gt; 以下のマークダウン置き場を変更&lt;/li&gt;
&lt;li&gt;フィードの生成&lt;/li&gt;
&lt;li&gt;ページネーションの追加&lt;/li&gt;
&lt;li&gt;タグの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初のリンクチェッカーは &lt;code&gt;stack test&lt;/code&gt; で行うのだが，追加したのは実は結構前． 記事にしてなかったので書き足しておく．&lt;/p&gt;
&lt;h2 id="リンクチェッカー"&gt;リンクチェッカー&lt;/h2&gt;
&lt;p&gt;記事内にあるリンクを実際に ping して，リンクが有効かを検査するテストを作った． もちろん Haskell で書いて &lt;code&gt;stack test&lt;/code&gt; で実行できるようにした． コードはこんな感じ&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Main&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Prelude&lt;/span&gt;                   &lt;span class="kw"&gt;hiding&lt;/span&gt; (&lt;span class="dt"&gt;FilePath&lt;/span&gt;, null)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.List&lt;/span&gt;                 (nub, sort)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Maybe&lt;/span&gt;                (fromMaybe)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Text&lt;/span&gt;                 (&lt;span class="dt"&gt;Text&lt;/span&gt;, isPrefixOf, null, unpack)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Traversable&lt;/span&gt;          (traverse)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Network.HTTP.Client&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Network.HTTP.Client.TLS&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Network.HTTP.Types.Status&lt;/span&gt; (&lt;span class="dt"&gt;Status&lt;/span&gt;, ok200)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Shelly&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Test.Hspec&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Text.HTML.Scalpel.Core&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" data-line-number="17"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" data-line-number="18"&gt;  urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fmap mconcat &lt;span class="fu"&gt;.&lt;/span&gt; shelly &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" data-line-number="19"&gt;    run_ &lt;span class="st"&gt;&amp;quot;stack&amp;quot;&lt;/span&gt; [&lt;span class="st"&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;site&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" data-line-number="20"&gt;    files &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; ls &lt;span class="st"&gt;&amp;quot;_site/posts&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" data-line-number="21"&gt;    traverse (fmap scrapeLinks &lt;span class="fu"&gt;.&lt;/span&gt; readfile) files&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" data-line-number="22"&gt;  hspec &lt;span class="fu"&gt;.&lt;/span&gt; mapM_ spec &lt;span class="fu"&gt;.&lt;/span&gt; nub &lt;span class="fu"&gt;.&lt;/span&gt; sort &lt;span class="fu"&gt;$&lt;/span&gt; filter check urls&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-23" data-line-number="23"&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-24" data-line-number="24"&gt;  check url &lt;span class="fu"&gt;=&lt;/span&gt; not &lt;span class="fu"&gt;.&lt;/span&gt; or &lt;span class="fu"&gt;.&lt;/span&gt; (&lt;span class="fu"&gt;:&lt;/span&gt;) (null url) &lt;span class="fu"&gt;$&lt;/span&gt; fmap&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-25" data-line-number="25"&gt;    (&lt;span class="ot"&gt;`isPrefixOf`&lt;/span&gt; url)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-26" data-line-number="26"&gt;    [&lt;span class="st"&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;../&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-27" data-line-number="27"&gt;  spec url &lt;span class="fu"&gt;=&lt;/span&gt; it (unpack url) &lt;span class="fu"&gt;$&lt;/span&gt; linkStatus url &lt;span class="ot"&gt;`shouldReturn`&lt;/span&gt; ok200&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-28" data-line-number="28"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-29" data-line-number="29"&gt;&lt;span class="ot"&gt;scrapeLinks ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-30" data-line-number="30"&gt;scrapeLinks txt &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe [] &lt;span class="fu"&gt;$&lt;/span&gt; scrapeStringLike txt scraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-31" data-line-number="31"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt; scraper &lt;span class="fu"&gt;=&lt;/span&gt; attrs &lt;span class="st"&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-32" data-line-number="32"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-33" data-line-number="33"&gt;&lt;span class="ot"&gt;linkStatus ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Status&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-34" data-line-number="34"&gt;linkStatus url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-35" data-line-number="35"&gt;  manager &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; newManager tlsManagerSettings&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-36" data-line-number="36"&gt;  request &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; parseRequest &lt;span class="fu"&gt;$&lt;/span&gt; unpack url&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-37" data-line-number="37"&gt;  responseStatus&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-38" data-line-number="38"&gt;    &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; httpNoBody (request { requestHeaders &lt;span class="fu"&gt;=&lt;/span&gt; [(&lt;span class="st"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)] }) manager&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTTPクライアントには &lt;a href="https://hackage.haskell.org/package/http-client"&gt;&lt;code&gt;http-client&lt;/code&gt;&lt;/a&gt; を，スクレイピングには &lt;a href="https://hackage.haskell.org/package/scalpel"&gt;&lt;code&gt;scalpel&lt;/code&gt;&lt;/a&gt; を使っている． &lt;a href="https://hackage.haskell.org/package/shelly"&gt;&lt;code&gt;shelly&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;ls&lt;/code&gt; 関数を使って記事の一覧を取得してきている(これが Windows でも動くからうれしい)． 表示をそれっぽくするために &lt;a href="https://hackage.haskell.org/package/hspec"&gt;&lt;code&gt;hspec&lt;/code&gt;&lt;/a&gt; を使っている． &lt;code&gt;check&lt;/code&gt; 補助関数で自分のページや空文字を排除している．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;これでリンク切れや単純にタイポなんかを検出できるようになったんだが，直すのがめんどくさくて結局放置していること(オイ)．&lt;/p&gt;
&lt;h2 id="lts-10-に対応"&gt;LTS 10 に対応&lt;/h2&gt;
&lt;p&gt;リンクチェッカを回すために TravisCI を使い始めたが，なぜか GHC8 系の LTS だと OUT OF MEMORY してしまう…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--  While building custom Setup.hs for package Cabal-2.0.1.1 using:
      /home/travis/.stack/setup-exe-cache/x86_64-linux/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-linux/Cabal-2.0.1.0 build --ghc-options &amp;quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&amp;quot;
    Process exited with code: ExitFailure (-9) (THIS MAY INDICATE OUT OF MEMORY)
    Logs have been written to: /home/travis/build/matsubara0507/source-gh-pages/.stack-work/logs/Cabal-2.0.1.1.log
    Configuring Cabal-2.0.1.1...
    Preprocessing library for Cabal-2.0.1.1..
    Building library for Cabal-2.0.1.1..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;かなーーり古い LTS だとうまくいくので，仕方なくそれを使っていたのだが直すことにした． というか知り合いが直し方を記事にしてくれてたのでやってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.e-bigmoon.com/posts/2017-12-31-travis-out-of-memory.html"&gt;travis-ci の初回ビルドで OUT OF MEMORY が出た時の対処法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;戦犯は &lt;code&gt;Cabal&lt;/code&gt; パッケージなので，こいつだけ先に &lt;code&gt;-j 1&lt;/code&gt; オプション(メモリを節約するが速度が遅い)でビルドしてしまうという戦略． この記事のサイトの &lt;a href="https://github.com/e-bigmoon/haskell-blog/blob/a229f118f121e0ad843faae1412e938e3e4f3a6b/.travis.yml"&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; を &lt;del&gt;コピペ&lt;/del&gt; 参考にして次のようにした&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="fu"&gt;install:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; mkdir -p ~/.local/bin&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;export PATH=$HOME/.local/bin:&lt;/span&gt;&lt;span class="at"&gt;$PATH&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;travis_retry curl -L https:&lt;/span&gt;&lt;span class="at"&gt;//www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &amp;#39;*/stack&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="fu"&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;  &lt;span class="fu"&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; install cabal&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; stack --no-terminal build -j 1 Cabal&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; install pandoc&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; travis_wait 30 stack --no-terminal build pandoc&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; install deprndences&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; stack --no-terminal test --only-dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; stack test&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; stack --no-terminal test --no-run-benchmarks --no-haddock-deps&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hakyll-4.10-が落ちる"&gt;hakyll-4.10 が落ちる&lt;/h3&gt;
&lt;p&gt;OUT OF MEMORY は突破したが…&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;    &lt;span class="fu"&gt;/&lt;/span&gt;tmp&lt;span class="fu"&gt;/&lt;/span&gt;stack3402&lt;span class="fu"&gt;/&lt;/span&gt;hakyll&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="fl"&gt;4.10&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;&lt;span class="fl"&gt;0.0&lt;/span&gt;&lt;span class="fu"&gt;/&lt;/span&gt;rts&lt;span class="fu"&gt;/&lt;/span&gt;posix&lt;span class="fu"&gt;/&lt;/span&gt;OSThreads.c&lt;span class="fu"&gt;:&lt;/span&gt;&lt;span class="dv"&gt;137&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt;&lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; error&lt;span class="fu"&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;         error&lt;span class="fu"&gt;:&lt;/span&gt; undefined reference to &lt;span class="ch"&gt;&amp;#39;pthread_create&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なぜだ… 最新の &lt;a href="https://github.com/jaspervdj/hakyll/commit/480da307d22aff8ab3817d1586710c5f4ff6d779"&gt;&lt;code&gt;hakyll-4.11&lt;/code&gt; では直ってるみたい&lt;/a&gt;なので，&lt;code&gt;stack.yaml&lt;/code&gt; に追加したら上手くいった．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="fu"&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; hakyll-4.11.0.0&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; pandoc-citeproc-0.13.0.1&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="シンタックスハイライトが"&gt;シンタックスハイライトが…&lt;/h3&gt;
&lt;p&gt;おかしくなった． 理由は簡単で，Hakyll というか Pandoc がシンタックスハイライトにもともと使っていた &lt;a href="https://hackage.haskell.org/package/highlighting-kate"&gt;&lt;code&gt;highlighting-kate&lt;/code&gt;&lt;/a&gt; をやめて &lt;a href="https://hackage.haskell.org/package/skylighting"&gt;&lt;code&gt;skylighting&lt;/code&gt;&lt;/a&gt; に対応したからみたいだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fixpt.de/blog/2017-12-03-hakyll-highlighting-themes.html"&gt;fixpt - Hakyll Code Highlighting Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので，パッケージを変えたら元に戻った．&lt;/p&gt;
&lt;h2 id="可変なキーバリューストアを-aeson-で"&gt;可変なキーバリューストアを aeson で&lt;/h2&gt;
&lt;p&gt;テンプレートの方だけで出てくる変数(e.g. &lt;code&gt;$github$&lt;/code&gt; とか)は &lt;code&gt;site.hs&lt;/code&gt; の実装に依存したくなくて，Hakyll をビルドせずとも &lt;code&gt;config.yaml&lt;/code&gt; に好きに追加できるようにしたかった． &lt;a href="https://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; パッケージ(というか &lt;a href="https://hackage.haskell.org/package/aeson"&gt;&lt;code&gt;aeson&lt;/code&gt;&lt;/a&gt;)ではそういうのを出来ないと &lt;strong&gt;思い込んでいたが &lt;code&gt;Map k v&lt;/code&gt; 型を使えばできる&lt;/strong&gt; と最近分かった(インスタンスのリストを眺めてたら気づいた)． なので，今まで使ってた &lt;a href="https://hackage.haskell.org/package/yaml-light"&gt;&lt;code&gt;yaml-light&lt;/code&gt;&lt;/a&gt; パッケージを捨てて &lt;code&gt;yaml&lt;/code&gt; パッケージで次のように実装した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Yaml&lt;/span&gt;   (decodeFileEither)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Map&lt;/span&gt;    (&lt;span class="dt"&gt;Map&lt;/span&gt;, foldMapWithKey)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Hakyll&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;  configYaml &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; either (error &lt;span class="fu"&gt;.&lt;/span&gt; show) id &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; decodeFileEither &lt;span class="st"&gt;&amp;quot;config.yaml&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;    siteCtx &lt;span class="fu"&gt;=&lt;/span&gt; mkSiteCtx configYaml&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;  hakyllWith config &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-11" data-line-number="11"&gt;    &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-13" data-line-number="13"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-15" data-line-number="15"&gt;&lt;span class="ot"&gt;mkSiteCtx ::&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-16" data-line-number="16"&gt;mkSiteCtx &lt;span class="fu"&gt;=&lt;/span&gt; foldMapWithKey constField&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こういう &lt;code&gt;config.yaml&lt;/code&gt; を書いておくと，全てテンプレートの中で参照できる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="fu"&gt;site_title:&lt;/span&gt;&lt;span class="at"&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;自分用のメモ書きだったり，イロイロといじって遊ぶようだったり&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;&lt;span class="fu"&gt;baseurl:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;&lt;span class="fu"&gt;github:&lt;/span&gt;&lt;span class="at"&gt;  matsubara0507&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="post-以下のマークダウン置き場を変更"&gt;&lt;code&gt;post/&lt;/code&gt; 以下のマークダウン置き場を変更&lt;/h2&gt;
&lt;p&gt;記事のマークダウンは全て &lt;code&gt;posts/&lt;/code&gt; 以下に置いていたのだが，各年ごとにディレクトリを切りたいなぁと思った． 例えば &lt;code&gt;posts/2018/02-21-add-feats-mysite-2018.md&lt;/code&gt; といった具合に． しかし，出力は今まで通り &lt;code&gt;posts/2018-02-21-add-feats-mysite-2018.html&lt;/code&gt; としたい(リンクが変わっちゃうからね)． まんま&lt;a href="http://daimatz.net/text/2014/0126-hakyll.html"&gt;同じことをしてくれている記事&lt;/a&gt;があったので，参考にして次のように書き換えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;  match &lt;span class="st"&gt;&amp;quot;posts/*/*&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;    route &lt;span class="fu"&gt;$&lt;/span&gt; composeRoutes (gsubRoute &lt;span class="st"&gt;&amp;quot;/[0-9]{4}/&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; (&lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;.&lt;/span&gt; init)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;                          (setExtension &lt;span class="st"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;    compile&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;      &lt;span class="fu"&gt;$&lt;/span&gt;   pandocCompiler&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;      &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; loadAndApplyTemplate &lt;span class="st"&gt;&amp;quot;templates/post.html&amp;quot;&lt;/span&gt; postCtx&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;      &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; loadAndApplyTemplate &lt;span class="st"&gt;&amp;quot;templates/default.html&amp;quot;&lt;/span&gt; (postCtx &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; siteCtx)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;      &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; relativizeUrls&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;gsubRoute&lt;/code&gt; 関数を使うことで，ファイル名を特有のパターン記法(？)でマッチさせ置換できる． &lt;code&gt;gsubRoute &amp;quot;/[0-9]{4}/&amp;quot; $ (++ &amp;quot;-&amp;quot;) . init&lt;/code&gt; の場合，&lt;code&gt;/2018/&lt;/code&gt; をマッチさせ &lt;code&gt;init&lt;/code&gt; して &lt;code&gt;/2018&lt;/code&gt; となり，末尾に &lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt; を追加している．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;さて実はもう一つ問題があって，Hakyll は日時を表すテンプレート変数(&lt;code&gt;$date$&lt;/code&gt; とか)を次のように取得する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="ot"&gt;postCtx ::&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;postCtx &lt;span class="fu"&gt;=&lt;/span&gt; mconcat&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;  [ dateField &lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;  , dateField &lt;span class="st"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%b %-d, %Y&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;  , defaultContext&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dateField&lt;/code&gt; 関数が記事のファイル名(&lt;code&gt;yyyy-mm-dd-*.md&lt;/code&gt; の部分)かマークダウンのメタ変数から取得している． つまり，&lt;code&gt;posts/2018/02-21-add-feats-mysite-2018.md&lt;/code&gt; というファイル名じゃ日時の変数を取得できない． しょうがないので Hakyll のソースコードを読んで無理やり書き換えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Time&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;System.FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="ot"&gt;dateField&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;dateField&amp;#39; key format &lt;span class="fu"&gt;=&lt;/span&gt; field key &lt;span class="fu"&gt;$&lt;/span&gt; \item &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;  time &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getItemUTC&amp;#39; defaultTimeLocale &lt;span class="fu"&gt;$&lt;/span&gt; itemIdentifier item&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; formatTime defaultTimeLocale format time&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;&lt;span class="ot"&gt;getItemUTC&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;MonadMetadata&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TimeLocale&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Identifier&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m &lt;span class="dt"&gt;UTCTime&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-10" data-line-number="10"&gt;getItemUTC&amp;#39; locale ident &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-11" data-line-number="11"&gt;  pure &lt;span class="fu"&gt;$&lt;/span&gt; parseTimeOrError &lt;span class="dt"&gt;True&lt;/span&gt; locale &lt;span class="st"&gt;&amp;quot;%Y%m-%d&amp;quot;&lt;/span&gt; (yyyy &lt;span class="fu"&gt;++&lt;/span&gt; mmdd)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-12" data-line-number="12"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-13" data-line-number="13"&gt;    path &lt;span class="fu"&gt;=&lt;/span&gt; toFilePath ident&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-14" data-line-number="14"&gt;    yyyy &lt;span class="fu"&gt;=&lt;/span&gt; takeFileName &lt;span class="fu"&gt;$&lt;/span&gt; takeDirectory path&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-15" data-line-number="15"&gt;    mmdd &lt;span class="fu"&gt;=&lt;/span&gt; take &lt;span class="dv"&gt;5&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; takeBaseName path&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さっきの &lt;code&gt;dateField&lt;/code&gt; の部分を &lt;code&gt;dateField'&lt;/code&gt; にすれば記事のビルドが出来る！&lt;/p&gt;
&lt;h3 id="vs-recentfirst-関数"&gt;vs &lt;code&gt;recentFirst&lt;/code&gt; 関数&lt;/h3&gt;
&lt;p&gt;記事を日時順に並び変えてくれる &lt;code&gt;recentFirst&lt;/code&gt; 関数もファイル名に依存してる． しょうがないので力技で書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.List&lt;/span&gt;       (sortBy)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Ord&lt;/span&gt;        (comparing)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;&lt;span class="ot"&gt;recentFirst&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;MonadMetadata&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Item&lt;/span&gt; a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class="dt"&gt;Item&lt;/span&gt; a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;recentFirst&amp;#39; &lt;span class="fu"&gt;=&lt;/span&gt; fmap reverse &lt;span class="fu"&gt;.&lt;/span&gt; chronological&amp;#39;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;&lt;span class="ot"&gt;chronological&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;MonadMetadata&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Item&lt;/span&gt; a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class="dt"&gt;Item&lt;/span&gt; a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" data-line-number="8"&gt;chronological&amp;#39; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" data-line-number="9"&gt;  sortByM &lt;span class="fu"&gt;$&lt;/span&gt; getItemUTC&amp;#39; defaultTimeLocale &lt;span class="fu"&gt;.&lt;/span&gt; itemIdentifier&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" data-line-number="11"&gt;&lt;span class="ot"&gt;sortByM ::&lt;/span&gt; (&lt;span class="dt"&gt;Monad&lt;/span&gt; m, &lt;span class="dt"&gt;Ord&lt;/span&gt; k) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m k) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m [a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-12" data-line-number="12"&gt;sortByM f &lt;span class="fu"&gt;=&lt;/span&gt; fmap (map fst &lt;span class="fu"&gt;.&lt;/span&gt; sortBy (comparing snd)) &lt;span class="fu"&gt;.&lt;/span&gt; mapM (fmap &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (,) &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; f)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;sortByM&lt;/code&gt; 関数は &lt;code&gt;sortBy&lt;/code&gt; の &lt;code&gt;Monad&lt;/code&gt; 版． &lt;code&gt;[a]&lt;/code&gt; を &lt;code&gt;[(a, m k)]&lt;/code&gt; とし &lt;code&gt;[m (a, k)]&lt;/code&gt; にして &lt;code&gt;m [(a, k)]&lt;/code&gt; にしてから &lt;code&gt;k&lt;/code&gt; でソートし最後に &lt;code&gt;a&lt;/code&gt; だけ取り出している． ちなみに，&lt;code&gt;fmap &amp;lt;$&amp;gt; (,) &amp;lt;*&amp;gt; f&lt;/code&gt; の部分は分かりますか？ &lt;code&gt;\x -&amp;gt; (,) x &amp;lt;$&amp;gt; f x&lt;/code&gt; をしてるだけですよ．&lt;/p&gt;
&lt;h2 id="フィードページネーションタグ"&gt;フィード・ページネーション・タグ&lt;/h2&gt;
&lt;p&gt;実はフィード生成・ページネーション・タグは，もとから Hakyll で提供されている機能だ． どれもこの記事に日本語で書いてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part2.html"&gt;Hakyllでブログを作る(実践編2) - Wake up! Good night*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part3.html"&gt;Hakyllでブログを作る(実践編3) - Wake up! Good night*&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だが躓きポイントはいくつかあった(だいたい日時のやつだけど…)．&lt;/p&gt;
&lt;h3 id="フィードを生成"&gt;フィードを生成&lt;/h3&gt;
&lt;p&gt;記事の通りに作っても &lt;code&gt;$published$&lt;/code&gt; 変数が無いと怒られる． &lt;code&gt;renderAtom&lt;/code&gt; 関数の中で &lt;code&gt;dateField&lt;/code&gt; 関数を使っているからだ． さすがに書き換えるのはめんどいので，自分で取ってくることにした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="ot"&gt;postCtx ::&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;postCtx &lt;span class="fu"&gt;=&lt;/span&gt; mconcat&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;  [ dateField &lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;  , dateField &lt;span class="st"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%b %-d, %Y&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;  , dateField&amp;#39; &lt;span class="st"&gt;&amp;quot;published&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;  , dateField&amp;#39; &lt;span class="st"&gt;&amp;quot;updated&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;  , defaultContext&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あと，&lt;a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Feed.html#t:FeedConfiguration"&gt;フィードに渡す変数&lt;/a&gt;は &lt;code&gt;config.yaml&lt;/code&gt; に書くことにした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="fu"&gt;site_title:&lt;/span&gt;&lt;span class="at"&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;span class="fu"&gt;author:&lt;/span&gt;&lt;span class="at"&gt; MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;span class="fu"&gt;email:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;&lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;自分用のメモ書きだったり，イロイロといじって遊ぶようだったり&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;&lt;span class="fu"&gt;baseurl:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;&lt;span class="fu"&gt;val:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;  &lt;span class="fu"&gt;github:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;Config&lt;/code&gt; 型という拡張可能レコードにマッピングし，そのあとに &lt;code&gt;FeedConfiguration&lt;/code&gt; 型に変換する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Control.Lens&lt;/span&gt; ((^.))&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;site_title&amp;quot; &amp;gt;: String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;   , &lt;span class="st"&gt;&amp;quot;author&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;   , &lt;span class="st"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;   , &lt;span class="st"&gt;&amp;quot;baseurl&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;   , &lt;span class="st"&gt;&amp;quot;val&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;&lt;span class="ot"&gt;mkFeedConfig ::&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;FeedConfiguration&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;mkFeedConfig conf &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;FeedConfiguration&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;  { feedTitle       &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;site_title&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" data-line-number="16"&gt;  , feedDescription &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;description&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" data-line-number="17"&gt;  , feedAuthorName  &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;author&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" data-line-number="18"&gt;  , feedAuthorEmail &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;email&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" data-line-number="19"&gt;  , feedRoot        &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;baseurl&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-20" data-line-number="20"&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん，&lt;code&gt;siteCtx&lt;/code&gt; も書き換える必要がある．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="ot"&gt;mkSiteCtx ::&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;mkSiteCtx &lt;span class="fu"&gt;=&lt;/span&gt; hfoldMapFor&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;  (toContext &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; symbolVal &lt;span class="fu"&gt;.&lt;/span&gt; proxyAssocKey &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; getField)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;&lt;span class="ot"&gt;  toContext ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;  toContext _ &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; mempty&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;  toContext k v  &lt;span class="fu"&gt;=&lt;/span&gt; constField k v&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; (&lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-14" data-line-number="14"&gt;  toContext _ &lt;span class="fu"&gt;=&lt;/span&gt; foldMapWithKey toContext&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-16" data-line-number="16"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; (&lt;span class="dt"&gt;Identity&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-17" data-line-number="17"&gt;  toContext k &lt;span class="fu"&gt;=&lt;/span&gt; toContext k &lt;span class="fu"&gt;.&lt;/span&gt; runIdentity&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコード最高です．&lt;/p&gt;
&lt;h3 id="ページネーションを追加"&gt;ページネーションを追加&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part2.html#%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%8D%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3"&gt;参考記事&lt;/a&gt;の中で使われている &lt;code&gt;sortRecentFirst&lt;/code&gt; も日時を取得しているので書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="ot"&gt;sortRecentFirst&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;MonadMetadata&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Identifier&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class="dt"&gt;Identifier&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;sortRecentFirst&amp;#39; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;  fmap (fmap itemIdentifier) &lt;span class="fu"&gt;.&lt;/span&gt; recentFirst&amp;#39; &lt;span class="fu"&gt;.&lt;/span&gt; fmap (flip &lt;span class="dt"&gt;Item&lt;/span&gt; ())&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="タグを追加"&gt;タグを追加&lt;/h3&gt;
&lt;p&gt;躓きと言うかデザインの問題なのだが，タグのテンプレート変数を生成する &lt;a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Tags.html#v:tagsField"&gt;&lt;code&gt;tagsField&lt;/code&gt;&lt;/a&gt; 関数が，タグをカンマ区切りの文字列にしちゃうのがあった． 個人的には空白区切りにして欲しいので書き換えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.List&lt;/span&gt;                   (intersperse)&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Text.Blaze.Html&lt;/span&gt;             (toHtml, toValue, (!))&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Text.Blaze.Html5&lt;/span&gt;            &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;H&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Text.Blaze.Html5.Attributes&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-6" data-line-number="6"&gt;&lt;span class="ot"&gt;tagsFieldWithSep ::&lt;/span&gt; &lt;span class="dt"&gt;H.Html&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Tags&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-7" data-line-number="7"&gt;tagsFieldWithSep sep &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-8" data-line-number="8"&gt;  tagsFieldWith getTags simpleRenderLink (mconcat &lt;span class="fu"&gt;.&lt;/span&gt; intersperse sep)&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-10" data-line-number="10"&gt;&lt;span class="ot"&gt;simpleRenderLink ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; FilePath &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;H.Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-11" data-line-number="11"&gt;simpleRenderLink tag &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-12" data-line-number="12"&gt;  fmap (\path &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; H.a &lt;span class="fu"&gt;!&lt;/span&gt; A.href (toValue &lt;span class="fu"&gt;$&lt;/span&gt; toUrl path) &lt;span class="fu"&gt;$&lt;/span&gt; toHtml tag)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tagsFieldWithSep &amp;quot; &amp;quot;&lt;/code&gt; とすれば空白区切りになる．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ずーーとやろうやろうと思ってたことをいっきに片したぜ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html</id><title type="text">自己紹介ページを生成する whoami CLI を作った (Haskell)</title><updated>2018-02-19T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;自己紹介ページを生成する whoami CLI を作った (Haskell)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-02-19" itemprop="datePublished"&gt;
        Feb 19, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt; &lt;a href="/tags/extensible-package.html"&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://github.com/matsubara0507/whoami"&gt;whoami&lt;/a&gt; という CLI を作りました． こんな感じの Yaml ファイルから&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="fu"&gt;account:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;github:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;  &lt;span class="fu"&gt;qiita:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="fu"&gt;site:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;    &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://matsubara0507.github.io&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;    &lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; メモ書きブログ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;&lt;span class="fu"&gt;post:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;  &lt;span class="fu"&gt;latest:&lt;/span&gt;&lt;span class="at"&gt; 10&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;  &lt;span class="fu"&gt;posts:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://haskell.jp/blog/posts/2017/advent-calendar-2017.html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;      &lt;span class="fu"&gt;date:&lt;/span&gt;&lt;span class="at"&gt; 2017-12-31&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://iggg.github.io/2017/06/01/make-tweet-slack-bot&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;&lt;span class="fu"&gt;library:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; chatwork&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" data-line-number="17"&gt;    &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://hackage.haskell.org/package/chatwork&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" data-line-number="18"&gt;    &lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; The ChatWork API in Haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" data-line-number="19"&gt;    &lt;span class="fu"&gt;language:&lt;/span&gt;&lt;span class="at"&gt; haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" data-line-number="20"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; thank_you_stars&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" data-line-number="21"&gt;    &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://hex.pm/packages/thank_you_stars&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" data-line-number="22"&gt;    &lt;span class="fu"&gt;language:&lt;/span&gt;&lt;span class="at"&gt; elixir&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-23" data-line-number="23"&gt;&lt;span class="fu"&gt;qiita:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-24" data-line-number="24"&gt;  &lt;span class="fu"&gt;posts:&lt;/span&gt;&lt;span class="at"&gt; true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-25" data-line-number="25"&gt;&lt;span class="fu"&gt;app:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-26" data-line-number="26"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; AnaQRam&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-27" data-line-number="27"&gt;    &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://github.com/matsubara0507/AnaQRam&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-28" data-line-number="28"&gt;    &lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; QRコードを利用したアナグラム(並び替えパズル)&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じの Markdown を生成する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode markdown"&gt;&lt;code class="sourceCode markdown"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="fu"&gt;# MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;- &lt;span class="ot"&gt;[GitHub](https://github.com/matsubara0507)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[Qiita](https://qiita.com/matsubara0507)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;span class="fu"&gt;## My Sites&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;- &lt;span class="ot"&gt;[ひげメモ](http://matsubara0507.github.io)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;&lt;span class="fl"&gt;    - メモ書きブログ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;&lt;span class="fu"&gt;## My Posts&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;- &lt;span class="ot"&gt;[Haskell Advent Calendar 2017 まとめ - Haskell-jp](http://haskell.jp/blog/posts/2017/advent-calendar-2017.html)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;&lt;span class="fl"&gt;    - posted on 2017-12-31&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" data-line-number="12"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[LINE の Echo Bot を Google Cloud Functions に作る](https://qiita.com/matsubara0507/items/04ab3c2197aa5f68e499)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" data-line-number="13"&gt;&lt;span class="fl"&gt;    - posted on 2017-11-21&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" data-line-number="14"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[GitHub にチャット機能のようなものが追加された (team discussions)](https://qiita.com/matsubara0507/items/47d2e2545553e415f969)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" data-line-number="15"&gt;&lt;span class="fl"&gt;    - posted on 2017-11-21&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" data-line-number="16"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[GitHub Project に自動でカードのカラム遷移をする機能が追加された](https://qiita.com/matsubara0507/items/f384991b4854aa28745a)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" data-line-number="17"&gt;&lt;span class="fl"&gt;    - posted on 2017-10-31&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-18" data-line-number="18"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[Slack から特定のアカウントでツイートする Bot を作った｜群馬大学電子計算機研究会 IGGG](http://iggg.github.io/2017/06/01/make-tweet-slack-bot)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-19" data-line-number="19"&gt;&lt;span class="fl"&gt;    - posted on 2017-06-01&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-20" data-line-number="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-21" data-line-number="21"&gt;&lt;span class="fu"&gt;## Applications&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-22" data-line-number="22"&gt;- &lt;span class="ot"&gt;[AnaQRam](http://github.com/matsubara0507/AnaQRam)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-23" data-line-number="23"&gt;&lt;span class="fl"&gt;    - QRコードを利用したアナグラム(並び替えパズル)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-24" data-line-number="24"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-25" data-line-number="25"&gt;&lt;span class="fu"&gt;## Libraries&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-26" data-line-number="26"&gt;- &lt;span class="ot"&gt;[chatwork](http://hackage.haskell.org/package/chatwork)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-27" data-line-number="27"&gt;&lt;span class="fl"&gt;    - The ChatWork API in Haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-28" data-line-number="28"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[thank_you_stars](http://hex.pm/packages/thank_you_stars)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-29" data-line-number="29"&gt;&lt;span class="fl"&gt;    - A tool for starring GitHub repositories.&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yaml ファイルでは足りない情報をスクレイピングや各種 Web サービスの API で拾ってくる． なんか自分のアクティビティを紹介するページを SNS にリンクしてる人が多いと思うんだけど，そのページをできるだけ楽して生成したいなぁというのがモチベーション．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;ホントはバイト先で作ってる Haskell 製の社内用 CLI ツールを公開したくて，内容を公開できるようにしたツールです． こんな感じのデータ処理をするツールを，バイト先では Haskell で作ってた．&lt;/p&gt;
&lt;h2 id="extensible"&gt;extensible&lt;/h2&gt;
&lt;p&gt;このツールの(まぁまぁ)面白いところは，&lt;a href="https://hackage.haskell.org/package/extensible"&gt;extensible&lt;/a&gt; というパッケージの機能をふんだんに使っている． 拡張可能レコード，バリアント，作用を使い，ついでに &lt;a href="https://hackage.haskell.org/package/extensible/docs/Data-Extensible-GetOpt.html"&gt;GetOpt&lt;/a&gt; も使ってみた． 軽く補足しておく(&lt;strong&gt;但し，作者ではないので間違っている部分はあるかも&lt;/strong&gt;)．&lt;/p&gt;
&lt;h3 id="拡張可能レコード"&gt;拡張可能レコード&lt;/h3&gt;
&lt;p&gt;Haskell のレコード構文&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; {&lt;span class="ot"&gt; hoge1 ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="ot"&gt; hoge2 ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を，型レベル辞書を用いて次のように書ける．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: Int, &amp;quot;hoge2&amp;quot; &amp;gt;: Text ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt; 言語拡張と組み合わせて，名前衝突の無いフィールド名を扱えたり，&lt;code&gt;lens&lt;/code&gt; を用いた OOP のような参照(e.g. &lt;code&gt;hoge ^. #hoge1&lt;/code&gt;)が出来る． また，&lt;a href="/posts/2017-11-28-fun-of-extensible-1.html"&gt;レコードの拡縮もできる&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id="拡張可能バリアント"&gt;拡張可能バリアント&lt;/h3&gt;
&lt;p&gt;次のような直和型&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Hoge1&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Hoge2&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を，型レベル辞書を用いて，バリアント型のように書ける．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: Int, &amp;quot;hoge2&amp;quot; &amp;gt;: Text ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(正直あんまり利点が分かってないけど)拡縮はもちろん，&lt;a href="/posts/2018-01-31-fun-of-extensible-2.html"&gt;バリアントの操作関数をファイル分割して実装&lt;/a&gt;もできる．&lt;/p&gt;
&lt;h3 id="拡張可能作用"&gt;拡張可能作用&lt;/h3&gt;
&lt;p&gt;型レベル辞書によってモナドスタックを表現する． 今回は次のようなモナドを定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Eff&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ ReaderDef Config&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;   , &lt;span class="dt"&gt;EitherDef&lt;/span&gt; &lt;span class="dt"&gt;ServiceException&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;   , &lt;span class="dt"&gt;LoggerDef&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;   , &lt;span class="st"&gt;&amp;quot;IO&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本的に&lt;a href="/posts/2017-12-09-extensible-effects-step-by-step.html"&gt;普通のモナドトランスフォーマーのように扱える&lt;/a&gt;． じゃぁ素直にモナドトランスフォーマー使えよって感じかもしれないけど気にしないで．&lt;/p&gt;
&lt;h3 id="getopt-ラッパー"&gt;&lt;code&gt;GetOpt&lt;/code&gt; ラッパー&lt;/h3&gt;
&lt;p&gt;GHCには標準で &lt;code&gt;--output hoge&lt;/code&gt; みたいな CLI のオプション引数をパースしてくれるモジュール &lt;a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/System-Console-GetOpt.html"&gt;&lt;code&gt;GetOpt&lt;/code&gt;&lt;/a&gt; がある(ぼくは初めて使った)． extensible では，パース結果を拡張可能レコードにマッピングするための補助関数が&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-GetOpt.html"&gt;提供されている&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;キモになるのは &lt;code&gt;withGetOpt&lt;/code&gt; 関数である．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;withGetOpt&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  ::&lt;/span&gt; &lt;span class="dt"&gt;MonadIO&lt;/span&gt; m&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;  &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;RecordOf&lt;/span&gt; (&lt;span class="dt"&gt;OptionDescr&lt;/span&gt; h) xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;RecordOf&lt;/span&gt; h xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;String&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一引数目の文字列はパース失敗したとき(要するにオプションが間違ってるとき)に表示する「使い方」に使われる． 例えば，whoami だと&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;whoami [options] [input-file]
  -o FILE               --output=FILE                Write output to FILE instead of stdout.
  -t FORMAT, -w FORMAT  --to=FORMAT, --write=FORMAT  Specify output format. default is `markdown`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;の &lt;code&gt;[options] [input-file]&lt;/code&gt; が一引数目だ． 二引数目はオプションのパーサー(？)の定義を拡張可能レコードで与えており，三引数目がパース結果の拡張可能レコードと残りの(空白区切りの)文字列を受け取ってどうするかの振る舞いを与える．&lt;/p&gt;
&lt;p&gt;まぁ詳しくは&lt;a href="https://www.schoolofhaskell.com/user/fumieval/extensible/getopt-and-extensible-records"&gt;作者さんの記事&lt;/a&gt;で紹介されている(英語だけど，あと一引数目の文字列はこの記事以降に追加された機能らしく，サンプルコードにはない)．&lt;/p&gt;
&lt;h3 id="extensible-instances"&gt;extensible-instances&lt;/h3&gt;
&lt;p&gt;拡張可能レコードは全て &lt;code&gt;Record '[...]&lt;/code&gt; の型エイリアスで定義する． つまり，拡張可能レコードの何らかの型クラスのインスタンスは &lt;code&gt;Record '[...]&lt;/code&gt; に適用しておけば全部で使える(逆に影響力がでかいともいえる)．&lt;/p&gt;
&lt;p&gt;いくつかの自作アプリーケーションでインスタンスを作っていて，ダブってたのでひとつのリポジトリにまとめた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/extensible-instances"&gt;matsubara0507/extensible-instances - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(なんか作者本人じゃないから気が引けて) Hackage にはあげてないがパッケージの体はしてるので，&lt;a href="https://docs.haskellstack.org/en/stable/yaml_configuration/#git-and-mercurial-repos"&gt;&lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;extra-deps&lt;/code&gt; に記述&lt;/a&gt;することで使えるはず．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;注意点として &lt;a href="https://github.com/fumieval/extensible"&gt;fumieval/extensible&lt;/a&gt; の&lt;a href="https://github.com/fumieval/extensible/blob/master/examples/aeson.hs"&gt;例にある &lt;code&gt;FromJSON&lt;/code&gt; のインスタンス&lt;/a&gt;とは微妙に実装が違う． 作者さんのは &lt;code&gt;Maybe a&lt;/code&gt; にしてもキーが存在しないといけないのだが，&lt;code&gt;aeson&lt;/code&gt; の &lt;code&gt;Generics&lt;/code&gt; は &lt;code&gt;Maybe a&lt;/code&gt; ならキーが無くても良いので，そっちに合わせた．&lt;/p&gt;
&lt;h2 id="仕組み"&gt;仕組み&lt;/h2&gt;
&lt;p&gt;コード自体は&lt;a href="https://github.com/matsubara0507/whoami"&gt;このリポジトリ&lt;/a&gt;にある．&lt;/p&gt;
&lt;h3 id="基本的な部分"&gt;基本的な部分&lt;/h3&gt;
&lt;p&gt;基本的に Yaml ファイルにはサイト・記事・ライブラリ・アプリケーションを列挙してもらう． それらは次のような型になっている(型の値として取り出せる)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot;    &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;   , &lt;span class="st"&gt;&amp;quot;account&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Accounts&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;   , &lt;span class="st"&gt;&amp;quot;site&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; [&lt;span class="dt"&gt;SiteConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;   , &lt;span class="st"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;latest&amp;quot; &amp;gt;: Maybe Int, &amp;quot;posts&amp;quot; &amp;gt;: [PostConfig]]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;   , &lt;span class="st"&gt;&amp;quot;library&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; [&lt;span class="dt"&gt;LibConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;   , &lt;span class="st"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;     &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; [&lt;span class="dt"&gt;AppConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;   , &lt;span class="st"&gt;&amp;quot;qiita&amp;quot;&lt;/span&gt;   &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;QiitaConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-11" data-line-number="11"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Accounts&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-12" data-line-number="12"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-13" data-line-number="13"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-15" data-line-number="15"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;SiteConfig&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-16" data-line-number="16"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-17" data-line-number="17"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-18" data-line-number="18"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-19" data-line-number="19"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-20" data-line-number="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-21" data-line-number="21"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;PostConfig&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-22" data-line-number="22"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Maybe Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-23" data-line-number="23"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-24" data-line-number="24"&gt;   , &lt;span class="st"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-25" data-line-number="25"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-26" data-line-number="26"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-27" data-line-number="27"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;LibConfig&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-28" data-line-number="28"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-29" data-line-number="29"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-30" data-line-number="30"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-31" data-line-number="31"&gt;   , &lt;span class="st"&gt;&amp;quot;language&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-32" data-line-number="32"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-33" data-line-number="33"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-34" data-line-number="34"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;AppConfig&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-35" data-line-number="35"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-36" data-line-number="36"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-37" data-line-number="37"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-38" data-line-number="38"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt;パッケージを使って，Yaml ファイルから &lt;code&gt;Config&lt;/code&gt; 型にデコードしてもらう． &lt;code&gt;Maybe a&lt;/code&gt; になっているところは書いてあっても無くても良い項目だ．&lt;/p&gt;
&lt;p&gt;そしてサイト・記事・ライブラリ・アプリケーション固有の &lt;code&gt;Config&lt;/code&gt; 型を共通のフォーマットである &lt;code&gt;Info&lt;/code&gt; 型に変換する手続きを型クラスを用いて定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;   , &lt;span class="st"&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;ServiceType&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" data-line-number="8"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;ServiceType&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" data-line-number="9"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;post&amp;quot; &amp;gt;: Post&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" data-line-number="10"&gt;   , &lt;span class="st"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" data-line-number="11"&gt;   , &lt;span class="st"&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Library&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-12" data-line-number="12"&gt;   , &lt;span class="st"&gt;&amp;quot;site&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Site&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-13" data-line-number="13"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-15" data-line-number="15"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Uniform&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-16" data-line-number="16"&gt;&lt;span class="ot"&gt;  fetch ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; &lt;span class="dt"&gt;Data&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-17" data-line-number="17"&gt;&lt;span class="ot"&gt;  fill ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Data&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-18" data-line-number="18"&gt;&lt;span class="ot"&gt;  uniform ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-20" data-line-number="20"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Data&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-22" data-line-number="22"&gt;&lt;span class="ot"&gt;toInfo ::&lt;/span&gt; &lt;span class="dt"&gt;Uniform&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-23" data-line-number="23"&gt;toInfo conf &lt;span class="fu"&gt;=&lt;/span&gt; uniform &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; fill conf &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; fetch conf&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Uniform&lt;/code&gt; 型クラスに3つの関数は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fill&lt;/code&gt; 関数は共通のフォーマットにするための足りない情報(&lt;code&gt;Maybe a&lt;/code&gt; で &lt;code&gt;Nothing&lt;/code&gt; だったところ)をスクレイピングなどで補完&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt; 関数はスクレイピングするための HTML などを取ってくる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform&lt;/code&gt; 関数は実際に共通フォーマットに変換する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった具合だ(正直分けなくてもいい)．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;他にも GitHub・BitBacket・GitLab なんかを全部一緒に取り扱う &lt;code&gt;Repo&lt;/code&gt; とかも作ってもいいかもしれない． 問題は，自分が GitHub 以外に使ってないのでテストできない点だ．&lt;/p&gt;
&lt;h3 id="qiita-とか"&gt;Qiita とか&lt;/h3&gt;
&lt;p&gt;Qiita とかは RESTful API を叩いて記事を集めてる． そもそも記事自体を集めるところと，&lt;code&gt;Uniform&lt;/code&gt; 型クラスのインスタンスを共通化するのに &lt;code&gt;Service&lt;/code&gt; 型クラスを作った(名前が微妙)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Service&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  genInfo ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; [&lt;span class="dt"&gt;Info&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Proxy a&lt;/code&gt; なのはしょうがない． お好きなサービス(自分のサイトとかでも)を &lt;code&gt;Service&lt;/code&gt; 型クラスのインスタンスにして，&lt;code&gt;Whoami&lt;/code&gt; 型のインスタンスを書き換えれば，いろんなサイトを共通の形式で扱える．&lt;/p&gt;
&lt;h2 id="on-github-pages"&gt;on GitHub Pages&lt;/h2&gt;
&lt;p&gt;GitHub Pages で簡単に使えるようにした． サンプルのリポジトリを作ったので，これをフォークして Travis CI と GitHub Pages を設定するだけで使えるはずだ(もちろん &lt;code&gt;whoami.yaml&lt;/code&gt; を書き換えて)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/whoami-example"&gt;matsubara0507/whoami-example - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stackage (というか Hackage)に置いていないツールを &lt;code&gt;stack install&lt;/code&gt; するために，&lt;code&gt;package.yaml&lt;/code&gt; と &lt;code&gt;stack.yaml&lt;/code&gt; と &lt;code&gt;.gitignore&lt;/code&gt; を置いてるけど気にしないで． Travis CI の定期実行を設定しておけば定期的に Qita の記事とかを更新してくれる．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;そーいえば，UNIX 系には &lt;code&gt;whoami&lt;/code&gt; というコマンドがあるんでしたね(Windowsユーザー)． 紛らわしい名前にしてしまった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20180214/1518587871</id><title type="text">[TLS][Haskell]TLS 1.3 開発日記 その25 picotls</title><updated>2018-02-14T05:57:51Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20180214/1518587871"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;kazuho さんが実装を進めている picotls を使う方法のまとめ。picotls は TLS 1.3 のみを実装している。またデフォルトで利用できる ECDHE は P256 のみである。&lt;/p&gt;
&lt;h4&gt; インストール&lt;/h4&gt;
&lt;p&gt;cmakeが必要なので、あらかじめインストールしておく。master ブランチが draft 23。&lt;/p&gt;
&lt;pre&gt;
% git clone https://github.com/h2o/picotls
% cd picotls
% git submodule init
% git submodule update
% cmake .
% make
&lt;/pre&gt;

&lt;p&gt;これで、トップディレクトリに "cli" というコマンドができる。"cli" は、サーバにもクライアントにもなる。&lt;/p&gt;
&lt;h4&gt; picotls サーバ&lt;/h4&gt;
&lt;pre&gt;
% ./cli -k $SOMEWHERE/key.pem -c $SOMEWHERE/certificate.pem 127.0.0.1 13443
&lt;/pre&gt;

&lt;h4&gt; picotls クライアント&lt;/h4&gt;
&lt;p&gt;Full:&lt;/p&gt;
&lt;pre&gt;
% ./cli 127.0.0.1 443
&lt;/pre&gt;

&lt;p&gt;HRR: &lt;/p&gt;
&lt;p&gt;最初はkey_shareを空にして送るという裏技を使う&lt;/p&gt;
&lt;pre&gt;
% ./cli -n 127.0.0.1 443
&lt;/pre&gt;

&lt;p&gt;PSK:&lt;/p&gt;
&lt;p&gt;最初の -s オプションでチケットを保存し、次の -s オプションでチケットを読み込む。&lt;/p&gt;
&lt;pre&gt;
% rm ticket
% cli -s ticket 127.0.0.1 443
% cli -s ticket 127.0.0.1 443
&lt;/pre&gt;

&lt;p&gt;0RTT:&lt;/p&gt;
&lt;pre&gt;
% rm ticket
% cli -s ticket 127.0.0.1 443
% cat early-data.txt - | cli -s ticket 127.0.0.1 443
&lt;/pre&gt;

&lt;/div&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-02-12-pattern-synonyms.html</id><title type="text">Pattern Synonyms で DEPRECATED</title><updated>2018-02-12T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-02-12-pattern-synonyms.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;persistent&lt;/code&gt; ライブラリで &lt;code&gt;SomeField&lt;/code&gt; を &lt;code&gt;CopyField&lt;/code&gt; に置き換える際の&lt;a href="https://github.com/yesodweb/persistent/pull/760"&gt;PR&lt;/a&gt;で、パターンシノニム (Pattern Synonyms) の面白い使い方を見つけました。&lt;/p&gt;
&lt;p&gt;もしかしたら良く知られた技なのかもしれませんが、ご紹介したいと思います。&lt;/p&gt;
&lt;p&gt;パターンシノニムが何かについての説明は、今回全くしていませんのでわかる人向けです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="モチベーション"&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;パターンシノニムはパターンの再利用を可能にするための言語拡張です。詳しくは &lt;a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-synonyms"&gt;User’s Guide 10.7. Pattern synonyms&lt;/a&gt; をご確認ください。&lt;/p&gt;
&lt;p&gt;使いみちは色々あると思いますが、今回はコンストラクタを &lt;code&gt;DEPRECATED&lt;/code&gt; にするために利用する例をご紹介します。（実際のコードは&lt;a href="https://github.com/parsonsmatt/persistent/blob/c882203c9cc09ba28b2012b58b4cd0fdc415e6ce/persistent-mysql/Database/Persist/MySQL.hs#L1080"&gt;このあたり&lt;/a&gt;です)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Persistent&lt;/code&gt; ライブラリの &lt;code&gt;3.0.0&lt;/code&gt; から &lt;code&gt;SomeField&lt;/code&gt; が廃止され &lt;code&gt;HandleUpdateCollision&lt;/code&gt; 型が導入されました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SomeField&lt;/code&gt; 型は &lt;code&gt;Persistent&lt;/code&gt; の中でも結構重要な型 (&lt;code&gt;SomeException&lt;/code&gt; と同じような雰囲気の型) です。また &lt;code&gt;Yesod&lt;/code&gt; のプロジェクトでは多数のユーザがいるため、このような変更に対しては、いきなり削除するのではなく &lt;code&gt;DEPRECATED&lt;/code&gt; プラグマを利用して、新しい関数への移行を促しています。&lt;/p&gt;
&lt;p&gt;今回の場合、&lt;strong&gt;関数&lt;/strong&gt;ではなく&lt;strong&gt;データ型&lt;/strong&gt;を変更する必要があるためパターンシノニムが利用されています。&lt;/p&gt;
&lt;h2 id="実際のコード"&gt;実際のコード&lt;/h2&gt;
&lt;p&gt;コメント等を適宜削除しましたが、実際にはこんな感じで利用されています。&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;HandleUpdateCollision&lt;/span&gt; record &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;  &lt;span class="dt"&gt;CopyField&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;EntityField&lt;/span&gt; record typ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;HandleUpdateCollision&lt;/span&gt; record&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;  &lt;span class="dt"&gt;CopyUnlessEq&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;PersistField&lt;/span&gt; typ &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;EntityField&lt;/span&gt; record typ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; typ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;HandleUpdateCollision&lt;/span&gt; record&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;SomeField&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;HandleUpdateCollision&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;span class="ot"&gt;#if MIN_VERSION_base(4,8,0)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;pattern &lt;span class="dt"&gt;SomeField&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;EntityField&lt;/span&gt; record typ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SomeField&lt;/span&gt; record&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;&lt;span class="ot"&gt;#endif&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;pattern &lt;span class="dt"&gt;SomeField&lt;/span&gt; x &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;CopyField&lt;/span&gt; x&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;&lt;span class="ot"&gt;{-# DEPRECATED SomeField &amp;quot;The type SomeField is deprecated. Use the type HandleUpdateCollision instead, and use the function copyField instead of the data constructor.&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重要な部分はここですね。&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;pattern &lt;span class="dt"&gt;SomeField&lt;/span&gt; x &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;CopyField&lt;/span&gt; x&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="ot"&gt;{-# DEPRECATED SomeField &amp;quot;...&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Haskell&lt;/code&gt; には&lt;strong&gt;型シノニム&lt;/strong&gt;があるのに&lt;strong&gt;データシノニム&lt;/strong&gt;って無いんですね。。。って思った人はパターンシノニムを使えばこんな感じで実現可能です。&lt;/p&gt;
&lt;p&gt;通常、パターンシノニムを利用するモチベーションはパターンマッチの再利用にあると思うのですが、単純にデータコンストラクタのエイリアスにしておいて &lt;code&gt;DEPRECATED&lt;/code&gt; を促すやり方も結構使えるなーと思いました。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html</id><title type="text">「積み木の水槽」問題の Haskell での回答を読み解く</title><updated>2018-02-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;「積み木の水槽」問題の Haskell での回答を読み解く&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-02-04" itemprop="datePublished"&gt;
        Feb 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;今朝，バイト先で&lt;a href="http://nabetani.sakura.ne.jp/hena/ord13blocktup/"&gt;「積み木の水槽」問題&lt;/a&gt;の &lt;a href="https://rosettacode.org/wiki/Water_collected_between_towers#Haskell"&gt;Haskell での回答&lt;/a&gt;について話題になりました． リンク先の解答を見ると，恐ろしいことに，一行で書けてしまいます(正しくは，この解答では &lt;code&gt;nabetani&lt;/code&gt; さんの問題は解けませんが…)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- 2 == solve [1,5,3,7,2]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;solve &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; filter (&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;) &lt;span class="fu"&gt;.&lt;/span&gt; (zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;普通の Haskeller であれば，これぐらい目コンパイルして振る舞いを読み解くのは朝飯前でしょうが，Haskell 初学者のために簡単な解説を残しておこうかなと思います．&lt;/p&gt;
&lt;h2 id="手直し"&gt;手直し&lt;/h2&gt;
&lt;p&gt;前述したとおり，そもそもこれでは &lt;code&gt;nabetani&lt;/code&gt; さんの問題は解けないので，解けるように手直しします． もちろん &lt;strong&gt;1行で&lt;/strong&gt; ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;solve &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; fmap (sum &lt;span class="fu"&gt;.&lt;/span&gt; (zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)) &lt;span class="fu"&gt;.&lt;/span&gt; fmap (read &lt;span class="fu"&gt;.&lt;/span&gt; (&lt;span class="fu"&gt;:&lt;/span&gt; []))) &lt;span class="fu"&gt;.&lt;/span&gt; words &lt;span class="fu"&gt;.&lt;/span&gt; fmap (bool &lt;span class="ch"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class="fu"&gt;/=&lt;/span&gt;) &lt;span class="ch"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Data.List&lt;/code&gt; と &lt;code&gt;Data.Bool&lt;/code&gt; を &lt;code&gt;import&lt;/code&gt; してる前提だが，一応一行で書けた． 雑に直したのでもう少し短くできるような気もしますが，まぁそもそも本質的なところでないので勘弁してください．&lt;/p&gt;
&lt;p&gt;ちなみに，そもそもなんで元のコードでは解けないのかというと，&lt;code&gt;nabetani&lt;/code&gt; さんの問題には &lt;code&gt;0&lt;/code&gt; が含むからだ． しかし，&lt;code&gt;0&lt;/code&gt; で水槽を切り分けてあげて，元の解答を &lt;code&gt;map&lt;/code&gt; してあげれば良いだけなのでコアのところはそのまんま(&lt;code&gt;filter (&amp;gt; 0)&lt;/code&gt; は要らない気がしたので消したけど)．&lt;/p&gt;
&lt;h2 id="読み解く"&gt;読み解く&lt;/h2&gt;
&lt;p&gt;手直しした最終的なコードはテストコードと共に&lt;a href="https://gist.github.com/matsubara0507/10a44fb2a9676bde9658c3eeec456676"&gt;ココ&lt;/a&gt;にあげた．&lt;/p&gt;
&lt;h3 id="トップダウンに"&gt;トップダウンに&lt;/h3&gt;
&lt;p&gt;順に読み解く． Haskell でプログラミングするとき(というか関数型プログラミング)はトップダウンに書いていくのが基本なので，読み解くときも上から順に切り分けてく．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="ot"&gt;solve ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;solve &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; fmap countWater &lt;span class="fu"&gt;.&lt;/span&gt; splitTank&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;span class="ot"&gt;splitTank ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;String&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;splitTank &lt;span class="fu"&gt;=&lt;/span&gt;  words &lt;span class="fu"&gt;.&lt;/span&gt; fmap (bool &lt;span class="ch"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class="fu"&gt;/=&lt;/span&gt;) &lt;span class="ch"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;&lt;span class="ot"&gt;countWater ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;countWater &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; (zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)) &lt;span class="fu"&gt;.&lt;/span&gt; fmap (read &lt;span class="fu"&gt;.&lt;/span&gt; (&lt;span class="fu"&gt;:&lt;/span&gt; []))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;splitTank&lt;/code&gt; 関数は &lt;code&gt;0&lt;/code&gt; を区切り文字として文字列を切り分けてるだけだ． 悲しいことに，Haskell (というか GHC)の標準モジュールには「任意の文字で文字列を切り分ける」関数がない． なので，&lt;code&gt;0&lt;/code&gt; だけを空白 &lt;code&gt;' '&lt;/code&gt; に置換してから，&lt;code&gt;words&lt;/code&gt; で切り分けている(空白で切り分ける関数 &lt;code&gt;words&lt;/code&gt; は何故か標準にある)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;countWater&lt;/code&gt; 関数が各水槽の水の数を数え上げており，それを最後に総和 &lt;code&gt;sum&lt;/code&gt; しているだけだ．&lt;/p&gt;
&lt;h3 id="fmap-はわかるよね"&gt;&lt;code&gt;fmap&lt;/code&gt; はわかるよね？&lt;/h3&gt;
&lt;p&gt;ちなみに，さっきから出てきている &lt;code&gt;fmap&lt;/code&gt; という関数はわかりますよね？ 多くの言語でも導入されている，リストや配列の各要素に関数を適用する関数(あるいはメソッド) &lt;code&gt;map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt; をより一般化したものだ． 今回はリストにしか使わないので &lt;code&gt;map&lt;/code&gt; と同義だと考えてくれていい(hlint で注意されるので，&lt;code&gt;fmap&lt;/code&gt; と書く癖がついた)．&lt;/p&gt;
&lt;h3 id="コアの部分"&gt;コアの部分&lt;/h3&gt;
&lt;p&gt;さて，本題でもある &lt;code&gt;countWater&lt;/code&gt; 関数を読み解く． まずは切り分けよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="ot"&gt;countWater ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;countWater &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; toWaterLine &lt;span class="fu"&gt;.&lt;/span&gt; toInts&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="ot"&gt;toInts ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;toInts &lt;span class="fu"&gt;=&lt;/span&gt; fmap (read &lt;span class="fu"&gt;.&lt;/span&gt; (&lt;span class="fu"&gt;:&lt;/span&gt; []))&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt;&lt;span class="ot"&gt;toWaterLine ::&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt;toWaterLine &lt;span class="fu"&gt;=&lt;/span&gt; zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toInts&lt;/code&gt; 関数は数列の文字列から数値のリストに変換している． Haskell で文字列を任意の型に変換するには &lt;code&gt;read :: String -&amp;gt; a&lt;/code&gt; 関数を使う． Haskell において &lt;code&gt;String = [Char]&lt;/code&gt; なので，&lt;code&gt;fmap (: [])&lt;/code&gt; をして &lt;code&gt;String&lt;/code&gt; のリストに変換し，各文字列を &lt;code&gt;read&lt;/code&gt; をしているというわけだ(&lt;code&gt;singleton&lt;/code&gt; みたいな関数が標準にあればいいのに)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;toWaterLine&lt;/code&gt; 関数が水槽の各列の水の量を計算し，&lt;code&gt;sum&lt;/code&gt; で総和している． なので，重要なのは &lt;code&gt;toWaterLine&lt;/code&gt; 関数だ． &lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; 演算子や &lt;code&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt; 演算子などがあって意味不明かもしれないが，この辺りはポイントフリーにするためのツールみたいなもので，アルゴリズムの本質的な部分ではないよ．&lt;/p&gt;
&lt;h3 id="関数も-monad-型クラスのインスタンス"&gt;関数も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; 演算子や &lt;code&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt; 演算子が何をしているかと言うのは &lt;strong&gt;関数型 &lt;code&gt;(-&amp;gt;) a&lt;/code&gt; も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス&lt;/strong&gt; だという事実を知っていれば簡単に読めますね． Haskell 界隈では常識(要出典)なので，説明しなくても良いかもしれないが，初学者のために念のためしておく．&lt;/p&gt;
&lt;p&gt;それぞれの演算子の型は以下の通り(めんどいので &lt;code&gt;Monad&lt;/code&gt; で統一)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="ot"&gt;(&amp;lt;*&amp;gt;) ::&lt;/span&gt; &lt;span class="dt"&gt;Monad&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; m (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m b&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="ot"&gt;(=&amp;lt;&amp;lt;) ::&lt;/span&gt; &lt;span class="dt"&gt;Monad&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，前述したとおり，関数型 &lt;code&gt;(c -&amp;gt;)&lt;/code&gt; も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンスなので，&lt;code&gt;m = (c -&amp;gt;)&lt;/code&gt; と置き換えれる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="ot"&gt;(&amp;lt;*&amp;gt;) ::&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="ot"&gt;(=&amp;lt;&amp;lt;) ::&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;便利そうなコンビネーターになった． なので，&lt;code&gt;toWaterLine&lt;/code&gt; 関数のこれらの演算子を同様のラムダ式で置き換えてあげよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="ot"&gt;toWaterLine ::&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;toWaterLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) ((\ys &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;$&lt;/span&gt; ys) (scanr1 max ys)) xs) xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) ((\ys &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; zipWith min (scanl1 max ys) (scanr1 max ys)) xs) xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) (zipWith min (scanl1 max xs) (scanr1 max xs)) xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ついでに，他の言語の人では分かりにくい演算子も置き換えたので，これでどの言語の人でも読めるはずだ．&lt;/p&gt;
&lt;h3 id="アルゴリズム"&gt;アルゴリズム&lt;/h3&gt;
&lt;p&gt;ここからは Haskell 関係ない． ひとつひとつ見ていこう．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scanl :: (b -&amp;gt; a -&amp;gt; b) -&amp;gt; b -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt; 関数は左畳み込み関数 &lt;code&gt;foldl :: (b -&amp;gt; a -&amp;gt; b) -&amp;gt; b -&amp;gt; [a] -&amp;gt; b&lt;/code&gt; の途中経過もリストで残したような関数だ． つまり &lt;code&gt;foldl f x xs = last $ scanl f x xs&lt;/code&gt; が成り立つ． &lt;code&gt;scanl1 :: (a -&amp;gt; a -&amp;gt; a) -&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt; 関数は初期値を無くしたバージョンだ． &lt;code&gt;scanr1&lt;/code&gt; は &lt;code&gt;scanl1&lt;/code&gt; の右畳み込みバージョン．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scanl max xs&lt;/code&gt; は左から順に，水槽の高さを比較して高い方を残しているので，各列の最も高い左側が残る． &lt;code&gt;scanr1 max xs&lt;/code&gt; は各列の最も高い右側が残る．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/water-towers-hs/water1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;そして，それらの低い方を残して，もとの高さを引く．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/water-towers-hs/water2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;すごいできた！&lt;/p&gt;
&lt;h2 id="試しに"&gt;試しに&lt;/h2&gt;
&lt;p&gt;次のテストコードを走らせてみた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- WalterTowers.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; print &lt;span class="fu"&gt;$&lt;/span&gt; all ((&lt;span class="fu"&gt;==&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; snd &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (show &lt;span class="fu"&gt;.&lt;/span&gt; solve &lt;span class="fu"&gt;.&lt;/span&gt; fst)) testSet&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;solve &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;&lt;span class="ot"&gt;testSet ::&lt;/span&gt; [(&lt;span class="dt"&gt;String&lt;/span&gt;, &lt;span class="dt"&gt;String&lt;/span&gt;)]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;testSet &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;  [ (&lt;span class="st"&gt;&amp;quot;83141310145169154671122&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;24&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;  , (&lt;span class="st"&gt;&amp;quot;923111128&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;45&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;  , (&lt;span class="st"&gt;&amp;quot;923101128&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" data-line-number="12"&gt;  , (&lt;span class="st"&gt;&amp;quot;903111128&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;9&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" data-line-number="13"&gt;  , (&lt;span class="st"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-14" data-line-number="14"&gt;  , (&lt;span class="st"&gt;&amp;quot;31&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-15" data-line-number="15"&gt;  , (&lt;span class="st"&gt;&amp;quot;412&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-16" data-line-number="16"&gt;  , (&lt;span class="st"&gt;&amp;quot;3124&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-17" data-line-number="17"&gt;  , (&lt;span class="st"&gt;&amp;quot;11111&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-18" data-line-number="18"&gt;  , (&lt;span class="st"&gt;&amp;quot;222111&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-19" data-line-number="19"&gt;  , (&lt;span class="st"&gt;&amp;quot;335544&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-20" data-line-number="20"&gt;  , (&lt;span class="st"&gt;&amp;quot;1223455321&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-21" data-line-number="21"&gt;  , (&lt;span class="st"&gt;&amp;quot;000&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-22" data-line-number="22"&gt;  , (&lt;span class="st"&gt;&amp;quot;000100020003121&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-23" data-line-number="23"&gt;  , (&lt;span class="st"&gt;&amp;quot;1213141516171819181716151413121&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;56&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-24" data-line-number="24"&gt;  , (&lt;span class="st"&gt;&amp;quot;712131415161718191817161514131216&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;117&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-25" data-line-number="25"&gt;  , (&lt;span class="st"&gt;&amp;quot;712131405161718191817161514031216&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;64&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-26" data-line-number="26"&gt;  , (&lt;span class="st"&gt;&amp;quot;03205301204342100&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-27" data-line-number="27"&gt;  , (&lt;span class="st"&gt;&amp;quot;0912830485711120342&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;18&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-28" data-line-number="28"&gt;  , (&lt;span class="st"&gt;&amp;quot;1113241120998943327631001&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;20&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-29" data-line-number="29"&gt;  , (&lt;span class="st"&gt;&amp;quot;7688167781598943035023813337019904732&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;41&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-30" data-line-number="30"&gt;  , (&lt;span class="st"&gt;&amp;quot;2032075902729233234129146823006063388&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;79&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-31" data-line-number="31"&gt;  , (&lt;span class="st"&gt;&amp;quot;8323636570846582397534533&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;44&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-32" data-line-number="32"&gt;  , (&lt;span class="st"&gt;&amp;quot;2142555257761672319599209190604843&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;41&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-33" data-line-number="33"&gt;  , (&lt;span class="st"&gt;&amp;quot;06424633785085474133925235&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;51&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-34" data-line-number="34"&gt;  , (&lt;span class="st"&gt;&amp;quot;503144400846933212134&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;21&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-35" data-line-number="35"&gt;  , (&lt;span class="st"&gt;&amp;quot;1204706243676306476295999864&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;21&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-36" data-line-number="36"&gt;  , (&lt;span class="st"&gt;&amp;quot;050527640248767717738306306596466224&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;29&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-37" data-line-number="37"&gt;  , (&lt;span class="st"&gt;&amp;quot;5926294098216193922825&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;65&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-38" data-line-number="38"&gt;  , (&lt;span class="st"&gt;&amp;quot;655589141599534035&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;29&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-39" data-line-number="39"&gt;  , (&lt;span class="st"&gt;&amp;quot;7411279689677738&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;34&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-40" data-line-number="40"&gt;  , (&lt;span class="st"&gt;&amp;quot;268131111165754619136819109839402&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;102&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-41" data-line-number="41"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stack runghc&lt;/code&gt; で走らせると．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack runghc WalterTowers.hs
True&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;こういうのを自分で思いつけるようになりたいね…&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html</id><title type="text">拡張可能直和型を引数に取る関数の定義 (Haskell)</title><updated>2018-01-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;拡張可能直和型を引数に取る関数の定義 (Haskell)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-01-31" itemprop="datePublished"&gt;
        Jan 31, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/extensible-package.html"&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;「&lt;a href="https://hackage.haskell.org/package/extensible"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; パッケージの楽しみ その２」です．&lt;/p&gt;
&lt;p&gt;拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; について，割とドキュメントには無い(？)ネタを書いておくシリーズ第二弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．&lt;/p&gt;
&lt;p&gt;また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="/posts/2017-11-28-fun-of-extensible-1.html"&gt;前回&lt;/a&gt;は拡張可能レコードの拡縮の話を書きました． その最後の方に，おまけとして拡張可能直和型の話を書きました． 実際に自分のプログラムで，この拡張可能直和型を使おうとしてみたんですが，パターンマッチが分からず分岐が出来なかったので調べました，ってのが今回のハナシ．&lt;/p&gt;
&lt;p&gt;今回の Haskell コードは基本的に&lt;a href="https://github.com/matsubara0507/test-extensible/blob/master/src/Sample/Variant.hs"&gt;コレ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="拡張可能直和型"&gt;拡張可能直和型&lt;/h2&gt;
&lt;p&gt;ここでは，Haskell の代数的データ型において&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;RGB&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;CMYK&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように複数の値コンストラクタをとり得る型を直和型ということにします(あんまり一般的ではない？)． このようなデータ型を extensible を使って書くと次のようになる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;rgb&amp;quot;  &amp;gt;: (Int,Int,Int)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;   , &lt;span class="st"&gt;&amp;quot;cmyk&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが拡張可能直和型である(と呼んでいる)． 例えば次のような，&lt;code&gt;Color&lt;/code&gt; 型の構造的に部分型である &lt;code&gt;RGB&lt;/code&gt; 型の値を &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:spread"&gt;&lt;code&gt;spread&lt;/code&gt;&lt;/a&gt; という関数を使って持ち上げることが出来る．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;RGB&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;rgb&amp;quot; &amp;gt;: (Int,Int,Int) ]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; color1 &lt;span class="fu"&gt;=&lt;/span&gt; embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;rgb &lt;span class="fu"&gt;@=&lt;/span&gt; (&lt;span class="dv"&gt;0&lt;/span&gt;,&lt;span class="dv"&gt;0&lt;/span&gt;,&lt;span class="dv"&gt;0&lt;/span&gt;)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;RGB&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; color2 &lt;span class="fu"&gt;=&lt;/span&gt; spread&lt;span class="ot"&gt; color1 ::&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに「拡張可能直和型」って単語は，ほぼほぼ造語です(すいません)． 作者さんは &lt;strong&gt;Extensible Variants&lt;/strong&gt; と書いているので，正確には拡張可能バリアント型ですかね． ML 系では「バリアント型」って単語は良く使われてますが，Haskell では馴染みが無いので「直和型」って単語を用います．&lt;/p&gt;
&lt;h2 id="パターンマッチ"&gt;パターンマッチ&lt;/h2&gt;
&lt;p&gt;ここからが本題． 例として次のような図形の型を用いる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; (&lt;span class="dt"&gt;Double&lt;/span&gt;, &lt;span class="dt"&gt;Double&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Circle&lt;/code&gt; が円で中心点の座標と半径を持ち，&lt;code&gt;Rect&lt;/code&gt; が矩形で左下と右上の座標を持つ． 例えば，図形の面積を求める関数 &lt;code&gt;area&lt;/code&gt; を書くときはパターンマッチを用いて次のように書きますよね．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="ot"&gt;area ::&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;area (&lt;span class="dt"&gt;Circle&lt;/span&gt; _ r) &lt;span class="fu"&gt;=&lt;/span&gt; pi &lt;span class="fu"&gt;*&lt;/span&gt; (r &lt;span class="fu"&gt;^&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;area (&lt;span class="dt"&gt;Rect&lt;/span&gt; (x1,y1) (x2,y2)) &lt;span class="fu"&gt;=&lt;/span&gt; abs (x2 &lt;span class="fu"&gt;-&lt;/span&gt; x1) &lt;span class="fu"&gt;*&lt;/span&gt; abs (y2 &lt;span class="fu"&gt;-&lt;/span&gt; y1)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では，この &lt;code&gt;Shape&lt;/code&gt; 型を拡張可能直和型で書いてみる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;circle&amp;quot; &amp;gt;: Circle&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;   , &lt;span class="st"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;   &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;x&amp;quot; &amp;gt;: Double, &amp;quot;y&amp;quot; &amp;gt;: Double ]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;  &lt;span class="dt"&gt;Circle&lt;/span&gt; (&lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;mid&amp;quot; &amp;gt;: Point, &amp;quot;r&amp;quot; &amp;gt;: Double ]) deriving (Show, Eq)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;  &lt;span class="dt"&gt;Rect&lt;/span&gt; (&lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;ll&amp;quot; &amp;gt;: Point, &amp;quot;ur&amp;quot; &amp;gt;: Point ]) deriving (Show, Eq)&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Record&lt;/code&gt; は拡張可能レコードだ． 後の話の流れのために &lt;code&gt;newtype&lt;/code&gt; で &lt;code&gt;Circle&lt;/code&gt; 型と &lt;code&gt;Rect&lt;/code&gt; 型を定義したが，別に型エイリアスでもいい．&lt;/p&gt;
&lt;p&gt;問題はココからで，どうやって &lt;code&gt;area&lt;/code&gt; 関数を定義するか． (作者さんに聞いてしまえば早いんだけど)パッケージを漁ってたらそれらしい関数 &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Match.html#v:match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; があった． イロイロ試した結果，&lt;code&gt;match&lt;/code&gt; よりも &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Field.html#v:matchField"&gt;&lt;code&gt;matchField&lt;/code&gt;&lt;/a&gt; の方が使いやすかったので，こっちを使って次のように書ける．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="ot"&gt;area ::&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;area &lt;span class="fu"&gt;=&lt;/span&gt; matchField&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;circle &lt;span class="fu"&gt;@=&lt;/span&gt; (\(&lt;span class="dt"&gt;Circle&lt;/span&gt; s) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; pi &lt;span class="fu"&gt;*&lt;/span&gt; (s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;r) &lt;span class="fu"&gt;^&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;rect   &lt;span class="fu"&gt;@=&lt;/span&gt; ((&lt;span class="fu"&gt;*&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; width &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; height)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" data-line-number="7"&gt;width,&lt;span class="ot"&gt; height ::&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" data-line-number="8"&gt;width  (&lt;span class="dt"&gt;Rect&lt;/span&gt; s) &lt;span class="fu"&gt;=&lt;/span&gt; abs &lt;span class="fu"&gt;$&lt;/span&gt; s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;ur &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x &lt;span class="fu"&gt;-&lt;/span&gt; s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;ll &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" data-line-number="9"&gt;height (&lt;span class="dt"&gt;Rect&lt;/span&gt; s) &lt;span class="fu"&gt;=&lt;/span&gt; abs &lt;span class="fu"&gt;$&lt;/span&gt; s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;ur &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y &lt;span class="fu"&gt;-&lt;/span&gt; s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;ll &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;意外と簡単にできた！&lt;/p&gt;
&lt;p&gt;(なんでこれでうまくいくかを説明しようと思ったけど，ぼくには説明するのが難しすぎてやめた．) (ちなみに，すごい簡潔に書けるのは &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Wrapper.html#t:Wrapper"&gt;&lt;code&gt;Wrapper&lt;/code&gt;&lt;/a&gt; 型クラスのおかげだと思う．)&lt;/p&gt;
&lt;h2 id="型クラスを使う"&gt;型クラスを使う&lt;/h2&gt;
&lt;p&gt;ここからが拡張可能直和型のすごいところ(パターンマッチしかできないなら普通の直和型でもいいもんね…)． 型クラスを用いて次のようにも &lt;code&gt;area&lt;/code&gt; 関数を定義できる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  area ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;  area (&lt;span class="dt"&gt;Circle&lt;/span&gt; s) &lt;span class="fu"&gt;=&lt;/span&gt; pi &lt;span class="fu"&gt;*&lt;/span&gt; (s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;r) &lt;span class="fu"&gt;^&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;  area &lt;span class="fu"&gt;=&lt;/span&gt; (&lt;span class="fu"&gt;*&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; width &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; height&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Forall&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt;) xs &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; (&lt;span class="dt"&gt;Variant&lt;/span&gt; xs) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;  area &lt;span class="fu"&gt;=&lt;/span&gt; matchField &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" data-line-number="12"&gt;    htabulateFor (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt;)) &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" data-line-number="13"&gt;      \_ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; (&lt;span class="dt"&gt;Match&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; area &lt;span class="fu"&gt;.&lt;/span&gt; runIdentity)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Forall (KeyValue KnownSymbol Area) xs&lt;/code&gt; という型制約の直観的な解釈は，型レベルリスト &lt;code&gt;xs&lt;/code&gt; の全ての要素 &lt;code&gt;k &amp;gt;: v&lt;/code&gt; が &lt;code&gt;KnownSymbol k&lt;/code&gt; と &lt;code&gt;Area v&lt;/code&gt; を満たす，という意味だ． 即ち，拡張可能直和型の全ての要素が &lt;code&gt;Area&lt;/code&gt; 型クラスのインスタンスであれば，その拡張可能直和型は &lt;code&gt;Area&lt;/code&gt; 型クラスのインスタンスになり得るのだ． ちゃんと次のように動作する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; shape1&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;&lt;span class="dt"&gt;EmbedAt&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;(mkMembership &lt;span class="dv"&gt;0&lt;/span&gt;) (circle &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; (mid &lt;span class="fu"&gt;@=&lt;/span&gt; (x &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="fl"&gt;1.0&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; y &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="fl"&gt;2.0&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil) &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; r &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="fl"&gt;2.0&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil))&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t shape1&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;&lt;span class="ot"&gt;shape1 ::&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; area shape1&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;&lt;span class="fl"&gt;12.566370614359172&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これの何がすごいかと言うと，例えば次のように &lt;code&gt;Shape&lt;/code&gt; 型を拡張しよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Triangle&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;  &lt;span class="dt"&gt;Triangle&lt;/span&gt; (&lt;span class="dt"&gt;Point&lt;/span&gt;, &lt;span class="dt"&gt;Point&lt;/span&gt;, &lt;span class="dt"&gt;Point&lt;/span&gt;) &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Show&lt;/span&gt;, &lt;span class="dt"&gt;Eq&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;circle&amp;quot; &amp;gt;: Circle&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;   , &lt;span class="st"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;   , &lt;span class="st"&gt;&amp;quot;triangle&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Triangle&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般的な直和型の場合は，&lt;code&gt;Shape&lt;/code&gt; 型のパターンマッチしている部分を全て増やさないといけない． しかし，型クラスを用いた拡張可能直和型の関数であれば，次のようにインスタンスを増やすだけで良い．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; &lt;span class="dt"&gt;Triangle&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;  area (&lt;span class="dt"&gt;Triangle&lt;/span&gt; (p1, p2, p3)) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;    abs ((p1 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x &lt;span class="fu"&gt;-&lt;/span&gt; p3 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x) &lt;span class="fu"&gt;*&lt;/span&gt; (p2 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y &lt;span class="fu"&gt;-&lt;/span&gt; p3 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y) &lt;span class="fu"&gt;-&lt;/span&gt; (p2 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x &lt;span class="fu"&gt;-&lt;/span&gt; p3 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x) &lt;span class="fu"&gt;*&lt;/span&gt; (p1 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y &lt;span class="fu"&gt;-&lt;/span&gt; p3 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y)) &lt;span class="fu"&gt;/&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;書き込んでる行数は大差ないかもしれないが，例えばファイルを分けたりなど，より柔軟に関数を定義できる！&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;code&gt;area&lt;/code&gt; 関数は &lt;code&gt;a -&amp;gt; Double&lt;/code&gt; で返り値の型が &lt;code&gt;Double&lt;/code&gt; だったから楽だった． これが，例えば座標移動をする &lt;code&gt;nudge :: a -&amp;gt; Point -&amp;gt; a&lt;/code&gt; のように，返り値が &lt;code&gt;a&lt;/code&gt; なものは &lt;code&gt;Variant&lt;/code&gt; のインスタンスを定義するのが大変(&lt;a href="https://github.com/matsubara0507/test-extensible/blob/d5e58f59ad4b1a2f4809bbecd79eeffbe04eec51/src/Sample/Variant.hs#L94"&gt;頑張った&lt;/a&gt;)．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html</id><title type="text">AdC の Haskell 記事を Haskell で集めた</title><updated>2018-01-30T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;AdC の Haskell 記事を Haskell で集めた&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-01-30" itemprop="datePublished"&gt;
        Jan 30, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt; &lt;a href="/tags/scraping.html"&gt;scraping&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;昨年最後に，Haskell-jp へ以下の記事を寄稿しました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.jp/blog/posts/2017/advent-calendar-2017.html"&gt;Haskell Advent Calendar 2017 まとめ - Haskell-jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2017年のアドベントカレンダーに投稿された Haskell 記事を分類して紹介してるだけです． &lt;a href="https://scrapbox.io/miyamoen/Elm_Advent_Calendar_2017_まとめ"&gt;Elm のやつ&lt;/a&gt;を見かけて &lt;del&gt;パクリ&lt;/del&gt; オマージュしました．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;分類は温もりのある手作業ですが，Haskell 記事は機械的にあ集めました． 本記事はそのために作った Haskell プログラムに関するメモ書きです．&lt;/p&gt;
&lt;p&gt;全てのコードは以下のリポジトリにあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar"&gt;matsubara0507/haskell-advent-calendar - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に本質的な意味は無いんですが CLI として作っています．&lt;/p&gt;
&lt;h2 id="作る"&gt;作る&lt;/h2&gt;
&lt;p&gt;ゴールとしては，&lt;strong&gt;年を指定すると Qiita と ADVENTAR の全てのカレンダーをスクレイピングして，結果(Haskell 記事のリスト)を JSON ファイルに書き出す&lt;/strong&gt; プログラムを作る． Haskell に関する記事かどうかは，単純にカレンダーか記事のタイトルに “Haskell” という単語か含まれているかどうかで判断する．&lt;/p&gt;
&lt;h3 id="パッケージ"&gt;パッケージ&lt;/h3&gt;
&lt;p&gt;お世話になった主要なパッケージ達を先に示しておく(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/master/package.yaml"&gt;package.yaml&lt;/a&gt; を見れば十分なんだけどね)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/extensible"&gt;extensible&lt;/a&gt; : フィールド数の多いレコード型は拡張可能レコードにしちゃえ
&lt;ul&gt;
&lt;li&gt;フィールドへのアクセスには &lt;a href="https://hackage.haskell.org/package/lens"&gt;lens&lt;/a&gt; を用いる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/aeson"&gt;aeson&lt;/a&gt; : JSON の読み書きパッケージの金字塔
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/aeson-pretty"&gt;aeson-pretty&lt;/a&gt; : JSON を綺麗にインデントしてくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/scalpel-core"&gt;scalpel-core&lt;/a&gt; : スクレイパーパッケージ(core じゃなくて &lt;a href="https://hackage.haskell.org/package/scalpel"&gt;scalpel&lt;/a&gt; は Windows だとビルドめんどい)
&lt;ul&gt;
&lt;li&gt;Qiita の HTML の取得には &lt;a href="https://hackage.haskell.org/package/wreq"&gt;wreq&lt;/a&gt; を使った(操作が簡単なので)&lt;/li&gt;
&lt;li&gt;ADVENTAR は React 製なので &lt;a href="https://hackage.haskell.org/package/webdriver"&gt;webdriver&lt;/a&gt; で Selenium を使う&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/shelly"&gt;shelly&lt;/a&gt; : スクレイピングが攻撃にならんよう1秒スリープ(OSに依存せずに書ける)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/conduit-combinators"&gt;conduit-combinators&lt;/a&gt; : ストリーミングパッケージの金字塔
&lt;ul&gt;
&lt;li&gt;コッチの方が &lt;a href="https://hackage.haskell.org/package/conduit"&gt;conduit&lt;/a&gt; より名前の衝突なく関数が使えるので(大本は同じ)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/optparse-applicative"&gt;optparse-applicative&lt;/a&gt; : CLI の引数をいい感じに処理してくれる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回の主目的ではないが，このプログラムは extensible の拡張可能レコードを用いた optparse-applicative のサンプルコードにもなっていると思う．&lt;/p&gt;
&lt;h3 id="記事の型を考える"&gt;記事の型を考える&lt;/h3&gt;
&lt;p&gt;最低限必要なのは，記事のタイトルと URL である． 他に，記事の著者と記事が投稿されたカレンダー・日付があった方が，あとで列挙するときに映えるだろう． ということで，以下の型を考えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE DataKinds         #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TypeOperators     #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (&lt;span class="dt"&gt;Text&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;   &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;    , &lt;span class="st"&gt;&amp;quot;auther&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;    , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;    , &lt;span class="st"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;    , &lt;span class="st"&gt;&amp;quot;calendar&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Calendar&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;    , &lt;span class="st"&gt;&amp;quot;category&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" data-line-number="17"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" data-line-number="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" data-line-number="19"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Calendar&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" data-line-number="20"&gt;   &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" data-line-number="21"&gt;    , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" data-line-number="22"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;category&amp;quot;&lt;/code&gt; は後の(手作業による)分類で用いる． extensible による拡張可能レコードな型だが，何となく読めるだろう(分からなかったググって)．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;インターフェースを揃えるために，&lt;code&gt;Qiita&lt;/code&gt; や &lt;code&gt;ADVENTAR&lt;/code&gt; って感じの型から 記事のリスト &lt;code&gt;[Post]&lt;/code&gt; を返す型クラスを定義しておく(正直あんまり意味はない)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  getPosts ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;順にインスタンスを定義していく．&lt;/p&gt;
&lt;h3 id="adventar"&gt;ADVENTAR&lt;/h3&gt;
&lt;p&gt;&lt;a href="/posts/2017-12-02-re-adventar-slack-bot-part1.html"&gt;ADVENTAR は昔集めた&lt;/a&gt;ので簡単だ．&lt;/p&gt;
&lt;h4 id="カレンダーの記事を集める"&gt;カレンダーの記事を集める&lt;/h4&gt;
&lt;p&gt;まずは，カレンダーの URL を与えたら記事のリストを返す関数を書く．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Data.Text.IO&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;TIO&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Shelly&lt;/span&gt; (shelly, sleep)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Test.WebDriver&lt;/span&gt; (&lt;span class="dt"&gt;WDConfig&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Text.HTML.Scalpel.Core&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;  getPosts (&lt;span class="dt"&gt;Adventar&lt;/span&gt; url conf) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;    html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtmlWith conf url&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;    posts &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe [] &lt;span class="fu"&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;  TIO.putStrLn &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;  shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;  return posts&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" data-line-number="17"&gt;&lt;span class="ot"&gt;scrapeHtml ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" data-line-number="18"&gt;scrapeHtml &lt;span class="fu"&gt;=&lt;/span&gt; flip scrapeStringLike&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-20" data-line-number="20"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-22" data-line-number="22"&gt;&lt;span class="ot"&gt;fetchHtmlWith ::&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-23" data-line-number="23"&gt;fetchHtmlWith &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-24" data-line-number="24"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-25" data-line-number="25"&gt;&lt;span class="ot"&gt;postsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-26" data-line-number="26"&gt;postsScraper &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ADVENTAR のカレンダーのページは React 製(?)かなんからしく，静的な HTML からでは記事を参照することが出来ない そのために，Selenium などのヘッドレスブラウザを使ってアクセスする． &lt;code&gt;WDConfig&lt;/code&gt; は Haskell から Selenium などを操作するための Web Driver の設定値の型である．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shelly $ sleep 1&lt;/code&gt; はDOS攻撃にならないように，ここで処理を1秒止めるために書いている．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fetchHtmlWith&lt;/code&gt; と &lt;code&gt;postsScraper&lt;/code&gt; はこんな感じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="ot"&gt;fetchHtmlWith ::&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;fetchHtmlWith config url &lt;span class="fu"&gt;=&lt;/span&gt; runSession config &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;  openPage (unpack url)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;  html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getSource&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;  closeSession&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;  return html&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Default&lt;/span&gt; (def)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="ot"&gt;postsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;postsScraper &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;  chroots (&lt;span class="st"&gt;&amp;quot;table&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;mod-entryList&amp;quot;&lt;/span&gt;] &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;) entryScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;&lt;span class="ot"&gt;entryScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;entryScraper &lt;span class="fu"&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title    &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; titleScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;auther   &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; autherScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url      &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; urlScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;date     &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; dateScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;calendar &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; pure def&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-14" data-line-number="14"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;category &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; pure &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-15" data-line-number="15"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-17" data-line-number="17"&gt;&lt;span class="ot"&gt;autherScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-18" data-line-number="18"&gt;autherScraper &lt;span class="fu"&gt;=&lt;/span&gt; text &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;td&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;mod-entryList-user&amp;quot;&lt;/span&gt;] &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;span&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-20" data-line-number="20"&gt;&lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;xxxScraper&lt;/code&gt; を全部書いてると長くなるので割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Adventar/Scraper.hs"&gt;ココ&lt;/a&gt;に全部ある)．&lt;/p&gt;
&lt;h4 id="脱線-拡張可能レコードの-etc.."&gt;脱線 : 拡張可能レコードの etc..&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-60--64--61--62-"&gt;&lt;code&gt;(&amp;lt;@=&amp;gt;)&lt;/code&gt;&lt;/a&gt; 演算子は拡張可能レコードの値を設定する演算子 &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-64--61-"&gt;&lt;code&gt;(@=)&lt;/code&gt;&lt;/a&gt; のモナディック版(正確には &lt;code&gt;Functor&lt;/code&gt;)というイメージだ． &lt;strong&gt;かなり&lt;/strong&gt; 直感的に型を書くと次のようになる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="ot"&gt;(@=) ::&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; v &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (k &lt;span class="fu"&gt;:&amp;gt;&lt;/span&gt; v)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="ot"&gt;(&amp;lt;@=&amp;gt;) ::&lt;/span&gt; &lt;span class="dt"&gt;Functor&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f v &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f (k &lt;span class="fu"&gt;:&amp;gt;&lt;/span&gt; v)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコードはフィールド名とフィールドの値の型レベル辞書みたいなモノであり，&lt;code&gt;k :&amp;gt; v&lt;/code&gt; が辞書のイチ要素というイメージだ． &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:-60-:"&gt;&lt;code&gt;(&amp;lt;:)&lt;/code&gt;&lt;/a&gt; で &lt;code&gt;[kv1, kv2, ... kvn]&lt;/code&gt; のような辞書を構築する(&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:nil"&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/a&gt; が空リスト)．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:hsequence"&gt;&lt;code&gt;hsequence&lt;/code&gt;&lt;/a&gt; 関数で &lt;code&gt;[f (k1 :&amp;gt; v1), ..., f (kn :&amp;gt; vn)] -&amp;gt; f [(k1 :&amp;gt; v1), ... (kn :&amp;gt; vn)]&lt;/code&gt; という型の変換をしているイメージだ(あくまでイメージね)．&lt;/p&gt;
&lt;h2 id="section-3"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;def&lt;/code&gt; は &lt;a href="https://hackage.haskell.org/package/data-default"&gt;data-default&lt;/a&gt; パッケージの値で，&lt;a href="https://hackage.haskell.org/package/data-default-0.7.1.1/docs/Data-Default.html#t:Default"&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; 型クラスのインスタンスにしないと使えない． 拡張可能レコードのインスタンス化の説明はめんどくさいので割愛する． &lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Default.hs"&gt;ココ&lt;/a&gt;に書いてあるので参照してください．&lt;/p&gt;
&lt;h4 id="カレンダーを加える"&gt;カレンダーを加える&lt;/h4&gt;
&lt;p&gt;このままだとカレンダーが &lt;code&gt;def&lt;/code&gt; のまま(URL もカレンダー名も &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;)なので，スクレイピングしたカレンダーの情報を加えよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Control.Lens&lt;/span&gt; (set)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (strip)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;getPosts (&lt;span class="dt"&gt;Adventar&lt;/span&gt; url conf) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;  html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtmlWith conf url&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" data-line-number="7"&gt;    posts &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe [] &lt;span class="fu"&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" data-line-number="8"&gt;    calendar&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" data-line-number="9"&gt;        &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title &lt;span class="fu"&gt;@=&lt;/span&gt; fromMaybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; (scrapeHtml headerTitleScraper html)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-10" data-line-number="10"&gt;       &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url   &lt;span class="fu"&gt;@=&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-11" data-line-number="11"&gt;       &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-12" data-line-number="12"&gt;  TIO.putStrLn &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-13" data-line-number="13"&gt;  shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-14" data-line-number="14"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; fmap (set &lt;span class="fu"&gt;#&lt;/span&gt;calendar calendar) posts&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-16" data-line-number="16"&gt;&lt;span class="ot"&gt;headerTitleScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-17" data-line-number="17"&gt;headerTitleScraper &lt;span class="fu"&gt;=&lt;/span&gt; strip &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; text (&lt;span class="st"&gt;&amp;quot;head&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;strip&lt;/code&gt; は文字列の前後の空白などを排除してくれる．&lt;/p&gt;
&lt;h4 id="カレンダーを集める"&gt;カレンダーを集める&lt;/h4&gt;
&lt;p&gt;カレンダーから記事を集めるだとまだ半分． カレンダー自体を集めないと全ての記事を確認できない．&lt;/p&gt;
&lt;p&gt;ADVENTAR の場合は，&lt;code&gt;&amp;quot;https://adventar.org/calendars?year=2017&lt;/code&gt; という URL で任意の年のカレンダーの一覧を取得できる． この URL からカレンダーの URL のリストを返す関数を定義する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="ot"&gt;getUrls ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;getUrls url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;  html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtml url&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; fromMaybe [] (scrapeHtml calendarUrlsScraper html)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;span class="ot"&gt;fetchHtml ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;fetchHtml url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;  response &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; get &lt;span class="fu"&gt;$&lt;/span&gt; unpack url&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; fromMaybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; (decodeConvertText &lt;span class="fu"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;UTF8&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; response &lt;span class="fu"&gt;^.&lt;/span&gt; responseBody)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;&lt;span class="ot"&gt;calendarUrlsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" data-line-number="12"&gt;calendarUrlsScraper &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" data-line-number="13"&gt;  chroots (&lt;span class="st"&gt;&amp;quot;div&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;mod-calendarList&amp;quot;&lt;/span&gt;] &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ul&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;li&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-14" data-line-number="14"&gt;    url &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; attr &lt;span class="st"&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-15" data-line-number="15"&gt;      (&lt;span class="st"&gt;&amp;quot;div&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;mod-calendarList-title&amp;quot;&lt;/span&gt;]) &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-16" data-line-number="16"&gt;    return &lt;span class="fu"&gt;$&lt;/span&gt; append &lt;span class="st"&gt;&amp;quot;http://adventar.org&amp;quot;&lt;/span&gt; url&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こっちは静的な HTML で動作するのでヘッドレスブラウザは使わない． ただ単に HTML の文字列さへ手に入ればいいので，扱うのが簡単な wreq を今回は使った． &lt;code&gt;get&lt;/code&gt; という関数に URL を適用するだけで，HTML (型は &lt;code&gt;ByteString&lt;/code&gt;) を返してくれる．&lt;/p&gt;
&lt;h5 id="vs.文字コード"&gt;vs. 文字コード&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;ByteString&lt;/code&gt; から &lt;code&gt;Text&lt;/code&gt; への変換はかなりめんどくさい． というのも，文字コード回りで簡単に例外を投げるからだ．&lt;/p&gt;
&lt;p&gt;例えば，記事のリンク先が PDF のようなバイナリファイルだと UTF-8 の &lt;code&gt;Text&lt;/code&gt; に変換できなくて例外を投げてくる． もちろん，カレンダーの URL を集める場合は，そんな心配は無いんだけど，Qiita のところで困る…&lt;/p&gt;
&lt;h2 id="section-4"&gt;&lt;/h2&gt;
&lt;p&gt;ちゃんとやるなら例外に合わせて処理を分けるべきだが，めんどくさいので例外を返す場合は &lt;code&gt;Nothing&lt;/code&gt; が返ってくる &lt;a href="https://hackage.haskell.org/package/text-conversions"&gt;text-conversions&lt;/a&gt; パッケージを文字列変換に用いた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; decodeConvertText (&lt;span class="dt"&gt;UTF8&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt;))&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; decodeConvertText (&lt;span class="dt"&gt;UTF8&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;\xc3\x28&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt;))&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;&lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="インスタンスの更新"&gt;インスタンスの更新&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;getUrls&lt;/code&gt; を使ってインスタンスを書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;  getPosts (&lt;span class="dt"&gt;Adventar&lt;/span&gt; url conf) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;    urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getUrls url&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;    mconcat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mapM (getPosts&amp;#39; conf) urls&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;&lt;span class="ot"&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;getPosts&amp;#39; conf url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;  &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getPosts'&lt;/code&gt; は，もともとの &lt;code&gt;getPosts&lt;/code&gt; 関数と同じ実装である． 扱うのが楽になるように，スマートコンストラクタを定義しておく．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="ot"&gt;adventar ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;adventar year &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;  &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;https://adventar.org/calendars?year=&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; year&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;&lt;span class="ot"&gt;mkDriver ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;mkDriver host port &lt;span class="fu"&gt;=&lt;/span&gt; useBrowser chrome &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;  defaultConfig { wdHost &lt;span class="fu"&gt;=&lt;/span&gt; T.unpack host, wdPort &lt;span class="fu"&gt;=&lt;/span&gt; port }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="haskell-の記事か否か"&gt;Haskell の記事か否か&lt;/h4&gt;
&lt;p&gt;分類はカレンダーか記事のタイトルに「Haskell」という単語か含まれるか否かで判断する． 雑だけど，自然言語処理とか良く分からないので勘弁して．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="ot"&gt;isHaskellPost ::&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;isHaskellPost post &lt;span class="fu"&gt;=&lt;/span&gt; any (&lt;span class="st"&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`isInfixOf`&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;  [ post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;  , post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;calendar &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数を使って &lt;code&gt;filter&lt;/code&gt; すれば良い．&lt;/p&gt;
&lt;h4 id="実行"&gt;実行&lt;/h4&gt;
&lt;p&gt;Selenium を &lt;code&gt;localhost:4444&lt;/code&gt; として何らかの方法で起動しておく．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="fu"&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;set &lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dt"&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; fmap (filter isHaskellPost) &lt;span class="fu"&gt;.&lt;/span&gt; getPosts &lt;span class="fu"&gt;$&lt;/span&gt; adventar &lt;span class="st"&gt;&amp;quot;2017&amp;quot;&lt;/span&gt; (mkDriver &lt;span class="st"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt; &lt;span class="dv"&gt;4444&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;get posts on http&lt;span class="fu"&gt;://&lt;/span&gt;adventar&lt;span class="fu"&gt;.&lt;/span&gt;org&lt;span class="fu"&gt;/&lt;/span&gt;&lt;span class="dv"&gt;1111&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;&lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すっごい時間かかるよ(笑)&lt;/p&gt;
&lt;h3 id="qiita"&gt;Qiita&lt;/h3&gt;
&lt;p&gt;やることは基本同じなのでサクッと．&lt;/p&gt;
&lt;h4 id="カレンダーの-url-を集める"&gt;カレンダーの URL を集める&lt;/h4&gt;
&lt;p&gt;Qiita の場合，カレンダーの一覧は複数ページに分かれている(URL は &lt;code&gt;https://qiita.com/advent-calendar/2017/calendars?page=1&lt;/code&gt; って感じ)． 無限リストで試しにカレンダーの一覧を取得し，ひとつも取得できなければ止めるようにする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="ot"&gt;getUrls ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;getUrls _ [] &lt;span class="fu"&gt;=&lt;/span&gt; pure []&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;getUrls url (n&lt;span class="fu"&gt;:&lt;/span&gt;ns) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;  result &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; func n&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; result &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;    [] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; pure result&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;    _  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; mappend result &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getUrls url ns&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;    func index &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;      html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtml &lt;span class="fu"&gt;$&lt;/span&gt; calendarsUrl url index&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;      shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;      return &lt;span class="fu"&gt;$&lt;/span&gt; fromMaybe [] (scrapeHtml calendarUrlsScraper html)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;&lt;span class="ot"&gt;calendarsUrl ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;calendarsUrl url index &lt;span class="fu"&gt;=&lt;/span&gt; mconcat [url, &lt;span class="st"&gt;&amp;quot;?page=&amp;quot;&lt;/span&gt;, pack &lt;span class="fu"&gt;$&lt;/span&gt; show index]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" data-line-number="17"&gt;&lt;span class="ot"&gt;calendarUrlsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" data-line-number="18"&gt;calendarUrlsScraper &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" data-line-number="19"&gt;  chroots (&lt;span class="st"&gt;&amp;quot;table&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;adventCalendarList&amp;quot;&lt;/span&gt;] &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;tbody&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-20" data-line-number="20"&gt;    url &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; attr &lt;span class="st"&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-21" data-line-number="21"&gt;      (&lt;span class="st"&gt;&amp;quot;td&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;adventCalendarList_calendarTitle&amp;quot;&lt;/span&gt;]) &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-22" data-line-number="22"&gt;    return &lt;span class="fu"&gt;$&lt;/span&gt; append &lt;span class="st"&gt;&amp;quot;http://qiita.com&amp;quot;&lt;/span&gt; url&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんかもっといい方法ありそう．&lt;/p&gt;
&lt;h4 id="カレンダーを集める-1"&gt;カレンダーを集める&lt;/h4&gt;
&lt;p&gt;インスタンスを定義しよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;  getPosts (&lt;span class="dt"&gt;Qiita&lt;/span&gt; url) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;    urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getUrls url [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="fu"&gt;..&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;    mconcat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mapM getPosts&amp;#39; urls&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;&lt;span class="ot"&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;getPosts&amp;#39; url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;  html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtml url&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;    posts &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe [] &lt;span class="fu"&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;    calendar&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-14" data-line-number="14"&gt;        &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title &lt;span class="fu"&gt;@=&lt;/span&gt; fromMaybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; (scrapeHtml headerTitleScraper html)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-15" data-line-number="15"&gt;       &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url   &lt;span class="fu"&gt;@=&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-16" data-line-number="16"&gt;       &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-17" data-line-number="17"&gt;  TIO.putStrLn &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-18" data-line-number="18"&gt;  shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-19" data-line-number="19"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; fmap (set &lt;span class="fu"&gt;#&lt;/span&gt;calendar calendar) posts&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-20" data-line-number="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-21" data-line-number="21"&gt;&lt;span class="ot"&gt;postsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-22" data-line-number="22"&gt;postsScraper &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;長いのでスクレイパーは割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Qiita/Scraper.hs"&gt;ココ&lt;/a&gt;にある)． &lt;code&gt;fetchHtml&lt;/code&gt; 関数は ADVENTAR のと同じ．&lt;/p&gt;
&lt;h4 id="記事のタイトルを取得"&gt;記事のタイトルを取得&lt;/h4&gt;
&lt;p&gt;ADVENTAR と違い，Qiita のカレンダーには各記事のタイトルが書いてない． さすがに「なんか書く」で Haskell 記事か否かを判断するのもなぁと思い，どーーーー考えても時間がかかるけど，記事をひとつひとつスクレイピングしてタイトルを取ってくることにした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="ot"&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;getPosts&amp;#39; url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" data-line-number="4"&gt;  TIO.putStrLn &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-5" data-line-number="5"&gt;  shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-6" data-line-number="6"&gt;  mapM updatePostTitle&amp;#39; &lt;span class="fu"&gt;$&lt;/span&gt; set &lt;span class="fu"&gt;#&lt;/span&gt;calendar calendar &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; posts&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-8" data-line-number="8"&gt;&lt;span class="ot"&gt;updatePostTitle ::&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-9" data-line-number="9"&gt;updatePostTitle post &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-10" data-line-number="10"&gt;html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtml&amp;#39; &lt;span class="fu"&gt;$&lt;/span&gt; post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-11" data-line-number="11"&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-12" data-line-number="12"&gt;  title &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe (post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title) &lt;span class="fu"&gt;$&lt;/span&gt; scrapeHtml headerTitleScraper html&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-13" data-line-number="13"&gt;return &lt;span class="fu"&gt;$&lt;/span&gt; post &lt;span class="fu"&gt;&amp;amp;&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title &lt;span class="fu"&gt;.~&lt;/span&gt; title&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-15" data-line-number="15"&gt;&lt;span class="ot"&gt;updatePostTitle&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-16" data-line-number="16"&gt;updatePostTitle&amp;#39; post &lt;span class="fu"&gt;=&lt;/span&gt; shelly (sleep &lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; updatePostTitle post&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;updatePostTitle'&lt;/code&gt; 関数で(1秒だけスリープしつつ)タイトルをスクレイピングして更新している．&lt;/p&gt;
&lt;h4 id="実行してみる"&gt;実行してみる&lt;/h4&gt;
&lt;p&gt;スマートコンストラクタを作って．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="ot"&gt;qiita ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;qiita year &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;  &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; mconcat [&lt;span class="st"&gt;&amp;quot;https://qiita.com/advent-calendar/&amp;quot;&lt;/span&gt;, year, &lt;span class="st"&gt;&amp;quot;/calendars&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;&lt;span class="fu"&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;set &lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dt"&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; fmap (filter isHaskellPost) &lt;span class="fu"&gt;.&lt;/span&gt; getPosts &lt;span class="fu"&gt;$&lt;/span&gt; qiita &lt;span class="st"&gt;&amp;quot;2017&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" data-line-number="4"&gt;&lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;悲しいことに，鬼のように時間がかかるのに…メモリダンプします… まぁわかってたけどね！&lt;/p&gt;
&lt;h3 id="ストリーミング"&gt;ストリーミング&lt;/h3&gt;
&lt;p&gt;こういうパフォーマンス的なことは自分は詳しくない． しかしこういうのはたぶん，要らないデータ(&lt;code&gt;filter&lt;/code&gt; して捨てるデータ)をいつ迄も保持してるのが悪いので(たぶん)，ストリーミングパッケージを使って効率よくリソース管理してもらおう．&lt;/p&gt;
&lt;p&gt;今回は Conduit を使う． 最初は Pipes を使ってみたけど，よくわからなくてやめた．&lt;/p&gt;
&lt;h2 id="section-5"&gt;&lt;/h2&gt;
&lt;p&gt;まずはインターフェースの型クラスを書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb19-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Conduit&lt;/span&gt; (&lt;span class="dt"&gt;Source&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-3" data-line-number="3"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-4" data-line-number="4"&gt;&lt;span class="ot"&gt;  getPosts ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはそれぞれのインスタンスを書き換えるだけ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb20-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-2" data-line-number="2"&gt;  getPosts (&lt;span class="dt"&gt;Adventar&lt;/span&gt; url conf) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-3" data-line-number="3"&gt;    urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class="fu"&gt;$&lt;/span&gt; getUrls url&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-4" data-line-number="4"&gt;    yieldMany urls &lt;span class="fu"&gt;=$=&lt;/span&gt; concatMapMC (getPosts&amp;#39; conf)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb21-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-2" data-line-number="2"&gt;  getPosts (&lt;span class="dt"&gt;Qiita&lt;/span&gt; url) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-3" data-line-number="3"&gt;    urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class="fu"&gt;$&lt;/span&gt; getUrls url [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="fu"&gt;..&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-4" data-line-number="4"&gt;    yieldMany urls &lt;span class="fu"&gt;=$=&lt;/span&gt; concatMapMC getPosts&amp;#39;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使うときは以下のようにすればよい．&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb22-1" data-line-number="1"&gt;&lt;span class="fu"&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-2" data-line-number="2"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;set &lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dt"&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Conduit&lt;/span&gt; (($$), (=$=), sinkList)&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-4" data-line-number="4"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; getPosts (qiita &lt;span class="st"&gt;&amp;quot;2017&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;$=&lt;/span&gt; filterC isHaskellPost &lt;span class="fu"&gt;$$&lt;/span&gt; sinkList&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="json-に書き出す"&gt;JSON に書き出す&lt;/h3&gt;
&lt;p&gt;前にやったものをそのままコピペした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb23"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb23-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Aeson.Encode.Pretty&lt;/span&gt; (encodePrettyToTextBuilder)&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (&lt;span class="dt"&gt;Text&lt;/span&gt;, unpack)&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text.Lazy.Builder&lt;/span&gt; (toLazyText)&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Data.Text.Lazy.IO&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;LT&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-6" data-line-number="6"&gt;&lt;span class="ot"&gt;writeJson ::&lt;/span&gt; &lt;span class="dt"&gt;ToJSON&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-7" data-line-number="7"&gt;writeJson jsonPath &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-8" data-line-number="8"&gt;  &lt;span class="dt"&gt;LT&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;writeFile (unpack jsonPath) &lt;span class="fu"&gt;.&lt;/span&gt; toLazyText &lt;span class="fu"&gt;.&lt;/span&gt; encodePrettyToTextBuilder&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコードの &lt;code&gt;ToJSON&lt;/code&gt; のインスタンス化の部分は割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Aeson.hs"&gt;ココ&lt;/a&gt;にある)．&lt;/p&gt;
&lt;h3 id="コマンド化"&gt;コマンド化&lt;/h3&gt;
&lt;p&gt;CLI のオプション(引数)のパースには optparse-applicative パッケージを使う． スクレイピングには，次のようなオプションの型を考える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb24"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb24-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Fetch&lt;/span&gt; &lt;span class="dt"&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;FetchOptions&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-5" data-line-number="5"&gt;   &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;year&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-6" data-line-number="6"&gt;    , &lt;span class="st"&gt;&amp;quot;qiita&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-7" data-line-number="7"&gt;    , &lt;span class="st"&gt;&amp;quot;adventar&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-8" data-line-number="8"&gt;    , &lt;span class="st"&gt;&amp;quot;wdHost&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-9" data-line-number="9"&gt;    , &lt;span class="st"&gt;&amp;quot;wdPort&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-10" data-line-number="10"&gt;    , &lt;span class="st"&gt;&amp;quot;output&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-11" data-line-number="11"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;year&lt;/code&gt; はスクレイピングして欲しい年． &lt;code&gt;qiita&lt;/code&gt; や &lt;code&gt;adventar&lt;/code&gt; は &lt;code&gt;--qiita&lt;/code&gt; って感じのフラグで，フラグが真のものだけ集めてくる(両方偽の場合は，両方真と同じく両方集める)． &lt;code&gt;wdHost&lt;/code&gt; と &lt;code&gt;wdPort&lt;/code&gt; はヘッドレスブラウザへのオプションで，指定が無ければ &lt;code&gt;localhost:4444&lt;/code&gt; をデフォルト値にする． &lt;code&gt;output&lt;/code&gt; は &lt;code&gt;-o hoge.json&lt;/code&gt; みたいに出力先のファイルを指定する．&lt;/p&gt;
&lt;h2 id="section-6"&gt;&lt;/h2&gt;
&lt;p&gt;例の如く，拡張可能レコードなので，&lt;code&gt;(&amp;lt;@=&amp;gt;)&lt;/code&gt; 演算子を使ってパーサーを組み立てていく．&lt;/p&gt;
&lt;div class="sourceCode" id="cb25"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb25-1" data-line-number="1"&gt;&lt;span class="ot"&gt;cmdParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-2" data-line-number="2"&gt;cmdParser &lt;span class="fu"&gt;=&lt;/span&gt; subparser &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-3" data-line-number="3"&gt;     command &lt;span class="st"&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-4" data-line-number="4"&gt;       (&lt;span class="dt"&gt;Fetch&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; fetchOptsParser &lt;span class="ot"&gt;`withInfo`&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;fetch posts on advent calendar to json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; metavar &lt;span class="st"&gt;&amp;quot;( fetch )&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-6" data-line-number="6"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class="st"&gt;&amp;quot;choice subcommand&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-8" data-line-number="8"&gt;&lt;span class="ot"&gt;fetchOptsParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-9" data-line-number="9"&gt;fetchOptsParser &lt;span class="fu"&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-10" data-line-number="10"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;year     &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; yearParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-11" data-line-number="11"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;qiita    &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; qiitaFlagParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-12" data-line-number="12"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;adventar &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; adventarFlagParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-13" data-line-number="13"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;wdHost   &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; wdHostParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-14" data-line-number="14"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;wdPort   &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; wdPortParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-15" data-line-number="15"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;output   &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; outputParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-16" data-line-number="16"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;細かいやつは割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Options.hs"&gt;ココ&lt;/a&gt;を見て)．&lt;/p&gt;
&lt;h2 id="section-7"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 関数も長いので割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Main.hs"&gt;ココ&lt;/a&gt;を見て)．&lt;/p&gt;
&lt;p&gt;こんな感じに実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack exec -- advent-calendar fetch 2017 --qiita -o &amp;quot;&amp;quot;./out/qiita.json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;スクレイピングの結果は GitHub の&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/tree/f6d6a097c08e741239f576693e3d6b2b7ae21a29/out/2017"&gt;ココ&lt;/a&gt;に置いてある．&lt;/p&gt;
&lt;h3 id="マークダウンに変換"&gt;マークダウンに変換&lt;/h3&gt;
&lt;p&gt;最後にマークダウンへ変換する部分を書く． 次のようなサブコマンドを追加する想定だ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack exec -- advent-calendar markdown &amp;quot;./out/qiita.json&amp;quot; &amp;quot;./out/adventar.json&amp;quot; -o &amp;quot;./out/posts.md&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのために次のような型とパーサーを定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb28"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb28-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Fetch&lt;/span&gt; &lt;span class="dt"&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Markdown&lt;/span&gt; &lt;span class="dt"&gt;MarkdownOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-5" data-line-number="5"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;MarkdownOptions&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-6" data-line-number="6"&gt;   &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;inputs&amp;quot; &amp;gt;: [Text]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-7" data-line-number="7"&gt;    , &lt;span class="st"&gt;&amp;quot;output&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-8" data-line-number="8"&gt;    , &lt;span class="st"&gt;&amp;quot;noCategory&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-9" data-line-number="9"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-11" data-line-number="11"&gt;&lt;span class="ot"&gt;cmdParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-12" data-line-number="12"&gt;cmdParser &lt;span class="fu"&gt;=&lt;/span&gt; subparser &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-13" data-line-number="13"&gt;     command &lt;span class="st"&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-14" data-line-number="14"&gt;       (&lt;span class="dt"&gt;Fetch&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; fetchOptsParser &lt;span class="ot"&gt;`withInfo`&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;fetch posts on advent calendar to json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-15" data-line-number="15"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; command &lt;span class="st"&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-16" data-line-number="16"&gt;       (&lt;span class="dt"&gt;Markdown&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mdOptsParser &lt;span class="ot"&gt;`withInfo`&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;convert markdown from posts json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-17" data-line-number="17"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; metavar &lt;span class="st"&gt;&amp;quot;( fetch | markdown )&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-18" data-line-number="18"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class="st"&gt;&amp;quot;choice subcommand&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-20" data-line-number="20"&gt;&lt;span class="ot"&gt;mdOptsParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;MarkdownOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-21" data-line-number="21"&gt;mdOptsParser &lt;span class="fu"&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-22" data-line-number="22"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;inputs     &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; inputsParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-23" data-line-number="23"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;output     &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; outputParser&amp;#39;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-24" data-line-number="24"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;noCategory &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; noCategoryParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-25" data-line-number="25"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-26" data-line-number="26"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-27" data-line-number="27"&gt;&lt;span class="ot"&gt;inputsParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; [&lt;span class="dt"&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-28" data-line-number="28"&gt;inputsParser &lt;span class="fu"&gt;=&lt;/span&gt; some &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-29" data-line-number="29"&gt;  textArgument (metavar &lt;span class="st"&gt;&amp;quot;inputs&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class="st"&gt;&amp;quot;Input json file paths&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;some&lt;/code&gt; を使うことで，ひとつ以上の入力ファイルのパスを与える部分(&lt;code&gt;markdown &amp;quot;./out/qiita.json&amp;quot; &amp;quot;./out/adventar.json&amp;quot;&lt;/code&gt;)のパーサーを簡単に書ける．&lt;/p&gt;
&lt;h2 id="section-8"&gt;&lt;/h2&gt;
&lt;p&gt;マークダウンへの変換部分はこんな感じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb29"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb29-1" data-line-number="1"&gt;&lt;span class="ot"&gt;toMarkdown ::&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-2" data-line-number="2"&gt;toMarkdown post &lt;span class="fu"&gt;=&lt;/span&gt; mconcat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-3" data-line-number="3"&gt;  [ [ &lt;span class="st"&gt;&amp;quot;**[&amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title, &lt;span class="st"&gt;&amp;quot;](&amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url, &lt;span class="st"&gt;&amp;quot;)**  &amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-4" data-line-number="4"&gt;  , [ &lt;span class="st"&gt;&amp;quot; by &amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;auther&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-5" data-line-number="5"&gt;    , &lt;span class="st"&gt;&amp;quot; on [&amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;calendar &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title, &lt;span class="st"&gt;&amp;quot;](&amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;calendar &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url, &lt;span class="st"&gt;&amp;quot;) &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-6" data-line-number="6"&gt;    , post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;date&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-7" data-line-number="7"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-8" data-line-number="8"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数の結果 &lt;code&gt;[Text]&lt;/code&gt; を &lt;code&gt;unlines&lt;/code&gt; してファイルに書き出せばよい． ちなみに，Haskell-jp のブログは，末尾に空白2つで改行となり，空行で HTML にも空行が入るようになっている．&lt;/p&gt;
&lt;h4 id="出力結果"&gt;出力結果&lt;/h4&gt;
&lt;p&gt;は &lt;a href="https://github.com/haskell-jp/blog/blob/02a2b1c68cd75a15d72eedd3148fc803c103a0b7/preprocessed-site/posts/2017/advent-calendar-2017.md#%E3%83%9D%E3%82%A8%E3%83%A0"&gt;Haskell-jp ブログのソースコード&lt;/a&gt;(もちろん前半部分は手書き)を見ればいいと思うよ．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;結局，&lt;strong&gt;全ての記事を集めてくるのに半日近くかかった(笑)&lt;/strong&gt; 来年は投票機能とか，少しずつ集めたりとかできるといいよね．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-01-29-awesome-hlint.html</id><title type="text">素晴らしき HLint を使いこなす</title><updated>2018-01-29T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-01-29-awesome-hlint.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ndmitchell/hlint"&gt;HLint&lt;/a&gt; は &lt;a href="https://www.stackage.org/package/haskell-src-exts"&gt;haskell-src-exts&lt;/a&gt; を使って実装されている静的解析ツールです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HLint&lt;/code&gt; を使えば &lt;code&gt;github&lt;/code&gt; などを使って &lt;code&gt;PR&lt;/code&gt; ベースで開発する場合のコードレビューでこんな事を言わなくて済みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fromJust&lt;/code&gt; とかの部分関数は使わないで！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maybe&lt;/code&gt; 関数って知ってる？&lt;/li&gt;
&lt;li&gt;この言語拡張って本当に使ってるの？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; まだ残ってるじゃん！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嬉しいことに &lt;code&gt;Travis CI&lt;/code&gt; や &lt;code&gt;CircleCI&lt;/code&gt; などで一度設定するだけなので導入もお手軽です！ また、最近知ったのですが、プロジェクト内で使って欲しくない関数なども &lt;code&gt;HLint&lt;/code&gt; によって検出可能です。&lt;/p&gt;
&lt;p&gt;さらに、独学で &lt;code&gt;Haskell&lt;/code&gt; の学習を進めている人は &lt;code&gt;HLint&lt;/code&gt; が素晴らしい教師役となってくれるでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/waddlaw/blog-example-hlint"&gt;利用したコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2 id="hlint-の参考記事"&gt;HLint の参考記事&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HLint&lt;/code&gt; は割と有名なので日本語の解説記事がいくつかありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/suzuki-hoge/items/6d101e523620178c6f7b"&gt;Haskellの静的解析ツール HLint を使おう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncaq.net/2017/10/07/"&gt;Haskellを書くときはstylish-haskellとhlintを使って労せずして綺麗なコードを書きましょう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/VoQn/items/fe7953aec010d8f68a59"&gt;OverloadedStringsとANNプラグマが干渉する場合の回避方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちゃんと使おうとすると上記の解説記事では少し物足りません。具体的には以下の点が不足しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カスタムヒントの設定方法&lt;/li&gt;
&lt;li&gt;関数の利用制限方法&lt;/li&gt;
&lt;li&gt;関数・モジュール・ファイル単位でヒントを無視する方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CI&lt;/code&gt; で利用するための設定方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本記事では、これらの内容について解説を行います。&lt;code&gt;HLint&lt;/code&gt; でどんなことが出来るかについては、上記の記事または&lt;a href="https://github.com/ndmitchell/hlint"&gt;公式リポジトリ&lt;/a&gt;をご参考ください。&lt;/p&gt;
&lt;p&gt;また、内部の仕組みについては、作者の &lt;code&gt;Neil Mitchell&lt;/code&gt; さんの解説記事が参考になります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/rounddelta/items/4584f5486c1061c93f0b"&gt;HLint のルールを理解する (和訳)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="hlint-の導入"&gt;HLint の導入&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HLint&lt;/code&gt; は以下のコマンドで簡単に導入できます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack install hlint

$ hlint --version
HLint v2.0.15, (C) Neil Mitchell 2006-2018&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現在の最新版は &lt;code&gt;v2.0.15&lt;/code&gt; となっています。&lt;code&gt;HLint&lt;/code&gt; のバージョンによって出力内容が異なることが良くありますのでご注意ください。&lt;/p&gt;
&lt;p&gt;また、お試しで使ってみたい人は以下のコマンドを実行してみましょう。カレントディレクトリ以下のファイルが検査されます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ curl -sL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s .&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="hlint-の実行方法"&gt;HLint の実行方法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HLint&lt;/code&gt; はディレクトリを指定すると再帰的に解析を行ってくれます。&lt;/p&gt;
&lt;h3 id="プロジェクト全体に対して再帰的に実行"&gt;プロジェクト全体に対して再帰的に実行&lt;/h3&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="特定のディレクトリ-src-に対して再帰的に実行"&gt;特定のディレクトリ (src) に対して再帰的に実行&lt;/h3&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint src&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="複数のディレクトリ-src-test-に対して再帰的に実行"&gt;複数のディレクトリ (src, test) に対して再帰的に実行&lt;/h3&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint src test&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="単一のファイル-appmain.hs-にのみ実行"&gt;単一のファイル (app/Main.hs) にのみ実行&lt;/h3&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint app/Main.hs&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="hlint-のヒント"&gt;HLint のヒント&lt;/h2&gt;
&lt;p&gt;以下のように &lt;code&gt;stack new&lt;/code&gt; で新規プロジェクトを作ってすぐの状態では &lt;code&gt;HLint&lt;/code&gt; は何もヒントを出してくれません。&lt;/p&gt;
&lt;p&gt;つまり、とても良い状態ということです。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stacke new test-proj
$ cd test-proj

$ hlint .
No hints&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで、ファイルを少し修正して &lt;code&gt;HLint&lt;/code&gt; に働いてもらいましょう！&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Lib.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Lib&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;&lt;span class="ot"&gt;someFunc ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;someFunc &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt; x1 &lt;span class="fu"&gt;=&lt;/span&gt; concat (map toUpper [&lt;span class="ch"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="fu"&gt;..&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;      x2 &lt;span class="fu"&gt;=&lt;/span&gt; maybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; id &lt;span class="st"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;  putStrLn &lt;span class="st"&gt;&amp;quot;someFunc&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のコードは以下のようなヒントを2つ提案してくれます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
./src/Lib.hs:7:12: Warning: Use concatMap
Found:
  concat (map toUpper [&amp;#39;a&amp;#39; .. &amp;#39;z&amp;#39;])
Why not:
  concatMap toUpper [&amp;#39;a&amp;#39; .. &amp;#39;z&amp;#39;]

./src/Lib.hs:8:12: Warning: Use fromMaybe
Found:
  maybe &amp;quot;&amp;quot; id
Why not:
  Data.Maybe.fromMaybe &amp;quot;&amp;quot;

2 hints&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは、このような意味になります。&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="co"&gt;# 1つ目のヒント&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;ヒントレベル:&lt;/span&gt;&lt;span class="at"&gt; 警告&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;ヒント:&lt;/span&gt;&lt;span class="at"&gt; Use concatMap&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;出力の意味:&lt;/span&gt;&lt;span class="at"&gt; concat (map toUpper [&amp;#39;a&amp;#39; .. &amp;#39;z&amp;#39;]) を見つけたけど、どうして concatMap toUpper [&amp;#39;a&amp;#39; .. &amp;#39;z&amp;#39;] と書かないんだい？&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;&lt;span class="co"&gt;# 2つ目のヒント&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;ヒントレベル:&lt;/span&gt;&lt;span class="at"&gt; 警告&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;ヒント:&lt;/span&gt;&lt;span class="at"&gt; Use fromMaybe&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;出力の意味:&lt;/span&gt;&lt;span class="at"&gt; maybe &amp;quot;&amp;quot; id は Data.Maybe モジュールにある fromMaybe 関数を使えば fromMaybe &amp;quot;&amp;quot; と同じですよ&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;素晴らしいですね。とてもわかりやすいです。また、&lt;code&gt;--report&lt;/code&gt; オプションを利用することで結果を &lt;code&gt;HTML&lt;/code&gt; として出力することも可能です。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint . --report&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とても素晴らしいのですが、&lt;code&gt;HLint&lt;/code&gt; の提案するヒントに賛成できない時はどうしましょう? もし &lt;code&gt;HLint&lt;/code&gt; の言うとおりにしかできないのであれば、とても使いづらいツールになってしまいます。&lt;/p&gt;
&lt;p&gt;そういった場合のためにルールを無視する方法も用意されています。また、プロジェクト固有のカスタムヒントについても同様に設定方法が用意されています。&lt;/p&gt;
&lt;h2 id="hlint-のヒントについて"&gt;HLint のヒントについて&lt;/h2&gt;
&lt;p&gt;デフォルトで適用されるヒントの一覧は &lt;a href="https://github.com/ndmitchell/hlint/blob/master/data/hlint.yaml"&gt;hlint.yaml&lt;/a&gt; で確認できます。この中に無いヒントについては、自分でカスタムヒントを追加して対応することになります。&lt;/p&gt;
&lt;h3 id="カスタムヒントファイルの生成"&gt;カスタムヒントファイルの生成&lt;/h3&gt;
&lt;p&gt;まずは、カスタムヒントファイルの雛形を生成するために、プロジェクトのルートで以下のコマンドを実行しましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint --default &amp;gt; .hlint.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;中身はこんな感じで、ヒントの書き方について具体例が載っています。&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="co"&gt;# HLint configuration file&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;span class="co"&gt;# https://github.com/ndmitchell/hlint&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;span class="co"&gt;##########################&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;&lt;span class="co"&gt;# This file contains a template configuration file, which is typically&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;&lt;span class="co"&gt;# placed as .hlint.yaml in the root of your project&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-9" data-line-number="9"&gt;&lt;span class="co"&gt;# Specify additional command line arguments&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-10" data-line-number="10"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-11" data-line-number="11"&gt;&lt;span class="co"&gt;# - arguments: [--color, --cpp-simple, -XQuasiQuotes]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-14" data-line-number="14"&gt;&lt;span class="co"&gt;# Control which extensions/flags/modules/functions can be used&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-15" data-line-number="15"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-16" data-line-number="16"&gt;&lt;span class="co"&gt;# - extensions:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-17" data-line-number="17"&gt;&lt;span class="co"&gt;#   - default: false # all extension are banned by default&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-18" data-line-number="18"&gt;&lt;span class="co"&gt;#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-19" data-line-number="19"&gt;&lt;span class="co"&gt;#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-20" data-line-number="20"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-21" data-line-number="21"&gt;&lt;span class="co"&gt;# - flags:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-22" data-line-number="22"&gt;&lt;span class="co"&gt;#   - {name: -w, within: []} # -w is allowed nowhere&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-23" data-line-number="23"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-24" data-line-number="24"&gt;&lt;span class="co"&gt;# - modules:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-25" data-line-number="25"&gt;&lt;span class="co"&gt;#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as &amp;#39;Set&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-26" data-line-number="26"&gt;&lt;span class="co"&gt;#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-27" data-line-number="27"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-28" data-line-number="28"&gt;&lt;span class="co"&gt;# - functions:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-29" data-line-number="29"&gt;&lt;span class="co"&gt;#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-30" data-line-number="30"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-31" data-line-number="31"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-32" data-line-number="32"&gt;&lt;span class="co"&gt;# Add custom hints for this project&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-33" data-line-number="33"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-34" data-line-number="34"&gt;&lt;span class="co"&gt;# Will suggest replacing &amp;quot;wibbleMany [myvar]&amp;quot; with &amp;quot;wibbleOne myvar&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-35" data-line-number="35"&gt;&lt;span class="co"&gt;# - error: {lhs: &amp;quot;wibbleMany [x]&amp;quot;, rhs: wibbleOne x}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-36" data-line-number="36"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-37" data-line-number="37"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-38" data-line-number="38"&gt;&lt;span class="co"&gt;# Turn on hints that are off by default&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-39" data-line-number="39"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-40" data-line-number="40"&gt;&lt;span class="co"&gt;# Ban &amp;quot;module X(module X) where&amp;quot;, to require a real export list&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-41" data-line-number="41"&gt;&lt;span class="co"&gt;# - warn: {name: Use explicit module export list}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-42" data-line-number="42"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-43" data-line-number="43"&gt;&lt;span class="co"&gt;# Replace a $ b $ c with a . b $ c&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-44" data-line-number="44"&gt;&lt;span class="co"&gt;# - group: {name: dollar, enabled: true}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-45" data-line-number="45"&gt;&lt;span class="co"&gt;#&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-46" data-line-number="46"&gt;&lt;span class="co"&gt;# Generalise map to fmap, ++ to &amp;lt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-47" data-line-number="47"&gt;&lt;span class="co"&gt;# - group: {name: generalise, enabled: true}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-48" data-line-number="48"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-49" data-line-number="49"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-50" data-line-number="50"&gt;&lt;span class="co"&gt;# Ignore some builtin hints&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-51" data-line-number="51"&gt;&lt;span class="co"&gt;# - ignore: {name: Use let}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-52" data-line-number="52"&gt;&lt;span class="co"&gt;# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-53" data-line-number="53"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-54" data-line-number="54"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-55" data-line-number="55"&gt;&lt;span class="co"&gt;# Define some custom infix operators&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-56" data-line-number="56"&gt;&lt;span class="co"&gt;# - fixity: infixr 3 ~^#^~&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-57" data-line-number="57"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-58" data-line-number="58"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-59" data-line-number="59"&gt;&lt;span class="co"&gt;# To generate a suitable file for HLint do:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-60" data-line-number="60"&gt;&lt;span class="co"&gt;# $ hlint --default &amp;gt; .hlint.yaml&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;HLint&lt;/code&gt; はデフォルトヒントが記述されている &lt;code&gt;hlint.yaml&lt;/code&gt; と、カスタムヒントが記述されている &lt;code&gt;.hlint.yaml&lt;/code&gt; の両方のヒント使って検査を行うため、プロジェクト固有のヒントについては、&lt;code&gt;.hlint.yaml&lt;/code&gt; に記述していくことになります。&lt;/p&gt;
&lt;h3 id="カスタムヒントの追加"&gt;カスタムヒントの追加&lt;/h3&gt;
&lt;p&gt;ここでは説明のため以下のような &lt;code&gt;tshow&lt;/code&gt; という関数があるとしましょう。この関数は &lt;code&gt;show :: Show a =&amp;gt; a -&amp;gt; String&lt;/code&gt; の &lt;code&gt;Text&lt;/code&gt; バージョンです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (pack)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;&lt;span class="ot"&gt;tshow ::&lt;/span&gt; &lt;span class="dt"&gt;Show&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;tshow &lt;span class="fu"&gt;=&lt;/span&gt; pack &lt;span class="fu"&gt;.&lt;/span&gt; show&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;目的としてはプロジェクトのコード中で &lt;code&gt;pack . show&lt;/code&gt; となっている部分を &lt;code&gt;tshow&lt;/code&gt; に直すようにヒントを出させることです。まだヒントを追加していないため、当然ながら現時点では &lt;code&gt;pack . show&lt;/code&gt; というコードが使われていたとしても何も起こりません。&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Lib.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Lib&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (pack)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;&lt;span class="ot"&gt;intToText ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;intToText &lt;span class="fu"&gt;=&lt;/span&gt; pack &lt;span class="fu"&gt;.&lt;/span&gt; show&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
No hints&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;それでは &lt;code&gt;.hlint.yaml&lt;/code&gt; に &lt;code&gt;tshow = pack . show&lt;/code&gt; を検出するためのヒントを追記しましょう。以下の1行を追記するだけです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;error:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;{&lt;/span&gt;&lt;span class="fu"&gt;lhs:&lt;/span&gt;&lt;span class="at"&gt; pack (show x)&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;rhs:&lt;/span&gt;&lt;span class="at"&gt; tshow x&lt;/span&gt;&lt;span class="kw"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lhs&lt;/code&gt;, &lt;code&gt;rhs&lt;/code&gt; はそれぞれ &lt;code&gt;Left Hand Side (左辺)&lt;/code&gt;, &lt;code&gt;Right Hand Side (右辺)&lt;/code&gt; の略です。またヒントのレベルは &lt;code&gt;error&lt;/code&gt; 以外にも &lt;code&gt;warm&lt;/code&gt;, &lt;code&gt;suggest (hint キーワードはただのエイリアスです)&lt;/code&gt; も指定できるため、好きなレベルを指定しましょう。(ヒントレベルの使い分けについては &lt;a href="https://github.com/ndmitchell/hlint#what-is-the-difference-between-errorwarningsuggestion"&gt;What is the difference between error/warning/suggestion?&lt;/a&gt; をご参照ください)&lt;/p&gt;
&lt;p&gt;では、実行してみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
./src/Lib.hs:14:13: Error: Use tshow
Found:
  pack . show
Why not:
  tshow

1 hint&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;無事に &lt;code&gt;Error&lt;/code&gt; として &lt;code&gt;tshow&lt;/code&gt; のためのヒントが表示されました！&lt;/p&gt;
&lt;p&gt;ヒントの修正方法は、先程定義した &lt;code&gt;intToText&lt;/code&gt; 関数の実装をヒント通りに書き換えるだけです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb19-1" data-line-number="1"&gt;&lt;span class="ot"&gt;intToText ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-2" data-line-number="2"&gt;intToText &lt;span class="fu"&gt;=&lt;/span&gt; tshow&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
No hints&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="ヒントの定義方法について"&gt;ヒントの定義方法について&lt;/h3&gt;
&lt;p&gt;さきほど定義したヒントはこのようにポイントフリー形式で書くこともできます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb21-1" data-line-number="1"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;error:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;{&lt;/span&gt;&lt;span class="fu"&gt;lhs:&lt;/span&gt;&lt;span class="at"&gt; pack . show&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;rhs:&lt;/span&gt;&lt;span class="at"&gt; tshow&lt;/span&gt;&lt;span class="kw"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のヒント形式で次の内容を解析してみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb22-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Lib.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Lib&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (pack)&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-6" data-line-number="6"&gt;&lt;span class="ot"&gt;intToText ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-7" data-line-number="7"&gt;intToText &lt;span class="fu"&gt;=&lt;/span&gt; pack &lt;span class="fu"&gt;.&lt;/span&gt; show&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-9" data-line-number="9"&gt;&lt;span class="ot"&gt;intToText2  ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-10" data-line-number="10"&gt;intToText2 x &lt;span class="fu"&gt;=&lt;/span&gt; pack &lt;span class="fu"&gt;$&lt;/span&gt; show x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
./src/Lib.hs:6:13: Error: Use tshow
Found:
  pack . show
Why not:
  tshow

1 hint&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;intToText&lt;/code&gt; と &lt;code&gt;intToText2&lt;/code&gt; どちらも検出して欲しいですが &lt;code&gt;intToText&lt;/code&gt; しか検出できていません。&lt;code&gt;HLint&lt;/code&gt; では自動的に η-簡約 (eta-reduction) が行われるため &lt;code&gt;error: {lhs: pack (show x), rhs: tshow x}&lt;/code&gt; というように定義しておいた方が良いです。&lt;/p&gt;
&lt;h2 id="プロジェクトで利用を禁止している関数を検出する"&gt;プロジェクトで利用を禁止している関数を検出する&lt;/h2&gt;
&lt;p&gt;プロジェクト内で部分関数 (例: &lt;code&gt;fromJust&lt;/code&gt;) を使わせないようにさせたり、&lt;code&gt;undefined&lt;/code&gt; が残っていないかなどのチェックをレビュー時に人間が行っていたりしませんか？&lt;/p&gt;
&lt;p&gt;人間が介入するということは必ずミスが起こります。人間が気をつければミスは起こらないと思っていたり、精神力でなんとかしようとしている場合は能力不足を疑われても仕方がありません。&lt;/p&gt;
&lt;p&gt;また、そのようなつまらない間違い探しのような非クリエイティブな作業に大切な時間を割いてしまうのはとても良くないことです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HLint&lt;/code&gt; を使えば、そのような関数を検出することが可能です。実際には &lt;code&gt;関数&lt;/code&gt; だけでなく &lt;code&gt;言語拡張&lt;/code&gt;, &lt;code&gt;フラグ&lt;/code&gt;, &lt;code&gt;モジュール&lt;/code&gt; も指定することができます。&lt;/p&gt;
&lt;h3 id="関数を指定する方法"&gt;関数を指定する方法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.hlint.yaml&lt;/code&gt; に以下の内容を追記します。今回は &lt;code&gt;undefined&lt;/code&gt; を検出してみたいと思います。&lt;/p&gt;
&lt;div class="sourceCode" id="cb24"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb24-1" data-line-number="1"&gt;&lt;span class="co"&gt;# .hlint.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;functions:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="kw"&gt;{&lt;/span&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; undefined&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;within:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[]}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現状はどこにも使われていないためヒントは表示されません。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
No hints&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;では、以下の関数を追加してみましょう。このように型レベルで設計して、実装を &lt;code&gt;undefined&lt;/code&gt; にしておくことは良くあります。&lt;/p&gt;
&lt;div class="sourceCode" id="cb26"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb26-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Lib.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb26-2" data-line-number="2"&gt;&lt;span class="ot"&gt;doubleToText ::&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb26-3" data-line-number="3"&gt;doubleToText &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;忘れずに実装してしまえば問題無いのですが、たまには忘れることもあります。しかし、&lt;code&gt;HLint&lt;/code&gt; があれば安心です。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
./src/Lib.hs:18:16: Warning: Avoid restricted function
Found:
  undefined
Note: may break the code

1 hint&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Lib&lt;/code&gt; モジュールのみを検査対象とする場合は &lt;code&gt;within&lt;/code&gt; キーワードを次のようにします。&lt;/p&gt;
&lt;div class="sourceCode" id="cb28"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb28-1" data-line-number="1"&gt;&lt;span class="co"&gt;# .hlint.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;functions:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="kw"&gt;{&lt;/span&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; undefined&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;within:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;Lib&lt;span class="kw"&gt;]}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="hlint-のヒントを無視する方法"&gt;HLint のヒントを無視する方法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HLint&lt;/code&gt; のヒントを無視する方法には以下の2種類があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.hlint.yaml&lt;/code&gt; ファイルで指定する (&lt;strong&gt;全てのファイル&lt;/strong&gt;に影響)&lt;/li&gt;
&lt;li&gt;ファイルに直接 &lt;code&gt;{-# ANN -#}&lt;/code&gt; アノテーションを記述する (&lt;strong&gt;アノテーションの範囲&lt;/strong&gt;にのみ影響)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;書式がちょっとわかりづらいので、実際に色々試してみましょう。&lt;/p&gt;
&lt;h3 id="関数単位で全てのヒントを無視する"&gt;関数単位で全てのヒントを無視する&lt;/h3&gt;
&lt;p&gt;最初に定義した &lt;code&gt;someFunc&lt;/code&gt; 関数はヒントを2つ提案してくれていました。&lt;/p&gt;
&lt;div class="sourceCode" id="cb29"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb29-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Lib.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Lib&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-4" data-line-number="4"&gt;&lt;span class="ot"&gt;someFunc ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-5" data-line-number="5"&gt;someFunc &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-6" data-line-number="6"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt; x1 &lt;span class="fu"&gt;=&lt;/span&gt; concat (map toUpper [&lt;span class="ch"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="fu"&gt;..&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-7" data-line-number="7"&gt;      x2 &lt;span class="fu"&gt;=&lt;/span&gt; maybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; id &lt;span class="st"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-8" data-line-number="8"&gt;  putStrLn &lt;span class="st"&gt;&amp;quot;someFunc&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
./src/Lib.hs:6:12: Warning: Use concatMap
Found:
  concat (map toUpper [&amp;#39;a&amp;#39; .. &amp;#39;z&amp;#39;])
Why not:
  concatMap toUpper [&amp;#39;a&amp;#39; .. &amp;#39;z&amp;#39;]

./src/Lib.hs:7:12: Warning: Use fromMaybe
Found:
  maybe &amp;quot;&amp;quot; id
Why not:
  Data.Maybe.fromMaybe &amp;quot;&amp;quot;

2 hints&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提案されているヒントは以下の2つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Warning: &lt;code&gt;Use concatMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Warning: &lt;code&gt;Use fromMaybe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とりあえず &lt;code&gt;someFunc&lt;/code&gt; のヒントを全て無視するようにしてしまいましょう。&lt;/p&gt;
&lt;p&gt;こんな感じで &lt;code&gt;{-# ANN someFunc &amp;quot;HLint: ignore&amp;quot; #-}&lt;/code&gt; というアノテーションをつけます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb31"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb31-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Lib.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb31-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Lib&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb31-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb31-4" data-line-number="4"&gt;&lt;span class="ot"&gt;{-# ANN someFunc &amp;quot;HLint: ignore&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb31-5" data-line-number="5"&gt;&lt;span class="ot"&gt;someFunc ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb31-6" data-line-number="6"&gt;someFunc &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb31-7" data-line-number="7"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt; x1 &lt;span class="fu"&gt;=&lt;/span&gt; concat (map toUpper [&lt;span class="ch"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="fu"&gt;..&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class="sourceLine" id="cb31-8" data-line-number="8"&gt;      x2 &lt;span class="fu"&gt;=&lt;/span&gt; maybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; id &lt;span class="st"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb31-9" data-line-number="9"&gt;  putStrLn &lt;span class="st"&gt;&amp;quot;someFunc&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ hlint .
No hints&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで &lt;code&gt;src/Lib.hs&lt;/code&gt; に記述されている &lt;code&gt;someFunc&lt;/code&gt; 関数のみ &lt;code&gt;HLint&lt;/code&gt; のヒントを無視できるようになりました。&lt;/p&gt;
&lt;h3 id="ヒントを無視する様々な方法"&gt;ヒントを無視する様々な方法&lt;/h3&gt;
&lt;p&gt;ヒントレベルは &lt;code&gt;ignore&lt;/code&gt; 以外にも &lt;code&gt;suggest&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; が利用可能です。これらの値を利用した場合は出力時のヒントレベルが強制的にそのレベルに上書きされます。つまり、ヒントファイルに &lt;code&gt;warn&lt;/code&gt; で定義されていたとしても &lt;code&gt;error&lt;/code&gt; や &lt;code&gt;ignore&lt;/code&gt; として処理されることになります。&lt;/p&gt;
&lt;h4 id="関数単位で全てのヒントを無視する方法"&gt;関数単位で全てのヒントを無視する方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ANN&lt;/code&gt; のあとに対象の関数名を書きます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb33"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb33-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# ANN someFunc &amp;quot;HLint: ignore&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="関数単位で特定のヒントのみを無視する方法"&gt;関数単位で特定のヒントのみを無視する方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;HLint: ignore&lt;/code&gt; の後にヒント名を書きます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb34"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb34-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# ANN someFunc &amp;quot;HLint: ignore Use fromMaybe&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb34-2" data-line-number="2"&gt;&lt;span class="ot"&gt;{-# ANN someFunc &amp;quot;HLint: ignore Use concatMap&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="モジュール単位で無視する方法"&gt;モジュール単位で無視する方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;module&lt;/code&gt; キーワードを使う場合はアノテーションを &lt;code&gt;import&lt;/code&gt; 文の後に設置しないと上手く動かないので、その点のみ注意が必要です。&lt;/p&gt;
&lt;div class="sourceCode" id="cb35"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb35-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# ANN module &amp;quot;HLint: ignore&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb35-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb35-3" data-line-number="3"&gt;&lt;span class="ot"&gt;{-# ANN module &amp;quot;HLint: ignore Use fromMaybe&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb35-4" data-line-number="4"&gt;&lt;span class="ot"&gt;{-# ANN module &amp;quot;HLint: ignore Use concatMap&amp;quot; #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="overloadedstrings-言語拡張"&gt;OverloadedStrings 言語拡張&lt;/h3&gt;
&lt;p&gt;言語拡張の &lt;code&gt;OverloadedStrings&lt;/code&gt; を有効化している場合は上手く動かないため、明示的に &lt;code&gt;String&lt;/code&gt; の型注釈を指定する必要があります。&lt;/p&gt;
&lt;div class="sourceCode" id="cb36"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb36-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# ANN someFunc (&amp;quot;HLint: ignore&amp;quot; :: String) #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ヒントファイルを使って無視する方法"&gt;ヒントファイルを使って無視する方法&lt;/h3&gt;
&lt;p&gt;プロジェクト全体で無視したいヒントについては &lt;code&gt;.hint.yaml&lt;/code&gt; に追記します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb37"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb37-1" data-line-number="1"&gt;&lt;span class="co"&gt;# .hint.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb37-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;ignore:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;{&lt;/span&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; Use fromMaybe&lt;/span&gt;&lt;span class="kw"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb37-3" data-line-number="3"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;ignore:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;{&lt;/span&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; Use concatMap&lt;/span&gt;&lt;span class="kw"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;within&lt;/code&gt; キーワードでヒントを適用するモジュールを指定できます。&lt;/p&gt;
&lt;p&gt;例として &lt;code&gt;Lib&lt;/code&gt; モジュールのみを対象とする場合は次のようになります。(この場合は &lt;code&gt;ignore&lt;/code&gt; が指定されているので &lt;code&gt;Lib&lt;/code&gt; モジュールのみヒントを無視します)&lt;/p&gt;
&lt;div class="sourceCode" id="cb38"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb38-1" data-line-number="1"&gt;&lt;span class="co"&gt;# .hlint.yaml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb38-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;ignore:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;{&lt;/span&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; Use fromMaybe&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;within:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;Lib&lt;span class="kw"&gt;]}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb38-3" data-line-number="3"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;ignore:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;{&lt;/span&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; Use concatMap&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;within:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;Lib&lt;span class="kw"&gt;]}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ci-を回す"&gt;CI を回す！&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Haskell&lt;/code&gt; のプロジェクトでよく見る &lt;code&gt;CI&lt;/code&gt; ツールといえば以下の2つでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://circleci.com/"&gt;CircleCI 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人的には以下の点で &lt;code&gt;CircleCI&lt;/code&gt; が好きです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プライベートリポジトリも無料で使える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;docker-compose&lt;/code&gt; と親和性が高い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでは &lt;code&gt;HLint&lt;/code&gt; の内容にしか言及しませんが、機会があれば &lt;code&gt;CI&lt;/code&gt; については別途記事にしたいと思います。&lt;/p&gt;
&lt;h3 id="travis-ci"&gt;Travis CI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt; に以下の内容を記述するだけです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb39"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb39-1" data-line-number="1"&gt;&lt;span class="co"&gt;# .travis.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb39-2" data-line-number="2"&gt;&lt;span class="fu"&gt;sudo:&lt;/span&gt;&lt;span class="at"&gt; false&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb39-3" data-line-number="3"&gt;&lt;span class="fu"&gt;language:&lt;/span&gt;&lt;span class="at"&gt; generic&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb39-4" data-line-number="4"&gt;&lt;span class="fu"&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb39-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb39-6" data-line-number="6"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; Run hlint&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb39-7" data-line-number="7"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; curl -sL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s .&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="circleci-2.0"&gt;CircleCI 2.0&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.circleci/config.yml&lt;/code&gt; に以下の内容を記述するだけです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb40"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb40-1" data-line-number="1"&gt;&lt;span class="fu"&gt;version:&lt;/span&gt;&lt;span class="at"&gt; 2&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-2" data-line-number="2"&gt;&lt;span class="fu"&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;hlint:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-4" data-line-number="4"&gt;    &lt;span class="fu"&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-5" data-line-number="5"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; ubuntu:16.04&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-6" data-line-number="6"&gt;    &lt;span class="fu"&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-7" data-line-number="7"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; checkout&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-8" data-line-number="8"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;run:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-9" data-line-number="9"&gt;          &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; Run hlint&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-10" data-line-number="10"&gt;          &lt;span class="fu"&gt;command:&lt;/span&gt;&lt;span class="at"&gt; |&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-11" data-line-number="11"&gt;            apt update&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-12" data-line-number="12"&gt;            apt install -y curl&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-13" data-line-number="13"&gt;            &lt;span class="fu"&gt;curl -sL https:&lt;/span&gt;&lt;span class="at"&gt;//raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s .&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-14" data-line-number="14"&gt;&lt;span class="fu"&gt;workflows:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-15" data-line-number="15"&gt;  &lt;span class="fu"&gt;version:&lt;/span&gt;&lt;span class="at"&gt; 2&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-16" data-line-number="16"&gt;  &lt;span class="fu"&gt;hlint:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-17" data-line-number="17"&gt;    &lt;span class="fu"&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb40-18" data-line-number="18"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; hlint&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回は紹介していませんが &lt;code&gt;HLint&lt;/code&gt; のヒントを自動的に適用してくれる &lt;a href="https://github.com/mpickering/apply-refact"&gt;apply-refact&lt;/a&gt; というツールもあります。使い方については各種ドキュメントをご確認ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ndmitchell/hlint#automatically-applying-hints"&gt;Automatically Applying Hints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は &lt;code&gt;Haskell&lt;/code&gt; の静的解析ツール &lt;code&gt;HLint&lt;/code&gt; について説明を行いました。需要があれば &lt;code&gt;LiquidHaskell&lt;/code&gt; などの他の静的解析ツールについても、チュートリアル的な解説記事を書いていきたいところです。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-01-27-Upcoming-Yesod-breaking-changes.html</id><title type="text">Yesod の破壊的変更予定</title><updated>2018-01-27T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-01-27-Upcoming-Yesod-breaking-changes.html"/><summary type="html">&lt;p&gt;Original post: &lt;a href="https://www.yesodweb.com/blog/2018/01/upcoming-yesod-breaking-changes"&gt;Upcoming Yesod breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2018年 1月 11日 Michael Snoyman&lt;/p&gt;
&lt;p&gt;私が作ったライブラリの破壊的変更点について話をしてきましたが、Yesod をその変更から取り残したくはありませんでした。yesod-core は 2014年からバージョン1.4 で安定しています。しかし、私のパッケージエコシステムにおける &lt;code&gt;MonadUnliftIO&lt;/code&gt; の変更は Yesod にも影響してくるでしょう。問題は、どの程度かということです。&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;知らない人のために補足しておくと、&lt;code&gt;MonadUnliftIO&lt;/code&gt; は &lt;code&gt;monad-control&lt;/code&gt; と &lt;code&gt;exceptions&lt;/code&gt; にそれぞれ存在する &lt;code&gt;MonadBaseControl&lt;/code&gt; と &lt;code&gt;MonadCatch/MonadMask&lt;/code&gt; クラスの代替となる型クラスです。私はこれまでこの新しいアプローチのメリットを至る所で言及してきましたが、おそらく一番良い資料は&lt;a href="https://www.fpcomplete.com/blog/2017/07/announcing-new-unliftio-library"&gt;リリースアナウンスのブログ記事&lt;/a&gt;でしょう。&lt;/p&gt;
&lt;p&gt;予定されている Yesod の変更点を簡潔に述べると:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WidgetT&lt;/code&gt; の内部表現を変更する。現在は &lt;code&gt;WriterT&lt;/code&gt; として実装されているので変更が必要です。&lt;code&gt;MonadUnliftIO&lt;/code&gt; とマッチさせるために、&lt;code&gt;IORef&lt;/code&gt; を持つ &lt;code&gt;ReaderT&lt;/code&gt; にする必要があります。この変更は内部モジュールにしか影響しないため、私の想像ではかなり小さな変更になります (非破壊的変更と言い換えることもできる)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MonadBaseControl&lt;/code&gt; と &lt;code&gt;MonadCatch/MonadMask&lt;/code&gt; のインスタンスを削除する。これは厳密には必要ないですが、2つのアドバンテージがあります: 依存関係の数を少なくし、&lt;code&gt;HandlerT&lt;/code&gt; の上に &lt;code&gt;StateT&lt;/code&gt; を乗せた状態で &lt;code&gt;concurrently&lt;/code&gt; を使うような危険な振る舞いを避けることができます。&lt;/li&gt;
&lt;li&gt;依存しているライブラリを、変更後の新しいバージョンに切り替える。特に conduit や resourcet など。これも厳密には破壊的変更ではないですが、私は依存関係のメジャーバージョンへのサポートを打ち切ることを半破壊的変更だと捉えています。&lt;/li&gt;
&lt;li&gt;破壊的変更に伴う、いくつもの小さなお片付け。いくつかの場所に正格化のためのアノテーションを追加するとか、死んでいる &lt;code&gt;GoogleEmail&lt;/code&gt; や &lt;code&gt;BrowserId&lt;/code&gt; 等のモジュールの削除などです。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは完全に筋の通った変更で、Yesod 1.5 (2.0) としてリリースします。私が実験しているもう少し大きな変更があるので、それをここで共有しておきます。この変更が Yesod のユーザーにとって価値があるかどうか、フィードバックをお願いしたいです。&lt;/p&gt;
&lt;h2 id="トランスフォーマーから離れろ"&gt;トランスフォーマーから離れろ!&lt;/h2&gt;
&lt;p&gt;以下の説明は、こういう議論ではいつもそうであるように、仕方なく &lt;code&gt;IO&lt;/code&gt; に入れなければならないコードについて言及したものです。純粋なコードは今回はパスです。&lt;/p&gt;
&lt;p&gt;(実際の変更よりも大きく見えますが) 変更は &lt;a href="https://github.com/yesodweb/yesod/pull/1466"&gt;no-transformer ブランチ&lt;/a&gt; で確認できます。まぁすぐに嘘だと分かると思いますが、意図を正確に表しています。ここ 1年間のブログ記事の雰囲気と推奨しているベストプラクティスについての私の議論を見れば、次の簡単な主張に帰結します: モダンな Haskell はモナドトランスフォーマーを使いすぎなのです&lt;/p&gt;
&lt;p&gt;この主張に対して最も過激な反応をするなら、全てのトランスフォーマーを削除し、全てのコードを &lt;code&gt;IO&lt;/code&gt; に入れる、というものになります。私はちょっと妥協して、reader の機能は残す価値があると判断しました。なぜなら、&lt;code&gt;logInfo&lt;/code&gt; のような単純な関数に何かを追加で渡すのは、かなりの苦痛だからです。Yesod の核となっている型は &lt;code&gt;HandlerT&lt;/code&gt; で、&lt;code&gt;getHomeR :: HandlerT App IO Html&lt;/code&gt; のように使われます。内部では、&lt;code&gt;HandlerT&lt;/code&gt; は以下のようになっています:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;HandlerT&lt;/span&gt; site m a &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;HandlerT&lt;/span&gt; (&lt;span class="dt"&gt;HandlerData&lt;/span&gt; site &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単な質問をしましょう: &lt;code&gt;HandlerT&lt;/code&gt; は本当にトランスフォーマーである必要があるのでしょうか?&lt;/p&gt;
&lt;p&gt;なぜシンプルにこんな風に書かないのでしょうか:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;HandlerFor&lt;/span&gt; site a &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;HandlerFor&lt;/span&gt; (&lt;span class="dt"&gt;HandlerData&lt;/span&gt; site &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;m&lt;/code&gt; という型引数を &lt;code&gt;IO&lt;/code&gt; という具体的なものに変えただけです。どんな場所でもハンドラはベースモナドとして &lt;code&gt;IO&lt;/code&gt; を持つ、という前提がすでにあるので、汎用性が無くなるわけではありません。&lt;/p&gt;
&lt;p&gt;しかしこの結果得られるものは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;少し分かりやすいエラーメッセージ&lt;/li&gt;
&lt;li&gt;より少ない型制約。思い浮かぶのは &lt;code&gt;MonadUnliftIO m&lt;/code&gt; みたいな&lt;/li&gt;
&lt;li&gt;内部で、型族周りの汚い部分をかなりシンプルにできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ヘルパー型シノニムを導入すれば、多くの後方互換性を得ることができます:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;HandlerT&lt;/span&gt; site m &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;HandlerFor&lt;/span&gt; site&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに、Template Haskell によって生成された &lt;code&gt;Handler&lt;/code&gt; という型シノニムを使っているなら、新しいバージョンの Yesod は正しいものを生成してくれるでしょう。全体として、これはほんの少しの改善です。この変更によって得られる利益と破壊のコストを天秤にかける必要があります。ただ、まだ折衷案が残っています。&lt;/p&gt;
&lt;h2 id="サブサイトを扱う-ええトランスフォーマーです"&gt;サブサイトを扱う (ええ、トランスフォーマーです)&lt;/h2&gt;
&lt;p&gt;私は 2回嘘をつきました: さっきのブランチはトランスフォーマーを使っています。そして &lt;code&gt;HandlerT&lt;/code&gt; は &lt;code&gt;HandlerFor&lt;/code&gt; よりも一般的です。いずれの場合もサブサイトをどうにかする必要がありますが、これは歴史的に苦痛を伴う作業です (使う分にはひどすぎることもないです)。実は、今日 &lt;code&gt;HandlerT&lt;/code&gt; が存在する唯一の理由に、サブサイトを綺麗に層に分けるやり方で実装しようとした、というものがあります (失敗しましたが)。Yesod を長く使っている人は &lt;code&gt;GHandler&lt;/code&gt; という前回のアプローチを覚えているかもしれません。そして、サブサイトを書いたことがあって &lt;code&gt;defaultLayout&lt;/code&gt; を使う時に起こる地獄を知っている人は、現在の状況は良くないということに同意してくれると思います。&lt;/p&gt;
&lt;p&gt;なので、問題を全て解決するため: サブサイトを書く時、ほとんど全てが普通の handler のコードを書くのと同じです。以下の点が違いますが:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getYesod&lt;/code&gt; を呼ぶ時、マスターサイトの app データを受け取る (例えば、スキャフォールドサイトの &lt;code&gt;App&lt;/code&gt;)。サブサイトのデータを入手する方法も必要になります (例えば、&lt;code&gt;yesod-static&lt;/code&gt; の &lt;code&gt;Static&lt;/code&gt; という値)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getCurrentRoute&lt;/code&gt; を呼ぶと、マスターサイトのルートを返してくれます。例えば、&lt;code&gt;yesod-auth&lt;/code&gt; の中にいる時、親サイトの取りうる全てのルートを扱いたくはないでしょう。その代わりに、サブサイト自身のルートを知りたいはずです。&lt;/li&gt;
&lt;li&gt;URL を生成する時、サブサイトのルートを親サイトのルートに変換する手段が必要になります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日の Yesod では、これらの違いを &lt;code&gt;HandlerT&lt;/code&gt; の中で提供しています。こうすると、ベースケースの &lt;code&gt;m&lt;/code&gt; を &lt;code&gt;IO&lt;/code&gt; にする時に、やけに複雑になります。その代わりに、新しいブランチでは &lt;code&gt;HandlerFor&lt;/code&gt; の上に &lt;code&gt;ReaderT&lt;/code&gt; 1層を置き、これら 3つの機能を提供しています。詳しく知りたい方は&lt;a href="https://github.com/yesodweb/yesod/blob/3e06942449cad0b52e218cb7e9f2c06b45b85e69/yesod-core/Yesod/Core/Class/Dispatch.hs#L38"&gt;コードを見てください&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="何をすべきか"&gt;何をすべきか?&lt;/h2&gt;
&lt;p&gt;全体的に、私はこの設計をエレガントで、理解しやすく、コードを綺麗にしてくれるものだと思っています。現実問題、昔のものから大きく離れたわけでも大きく改善されたわけでもありませんし、私はトランスフォーマーを無くすような変更の道半ばで進めなくなっています。&lt;/p&gt;
&lt;p&gt;近い将来、Yesod には破壊的変更が行われますが、必ずしもこの変更を含む必要はありません。もしこの変更が追加されないのなら、破壊的変更は上で言及した、かなりマイナーなものになるでしょう。この変更が好ましいという一般のコンセンサスが得られたなら、同時に追加した方がいいでしょうね。&lt;/p&gt;</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20180116/1516075029</id><title type="text">[TLS][Haskell]TLS 1.3 開発日記 その24 ID23</title><updated>2018-01-16T03:57:09Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20180116/1516075029"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;ID23での変更点：&lt;/p&gt;
&lt;h4&gt; key_share拡張&lt;/h4&gt;
&lt;p&gt;Canonのプリンターが40を使っていることが判明したので、key_share拡張の値を40から51へ変更。&lt;/p&gt;
&lt;h4&gt; signature_algorithms_cert拡張&lt;/h4&gt;
&lt;p&gt;signature_algorithmsに加えてsignature_algorithms_cert拡張を新設した。CertificateVerify用がsignature_algorithms、証明書用がsignature_algorithms_cert。signature_algorithms_certがなければsignature_algorithmsで代用する。&lt;/p&gt;
&lt;p&gt;PSSを分割した。たとえばrsa_pss_sha256は、rsaEncryption用のrsa_pss_rsae_sha256とRSASSA-PSS用のrsa_pss_pss_sha256に分かれた。&lt;/p&gt;
&lt;h4&gt; 不変条件&lt;/h4&gt;
&lt;p&gt;不変条件が加筆された：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クライアントは提案したものは必ず実装してないといけない&lt;/li&gt;
&lt;li&gt;サーバはわからないものは単に無視(異常終了してはいけない)&lt;/li&gt;
&lt;li&gt;TLSを終端するミドルボックスはその両方を満たせ&lt;/li&gt;
&lt;li&gt;単にリレーするミドルボックスは中身を触るな&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt; CSS&lt;/h4&gt;
&lt;p&gt;状態を持たないサーバは、一番目と二番目のClientHelloの間に到着するCSSを無視すること。&lt;/p&gt;
&lt;h4&gt; 静的なRSA&lt;/h4&gt;
&lt;p&gt;静的なRSAは、Bleichenbacher-type攻撃を防止するために使用不可にすべき。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018-01-06-stack-ld-errors.html</id><title type="text">最近遭遇した stack build 時の ld (pthread, -fPIC) エラー</title><updated>2018-01-06T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018-01-06-stack-ld-errors.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;ここ最近、プロジェクトのビルド時に謎のエラーが発生するようになりました。&lt;/p&gt;
&lt;p&gt;以下の2種類のエラーに遭遇したので、今後のために記録しておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pthread link error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fPIC error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack --version
Version 1.7.0, Git revision 19e3460496f8fd2c462fb35a5825301e5c3c4eb0 (5527 commits) x86_64 hpack-0.20.0&lt;/code&gt;&lt;/pre&gt;
&lt;!--more--&gt;
&lt;h2 id="pthread-link-error"&gt;pthread link error&lt;/h2&gt;
&lt;p&gt;このエラーは &lt;code&gt;Hakyll&lt;/code&gt; を利用しているサイトをビルドしている時に発生したものです。&lt;/p&gt;
&lt;p&gt;関連する &lt;code&gt;issue&lt;/code&gt; は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jgm/pandoc/issues/4130"&gt;pthread link errors on linux with GHC 8.2 #4130&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jgm/pandoc-citeproc/issues/311"&gt;Error building on Ubuntu 16 #311&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;issue&lt;/code&gt; に掲載されているエラーメッセージですが、以下のように &lt;code&gt;pthread&lt;/code&gt; 系のエラーが表示され、結果として &lt;code&gt;gcc failed in phase Linker. (Exit code: 1)&lt;/code&gt; となります。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;    Linking .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/pandoc-citeproc/pandoc-citeproc ...

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:137:0: error:
         error: undefined reference to &amp;#39;pthread_create&amp;#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:139:0: error:
         error: undefined reference to &amp;#39;pthread_detach&amp;#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:141:0: error:
         error: undefined reference to &amp;#39;pthread_setname_np&amp;#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:184:0: error:
         error: undefined reference to &amp;#39;pthread_key_create&amp;#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:192:0: error:
         error: undefined reference to &amp;#39;pthread_getspecific&amp;#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:203:0: error:
         error: undefined reference to &amp;#39;pthread_setspecific&amp;#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:212:0: error:
         error: undefined reference to &amp;#39;pthread_key_delete&amp;#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:371:0: error:
         error: undefined reference to &amp;#39;pthread_kill&amp;#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/includes/rts/OSThreads.h:59:0: error:
         error: undefined reference to &amp;#39;pthread_mutex_trylock&amp;#39;
    collect2: error: ld returned 1 exit status
    `gcc&amp;#39; failed in phase `Linker&amp;#39;. (Exit code: 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修正方法は簡単で &lt;code&gt;package.yaml&lt;/code&gt; や &lt;code&gt;cabal&lt;/code&gt; ファイルの &lt;code&gt;ghc-options&lt;/code&gt; に &lt;code&gt;-threaded&lt;/code&gt; を追記するだけです。&lt;/p&gt;
&lt;p&gt;具体的にはこんな感じで修正しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jaspervdj/hakyll/pull/601/files"&gt;Added -threaded to ghc-options. pthread link errors on linux with GHC 8.2 #601&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なぜこのエラーが発生したのかはわからないのですが &lt;code&gt;lts-10&lt;/code&gt; 系にしたタイミングで遭遇しました。&lt;/p&gt;
&lt;h2 id="fpic-error"&gt;-fPIC error&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mac&lt;/code&gt; では確認できなかったのですが &lt;code&gt;Ubuntu 17.10&lt;/code&gt; で以下のエラーに遭遇しました。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;    /usr/bin/ld: /home/bm12/.stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/rts/libHSrts_thr.a(Arena.thr_o): relocation R_X86_64_32 against .rodata.str1.1 can not be used when making a shared object。 -fPIC を付けて再コンパイルしてください。
    /usr/bin/ld: /home/bm12/.stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/rts/libCffi.a(closures.o): relocation R_X86_64_32 against .rodata can not be used when making a shared object。 -fPIC を付けて再コンパイルしてください。
    /usr/bin/ld: /home/bm12/.stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/rts/libCffi.a(ffi64.o): relocation R_X86_64_32S against .rodata can not be used when making a shared object。 -fPIC を付けて再コンパイルしてください。
    /usr/bin/ld: 最終リンクに失敗しました: 出力に対応するセクションがありません
    collect2: error: ld returned 1 exit status
    gcc failed in phase Linker. (Exit code: 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; の &lt;code&gt;issue&lt;/code&gt; でも話題になってました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/commercialhaskell/stack/issues/3518"&gt;Stack 1.6 linking issues on Arch Linux #3518&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commercialhaskell/stack/issues/2712"&gt;Linker error makes it impossible to use a stack-provided ghc #2712&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commercialhaskell/stack/issues/3630"&gt;Benchmarks can no longer be built with Stack 1.6.1 #3630&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commercialhaskell/stack/issues/3648"&gt;ghc-tinfo6-nopie-8.2.2 requires changes to its settings file to work on Arch Linux #3648&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解決策がまとまり &lt;code&gt;faq&lt;/code&gt; に追加されたので、同じエラーで悩んでいる人は一度ご確認ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/commercialhaskell/stack/pull/3725"&gt;faq update: ld errors about recompiling with -fPIC #3725&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解決方法がとても簡単で、以下のコマンドを実行して &lt;code&gt;ghc&lt;/code&gt; を再インストールするだけです。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack setup --reinstall&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;突然ビルドできなくなることもあるんですね・・・。&lt;/p&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html</id><title type="text">Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)</title><updated>2017-12-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2017-12-22" itemprop="datePublished"&gt;
        Dec 22, 2017
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Elm.html"&gt;Elm&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2017/electron"&gt;Electron Advent Calendar 2017&lt;/a&gt; の22日目の記事です．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2017/elm2"&gt;Elm2 アドカレ&lt;/a&gt;で 「Elm でマークダウンプレゼンテーションエディタを作るハナシ」を書いたのですが，長くなったので分けました． 前半は&lt;a href="/posts/2017-12-18-create-elmdeck-part1.html"&gt;コチラ&lt;/a&gt;(前半は Electron 関係ないけどね)．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;今回はローカルファイルの読み書きをするために Electron を導入します(Elm もといブラウザでいい感じにする方法が分からなかった)． 今回のコードは以下のリポジトリにあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/elmdeck/tree/electron"&gt;matsubara0507/elmdeck - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="elm-と-electron"&gt;Elm と Electron&lt;/h2&gt;
&lt;p&gt;結構いろんな人が挑戦してて，資料は豊富にある． ぼくは以下のリポジトリを参考にした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yasuyuky/elmtrn"&gt;yasuyuky/elmtrn - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;アナログ時計を表示する Electron プログラムだったはず．&lt;/p&gt;
&lt;h2 id="つくる"&gt;つくる&lt;/h2&gt;
&lt;p&gt;少しずつ拡張していく．&lt;/p&gt;
&lt;h3 id="electron-化"&gt;Electron 化&lt;/h3&gt;
&lt;p&gt;まずは Electron 化する． &lt;a href="https://github.com/matsubara0507/elmdeck/tree/6ff0520f65080c9a94ac85c99fc01e0374ca250e"&gt;もともと&lt;/a&gt;は次のような構成だった(&lt;code&gt;main.js&lt;/code&gt; は Elm ファイル群から生成)．&lt;/p&gt;
&lt;pre class="txt"&gt;&lt;code&gt;/
 |-- elm-package.json
 |-- index.html
 |-- src/
 |    |-- Main.elm
 |    \-- ..
 \-- js/
      |-- main.js
      \-- highlight.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これ，elmtrn を参考に次のような構成に変更した．&lt;/p&gt;
&lt;pre class="txt"&gt;&lt;code&gt;/
 |-- elm-package.json
 |-- gulpfile.js
 |-- package.json
 \-- app
      |-- index.html
      |-- src/
      |    |-- Main.elm
      |    \-- ..
      \-- js/
           |-- app.js
           |-- main.js
           \-- ..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/matsubara0507/elmdeck/blob/97607bc1c2f069101d7d6012dcd46470d3a2d3fe/package.json"&gt;package.json&lt;/a&gt; は elmtrn をほぼそのまんま(&lt;code&gt;main&lt;/code&gt; の場所だけ違う)． gulp を使って，Elm のコードを監視・コンパイルし，生成した JS コードを Electron から呼び出す． elmtrn の gulpfile.js の設定では，各 Elm ファイルに対しひとつの JS ファイルを生成していたが，自分はひとまとめにした JS を生成したかったので，次のように gulpfile.js を書き換えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; g &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; electron &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron-connect&amp;#39;&lt;/span&gt;).&lt;span class="va"&gt;server&lt;/span&gt;.&lt;span class="at"&gt;create&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; packager &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron-packager&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; $ &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;gulp-load-plugins&amp;#39;&lt;/span&gt;)()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; packageJson &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;./package.json&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; extend &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;util&amp;#39;&lt;/span&gt;).&lt;span class="at"&gt;_extend&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;&lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;task&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; () &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;  &lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;watch&lt;/span&gt;([&lt;span class="st"&gt;&amp;#39;app/src/**/*.elm&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt;[&lt;span class="st"&gt;&amp;#39;elm&amp;#39;&lt;/span&gt;])&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;  &lt;span class="va"&gt;electron&lt;/span&gt;.&lt;span class="at"&gt;start&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;  &lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;watch&lt;/span&gt;([&lt;span class="st"&gt;&amp;#39;app/js/*.js&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;app/index.html&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;electron&lt;/span&gt;.&lt;span class="at"&gt;restart&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;  &lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;watch&lt;/span&gt;([]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;electron&lt;/span&gt;.&lt;span class="at"&gt;reload&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;&lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;task&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;elm&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; () &lt;span class="op"&gt;=&amp;gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" data-line-number="16"&gt;  &lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;src&lt;/span&gt;([&lt;span class="st"&gt;&amp;#39;app/src/**/*.elm&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" data-line-number="17"&gt;    .&lt;span class="at"&gt;pipe&lt;/span&gt;(&lt;span class="va"&gt;$&lt;/span&gt;.&lt;span class="at"&gt;logger&lt;/span&gt;())&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" data-line-number="18"&gt;    .&lt;span class="at"&gt;pipe&lt;/span&gt;(&lt;span class="va"&gt;$&lt;/span&gt;.&lt;span class="at"&gt;plumber&lt;/span&gt;())&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" data-line-number="19"&gt;    .&lt;span class="at"&gt;pipe&lt;/span&gt;(&lt;span class="va"&gt;$&lt;/span&gt;.&lt;span class="va"&gt;elm&lt;/span&gt;.&lt;span class="at"&gt;bundle&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;main.js&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; debug&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="kw"&gt;true&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-20" data-line-number="20"&gt;    .&lt;span class="at"&gt;pipe&lt;/span&gt;(&lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;dest&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;app/js&amp;quot;&lt;/span&gt;))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-21" data-line-number="21"&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-22" data-line-number="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-23" data-line-number="23"&gt;&lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;task&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/philopon/gulp-elm"&gt;philopon/gulp-elm の README&lt;/a&gt; が参考になった．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;あとは，次のように elmtrn の app.js を適当に書き直した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;app&lt;span class="op"&gt;,&lt;/span&gt; BrowserWindow&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; mainWindow &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="at"&gt;on&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;window-all-closed&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;    &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="at"&gt;quit&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt;&lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="at"&gt;on&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;ready&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" data-line-number="9"&gt;  mainWindow &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;BrowserWindow&lt;/span&gt;(&lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" data-line-number="10"&gt;    &lt;span class="st"&gt;&amp;quot;frame&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" data-line-number="11"&gt;    &lt;span class="st"&gt;&amp;quot;always-on-top&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-12" data-line-number="12"&gt;    &lt;span class="st"&gt;&amp;quot;resizable&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-13" data-line-number="13"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-14" data-line-number="14"&gt;  &lt;span class="va"&gt;mainWindow&lt;/span&gt;.&lt;span class="at"&gt;maximize&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-15" data-line-number="15"&gt;  &lt;span class="va"&gt;mainWindow&lt;/span&gt;.&lt;span class="at"&gt;loadURL&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;file://&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; __dirname &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;/../index.html&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-16" data-line-number="16"&gt;  &lt;span class="va"&gt;mainWindow&lt;/span&gt;.&lt;span class="at"&gt;on&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-17" data-line-number="17"&gt;    mainWindow &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-18" data-line-number="18"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-19" data-line-number="19"&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;gulp&lt;/code&gt; を実行すればブラウザ版 elmdeck がそのまんま electron で実行できる． やったぁ．&lt;/p&gt;
&lt;h3 id="ファイルの読み込み"&gt;ファイルの読み込み&lt;/h3&gt;
&lt;p&gt;ココからが本番．&lt;/p&gt;
&lt;p&gt;設計として，デスクトップでよくある感じに，左上の &lt;code&gt;File&lt;/code&gt; から &lt;code&gt;Open&lt;/code&gt; とかしたい． こんな感じ(これは Atom だけど)．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-elmdeck/atom-file-open.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Electron でファイルの呼び出しをする方法は以下の記事を参考にした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/_takwat/items/6544342fd4141345bb19"&gt;Electronでファイルやフォルダの選択 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node の fs ライブラリを使えばよいようだ(Electron に限らないハナシかな)． &lt;a href="https://nodejs.org/api/fs.html"&gt;fs の公式ドキュメント&lt;/a&gt;とにらめっこして &lt;a href="https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback"&gt;&lt;code&gt;fs.readFile&lt;/code&gt;&lt;/a&gt; を呼び出せば良いみたいなのは分かった． 取りあえず，次のような &lt;code&gt;files.js&lt;/code&gt; ファイルを書いた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="st"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;remote&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;dialog&lt;span class="op"&gt;,&lt;/span&gt; BrowserWindow&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; remote&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; fs &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;&lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="at"&gt;exports&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;  &lt;span class="dt"&gt;readFile&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;    &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showOpenDialog&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;        &lt;span class="dt"&gt;properties&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;        &lt;span class="dt"&gt;title&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;        &lt;span class="dt"&gt;defaultPath&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;        &lt;span class="dt"&gt;filters&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-14" data-line-number="14"&gt;            &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;name&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;マークダウン&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;extensions&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-15" data-line-number="15"&gt;        ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-16" data-line-number="16"&gt;    &lt;span class="op"&gt;},&lt;/span&gt; (fileNames) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-17" data-line-number="17"&gt;        &lt;span class="va"&gt;fs&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(fileNames[&lt;span class="dv"&gt;0&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; (err&lt;span class="op"&gt;,&lt;/span&gt; data) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-18" data-line-number="18"&gt;          &lt;span class="cf"&gt;if&lt;/span&gt; (err) &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(err)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-19" data-line-number="19"&gt;          &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(data)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-20" data-line-number="20"&gt;        &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-21" data-line-number="21"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-22" data-line-number="22"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-23" data-line-number="23"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次にこれをメニューバーから呼べるようにする． Electron のメニューバーを拡張するには &lt;a href="https://electronjs.org/docs/api/menu"&gt;&lt;code&gt;Menu&lt;/code&gt; クラス&lt;/a&gt;を使えば良いらしい． サンプルやらを参考にしながらイロイロ試行錯誤してみた結果，次のような &lt;code&gt;menuItems.js&lt;/code&gt; ファイルを書き，&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;app&lt;span class="op"&gt;,&lt;/span&gt; Menu&lt;span class="op"&gt;,&lt;/span&gt; dialog&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; template &lt;span class="op"&gt;=&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;    &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Edit&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;cut&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-11" data-line-number="11"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;copy&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-12" data-line-number="12"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;paste&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-13" data-line-number="13"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;pasteandmatchstyle&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-14" data-line-number="14"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-15" data-line-number="15"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;selectall&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-16" data-line-number="16"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-17" data-line-number="17"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-18" data-line-number="18"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-19" data-line-number="19"&gt;    &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;View&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-20" data-line-number="20"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-21" data-line-number="21"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;reload&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-22" data-line-number="22"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;forcereload&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-23" data-line-number="23"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;toggledevtools&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-24" data-line-number="24"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-25" data-line-number="25"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;resetzoom&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-26" data-line-number="26"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;zoomin&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-27" data-line-number="27"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;zoomout&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-28" data-line-number="28"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-29" data-line-number="29"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;togglefullscreen&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-30" data-line-number="30"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;toggledevtools&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-31" data-line-number="31"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-32" data-line-number="32"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-33" data-line-number="33"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-34" data-line-number="34"&gt;    &lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-35" data-line-number="35"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-36" data-line-number="36"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;minimize&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-37" data-line-number="37"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-38" data-line-number="38"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-39" data-line-number="39"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-40" data-line-number="40"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-41" data-line-number="41"&gt;    &lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-42" data-line-number="42"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-43" data-line-number="43"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-44" data-line-number="44"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Learn More&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-45" data-line-number="45"&gt;        &lt;span class="at"&gt;click&lt;/span&gt; () &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;).&lt;span class="va"&gt;shell&lt;/span&gt;.&lt;span class="at"&gt;openExternal&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;https://electron.atom.io&amp;#39;&lt;/span&gt;) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-46" data-line-number="46"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-47" data-line-number="47"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-48" data-line-number="48"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-49" data-line-number="49"&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-50" data-line-number="50"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-51" data-line-number="51"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; items &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;template&lt;/span&gt;.&lt;span class="at"&gt;map&lt;/span&gt;( option &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;MenuItem&lt;/span&gt;(option) &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-52" data-line-number="52"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-53" data-line-number="53"&gt;&lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="at"&gt;exports&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-54" data-line-number="54"&gt;  &lt;span class="dt"&gt;get&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; () &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="cf"&gt;return&lt;/span&gt; items&lt;span class="op"&gt;;&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-55" data-line-number="55"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これ(module exports した &lt;code&gt;get&lt;/code&gt; 関数のコト)を &lt;code&gt;index.html&lt;/code&gt; で次のように呼び出した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode html"&gt;&lt;code class="sourceCode html"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="kw"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;remote&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;Menu&lt;span class="op"&gt;,&lt;/span&gt; MenuItem&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; remote&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; files &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;./js/files&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; menuItems &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;./js/menuItems&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" data-line-number="7"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; node &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;document&lt;/span&gt;.&lt;span class="at"&gt;getElementById&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" data-line-number="8"&gt;  &lt;span class="cf"&gt;while&lt;/span&gt; (&lt;span class="va"&gt;node&lt;/span&gt;.&lt;span class="at"&gt;firstChild&lt;/span&gt;) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" data-line-number="9"&gt;    &lt;span class="va"&gt;node&lt;/span&gt;.&lt;span class="at"&gt;removeChild&lt;/span&gt;(&lt;span class="va"&gt;node&lt;/span&gt;.&lt;span class="at"&gt;firstChild&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-10" data-line-number="10"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-11" data-line-number="11"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; app &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="va"&gt;exports&lt;/span&gt;.&lt;span class="va"&gt;Main&lt;/span&gt;.&lt;span class="at"&gt;embed&lt;/span&gt;(node)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-13" data-line-number="13"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; menuvar &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;Menu&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-14" data-line-number="14"&gt;  &lt;span class="va"&gt;menuvar&lt;/span&gt;.&lt;span class="at"&gt;append&lt;/span&gt;(&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-15" data-line-number="15"&gt;    &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-16" data-line-number="16"&gt;      &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-17" data-line-number="17"&gt;      &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-18" data-line-number="18"&gt;        &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-19" data-line-number="19"&gt;          &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-20" data-line-number="20"&gt;          &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-21" data-line-number="21"&gt;        &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-22" data-line-number="22"&gt;      ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-23" data-line-number="23"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-24" data-line-number="24"&gt;  ))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-25" data-line-number="25"&gt;  &lt;span class="va"&gt;menuItems&lt;/span&gt;.&lt;span class="at"&gt;get&lt;/span&gt;().&lt;span class="at"&gt;forEach&lt;/span&gt;( item &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;menuvar&lt;/span&gt;.&lt;span class="at"&gt;append&lt;/span&gt;(item) &lt;span class="op"&gt;}&lt;/span&gt; )&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-26" data-line-number="26"&gt;  &lt;span class="va"&gt;Menu&lt;/span&gt;.&lt;span class="at"&gt;setApplicationMenu&lt;/span&gt;(menuvar)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-27" data-line-number="27"&gt;&lt;span class="kw"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;var menuvar = new Menu();&lt;/code&gt; 以下からがキモです． どーしても，動的に処理を定義しない部分(&lt;code&gt;Edit&lt;/code&gt; とか &lt;code&gt;View&lt;/code&gt; とか)を別ファイル(&lt;code&gt;menuItems.js&lt;/code&gt;)にまとめたうえで，&lt;code&gt;File&lt;/code&gt; を先頭に突っ込みたかったのでこうなった． JS は全然詳しくないのでアンチパターンかもしれないけどね．&lt;/p&gt;
&lt;h4 id="elm-に繋げる"&gt;Elm に繋げる&lt;/h4&gt;
&lt;p&gt;ここまでで&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;上部にあるメニューバーの &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Open&lt;/code&gt; を押して&lt;/li&gt;
&lt;li&gt;ファイルをダイアログで選択し&lt;/li&gt;
&lt;li&gt;コンソールに内容を吐き出す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;までは書けた． ここからは (3) が「Elm に渡して input エリアに書き出す」になるようにする．&lt;/p&gt;
&lt;p&gt;Elm と JS を繋ぐには方法がいくつかあるが，今回は &lt;code&gt;Port&lt;/code&gt; を使ってみる(前回はお行儀の悪い &lt;code&gt;Native&lt;/code&gt; モジュールを使ったけど)． 次の記事が本当に参考になった．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jooex/items/5ff2d3b86563cf5dbd84"&gt;ElmのPortでJSを使う。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マークダウンファイルの中身を JS から Elm に投げるので Elm で次のような &lt;code&gt;ports&lt;/code&gt; 関数を定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Port/FS.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;port &lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Port.FS&lt;/span&gt; exposing (&lt;span class="fu"&gt;..&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;port readFile &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;Main.elm&lt;/code&gt; で次のように呼び出す．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;  { textarea &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;  , window &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" data-line-number="7"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" data-line-number="8"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-10" data-line-number="10"&gt;main &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Program&lt;/span&gt; &lt;span class="dt"&gt;Never&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-11" data-line-number="11"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-12" data-line-number="12"&gt;  Html.program&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-13" data-line-number="13"&gt;    { init &lt;span class="fu"&gt;=&lt;/span&gt; init model&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-14" data-line-number="14"&gt;    , view &lt;span class="fu"&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-15" data-line-number="15"&gt;    , update &lt;span class="fu"&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-16" data-line-number="16"&gt;    , subscriptions &lt;span class="fu"&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-17" data-line-number="17"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-18" data-line-number="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-19" data-line-number="19"&gt;subscriptions &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-20" data-line-number="20"&gt;subscriptions model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-21" data-line-number="21"&gt;  Sub.batch&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-22" data-line-number="22"&gt;    [ Window.resizes &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-23" data-line-number="23"&gt;    , FS.readFile &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-24" data-line-number="24"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-25" data-line-number="25"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-26" data-line-number="26"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-27" data-line-number="27"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-28" data-line-number="28"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-29" data-line-number="29"&gt;    &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; str &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-30" data-line-number="30"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-31" data-line-number="31"&gt;    &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; size &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-32" data-line-number="32"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; window &lt;span class="fu"&gt;=&lt;/span&gt; size }, Cmd.none )        &lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Window.Size&lt;/code&gt; とか &lt;code&gt;SizeUpdated&lt;/code&gt; はブラウザやアプリのウィンドウサイズに合わせて，スライドのサイズを変更するためのサブスクリプションなので気にしないで． &lt;code&gt;TextAreaInput&lt;/code&gt; は input エリアにテキストを書き込んだ時にも使っている． 同じ型なので使いまわした．&lt;/p&gt;
&lt;p&gt;あとは &lt;code&gt;files.js&lt;/code&gt; の &lt;code&gt;console.log(data);&lt;/code&gt; としていた部分を &lt;code&gt;app.ports.readFile.send(data);&lt;/code&gt; と&lt;a href="https://github.com/matsubara0507/elmdeck/blob/a102ae0d82b162a3f219b7d33f9875c080ff6be9/app/js/files.js#L19"&gt;書き換える&lt;/a&gt;だけ．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-elmdeck/openfile.gif" /&gt;&lt;/p&gt;
&lt;p&gt;うまくいった．&lt;/p&gt;
&lt;h3 id="ファイルの書き込み"&gt;ファイルの書き込み&lt;/h3&gt;
&lt;p&gt;さて次はファイルの保存を実装する．&lt;/p&gt;
&lt;h4 id="ファイルパスも投げておく"&gt;ファイルパスも投げておく&lt;/h4&gt;
&lt;p&gt;ファイルを保存するには開いてるファイルのファイルパスがあった方が良いだろう(上書き保存とかするなら)． なのでまずは，読み込み時の処理をファイルパスも投げるように書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Port/FS.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;port &lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Port.FS&lt;/span&gt; exposing (&lt;span class="fu"&gt;..&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;File&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;  { path &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;  , body &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;port readFile &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;File&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;  { textarea &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;  , window &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;  , filepath &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" data-line-number="8"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" data-line-number="9"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" data-line-number="10"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ReadFile&lt;/span&gt; &lt;span class="dt"&gt;FS.File&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-12" data-line-number="12"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-13" data-line-number="13"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-14" data-line-number="14"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-15" data-line-number="15"&gt;    &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; str &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-16" data-line-number="16"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-17" data-line-number="17"&gt;    &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; size &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-18" data-line-number="18"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; window &lt;span class="fu"&gt;=&lt;/span&gt; size }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-19" data-line-number="19"&gt;    &lt;span class="dt"&gt;ReadFile&lt;/span&gt; file &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-20" data-line-number="20"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; file&lt;span class="fu"&gt;.&lt;/span&gt;body, filepath &lt;span class="fu"&gt;=&lt;/span&gt; file&lt;span class="fu"&gt;.&lt;/span&gt;path }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-22" data-line-number="22"&gt;subscriptions &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-23" data-line-number="23"&gt;subscriptions model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-24" data-line-number="24"&gt;  Sub.batch&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-25" data-line-number="25"&gt;    [ Window.resizes &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-26" data-line-number="26"&gt;    , FS.readFile &lt;span class="dt"&gt;ReadFile&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-27" data-line-number="27"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;レコード型を JS から Elm に投げるには普通のオブジェクトを使えばよいらしい(最初はタプルを使おうとして良くわからなくなり諦めた…)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="co"&gt;// js/files.js&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="at"&gt;exports&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;  &lt;span class="dt"&gt;readFile&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;    &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showOpenDialog&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;        &lt;span class="dt"&gt;properties&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;        &lt;span class="dt"&gt;title&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;        &lt;span class="dt"&gt;defaultPath&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;        &lt;span class="dt"&gt;filters&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" data-line-number="9"&gt;            &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;name&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;マークダウン&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;extensions&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" data-line-number="10"&gt;        ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" data-line-number="11"&gt;    &lt;span class="op"&gt;},&lt;/span&gt; (fileNames) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-12" data-line-number="12"&gt;        &lt;span class="va"&gt;fs&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(fileNames[&lt;span class="dv"&gt;0&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; (err&lt;span class="op"&gt;,&lt;/span&gt; data) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-13" data-line-number="13"&gt;          &lt;span class="cf"&gt;if&lt;/span&gt; (err) &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(err)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-14" data-line-number="14"&gt;          &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;readFile&lt;/span&gt;.&lt;span class="at"&gt;send&lt;/span&gt;(&lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;path&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; fileNames[&lt;span class="dv"&gt;0&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;body&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; data &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-15" data-line-number="15"&gt;        &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-16" data-line-number="16"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-17" data-line-number="17"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-18" data-line-number="18"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="いよいよ書き出し"&gt;いよいよ書き出し&lt;/h4&gt;
&lt;p&gt;保存するとき，データは Elm 側から投げられるが保存ボタンは Electron 側(JS側)から始めたい． なので&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;保存ボタンを押したら何らかの値を JS から Elm に送信&lt;/li&gt;
&lt;li&gt;それを受けたら Elm から JS にマークダウンのデータを送信&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というお手製同期通信を行うことにした(これもアンチパターンかも…)． 上書き保存のときは &lt;code&gt;null&lt;/code&gt; (Elm 側では &lt;code&gt;Nothing&lt;/code&gt;) を JS から送り，新規保存ならファイル名を送ることにする．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;まずは Elm 側で，以上の戦略から次のような &lt;code&gt;port&lt;/code&gt; を書いた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;port writeFileHook &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;port writeFile &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;File&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次は JS 側に移る． ファイルの書き出しには &lt;a href="https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback"&gt;&lt;code&gt;fs.writeFile&lt;/code&gt;&lt;/a&gt; 関数を用いた． 前述した &lt;code&gt;port&lt;/code&gt; も使って，次のような関数を &lt;code&gt;files.js&lt;/code&gt; に追加した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;writeFileTo&lt;/span&gt;(fileName&lt;span class="op"&gt;,&lt;/span&gt; data) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;  &lt;span class="cf"&gt;if&lt;/span&gt; (fileName) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;    &lt;span class="va"&gt;fs&lt;/span&gt;.&lt;span class="at"&gt;writeFile&lt;/span&gt;(fileName&lt;span class="op"&gt;,&lt;/span&gt; data&lt;span class="op"&gt;,&lt;/span&gt; (err) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;      &lt;span class="cf"&gt;if&lt;/span&gt; (err) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;        &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(err)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;        &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showErrorBox&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;Can not save fiel: &amp;#39;&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; fileName&lt;span class="op"&gt;,&lt;/span&gt; err)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;&lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="at"&gt;exports&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;  &lt;span class="dt"&gt;readFile&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;    ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" data-line-number="16"&gt;  &lt;span class="dt"&gt;writeFile&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" data-line-number="17"&gt;    &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;writeFileHook&lt;/span&gt;.&lt;span class="at"&gt;send&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" data-line-number="18"&gt;    &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;writeFile&lt;/span&gt;.&lt;span class="at"&gt;subscribe&lt;/span&gt;(args &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="at"&gt;writeFileTo&lt;/span&gt;(args[&lt;span class="st"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; args[&lt;span class="st"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;]) &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" data-line-number="19"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-20" data-line-number="20"&gt;  &lt;span class="dt"&gt;writeFileAs&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-21" data-line-number="21"&gt;    &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showSaveDialog&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-22" data-line-number="22"&gt;        &lt;span class="dt"&gt;properties&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-23" data-line-number="23"&gt;        &lt;span class="dt"&gt;title&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-24" data-line-number="24"&gt;        &lt;span class="dt"&gt;defaultPath&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-25" data-line-number="25"&gt;        &lt;span class="dt"&gt;filters&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-26" data-line-number="26"&gt;            &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;name&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Markdown&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;extensions&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-27" data-line-number="27"&gt;        ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-28" data-line-number="28"&gt;    &lt;span class="op"&gt;},&lt;/span&gt; (fileName) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-29" data-line-number="29"&gt;        &lt;span class="cf"&gt;if&lt;/span&gt; (fileName &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="kw"&gt;undefined&lt;/span&gt;) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-30" data-line-number="30"&gt;          &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(fileName)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-31" data-line-number="31"&gt;          &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showErrorBox&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;Can not save fiel: &amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Please select file.&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-32" data-line-number="32"&gt;          &lt;span class="cf"&gt;return&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-33" data-line-number="33"&gt;        &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-34" data-line-number="34"&gt;        &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;writeFileHook&lt;/span&gt;.&lt;span class="at"&gt;send&lt;/span&gt;(fileName)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-35" data-line-number="35"&gt;        &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;writeFile&lt;/span&gt;.&lt;span class="at"&gt;subscribe&lt;/span&gt;(args &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="at"&gt;writeFileTo&lt;/span&gt;(args[&lt;span class="st"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; args[&lt;span class="st"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;]) &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-36" data-line-number="36"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-37" data-line-number="37"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-38" data-line-number="38"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上書き保存 &lt;code&gt;writeFile&lt;/code&gt; と新しく保存 &lt;code&gt;writeFileAs&lt;/code&gt; を用意し，共通部分は &lt;code&gt;writeFileTo&lt;/code&gt; 関数として書き出した．&lt;/p&gt;
&lt;p&gt;これをメニューバーに追加する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; menuvar &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;Menu&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;span class="va"&gt;menuvar&lt;/span&gt;.&lt;span class="at"&gt;append&lt;/span&gt;(&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;    &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;      &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;writeFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;      &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-14" data-line-number="14"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-15" data-line-number="15"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Save As&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-16" data-line-number="16"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;writeFileAs&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-17" data-line-number="17"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-18" data-line-number="18"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-19" data-line-number="19"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-20" data-line-number="20"&gt;))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に Elm 側に処理を追加した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- app/src/Main.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" data-line-number="4"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ReadFile&lt;/span&gt; &lt;span class="dt"&gt;FS.File&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-6" data-line-number="6"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;WriteFileHook&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-8" data-line-number="8"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-9" data-line-number="9"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-10" data-line-number="10"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-11" data-line-number="11"&gt;    &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; str &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-12" data-line-number="12"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-13" data-line-number="13"&gt;    &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; size &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-14" data-line-number="14"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; window &lt;span class="fu"&gt;=&lt;/span&gt; size }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-15" data-line-number="15"&gt;    &lt;span class="dt"&gt;ReadFile&lt;/span&gt; file &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-16" data-line-number="16"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; file&lt;span class="fu"&gt;.&lt;/span&gt;body, filepath &lt;span class="fu"&gt;=&lt;/span&gt; file&lt;span class="fu"&gt;.&lt;/span&gt;path }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-17" data-line-number="17"&gt;    &lt;span class="dt"&gt;WriteFileHook&lt;/span&gt; (&lt;span class="dt"&gt;Just&lt;/span&gt; filepath) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-18" data-line-number="18"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; filepath &lt;span class="fu"&gt;=&lt;/span&gt; filepath }, FS.writeFile { path &lt;span class="fu"&gt;=&lt;/span&gt; filepath, body &lt;span class="fu"&gt;=&lt;/span&gt; model&lt;span class="fu"&gt;.&lt;/span&gt;textarea } )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-19" data-line-number="19"&gt;    &lt;span class="dt"&gt;WriteFileHook&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-20" data-line-number="20"&gt;      ( model, FS.writeFile { path &lt;span class="fu"&gt;=&lt;/span&gt; model&lt;span class="fu"&gt;.&lt;/span&gt;filepath, body &lt;span class="fu"&gt;=&lt;/span&gt; model&lt;span class="fu"&gt;.&lt;/span&gt;textarea } )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-22" data-line-number="22"&gt;subscriptions &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-23" data-line-number="23"&gt;subscriptions model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-24" data-line-number="24"&gt;  Sub.batch&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-25" data-line-number="25"&gt;    [ Window.resizes &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-26" data-line-number="26"&gt;    , FS.readFile &lt;span class="dt"&gt;ReadFile&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-27" data-line-number="27"&gt;    , FS.writeFileHook &lt;span class="dt"&gt;WriteFileHook&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-28" data-line-number="28"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでうまく動作するはずだ．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-elmdeck/savefile.gif" /&gt;&lt;/p&gt;
&lt;h3 id="ショートカット"&gt;ショートカット&lt;/h3&gt;
&lt;p&gt;最後にショートカットだ． 次の記事が参考になった．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/okaxaki/items/8b8942b0c4e13ac67739"&gt;Electronに開発用メニューとショートカットを付ける - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://electronjs.org/docs/api/accelerator"&gt;&lt;code&gt;Accelerator&lt;/code&gt;&lt;/a&gt; というのを使えばよいらしい．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; menuvar &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;Menu&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;&lt;span class="va"&gt;menuvar&lt;/span&gt;.&lt;span class="at"&gt;append&lt;/span&gt;(&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-4" data-line-number="4"&gt;    &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-5" data-line-number="5"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-6" data-line-number="6"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-7" data-line-number="7"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-8" data-line-number="8"&gt;        &lt;span class="dt"&gt;accelerator&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Ctrl+O&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-9" data-line-number="9"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-10" data-line-number="10"&gt;      &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-11" data-line-number="11"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-12" data-line-number="12"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-13" data-line-number="13"&gt;        &lt;span class="dt"&gt;accelerator&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Ctrl+S&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-14" data-line-number="14"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;writeFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-15" data-line-number="15"&gt;      &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-16" data-line-number="16"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-17" data-line-number="17"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Save As&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-18" data-line-number="18"&gt;        &lt;span class="dt"&gt;accelerator&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Ctrl+Shift+S&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-19" data-line-number="19"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;writeFileAs&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-20" data-line-number="20"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-21" data-line-number="21"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-22" data-line-number="22"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-23" data-line-number="23"&gt;))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで目的のモノはできた！&lt;/p&gt;
&lt;h2 id="懸念"&gt;懸念&lt;/h2&gt;
&lt;p&gt;なんか Electron のファイル IO にはセキュリティ的に甘いところがあるらしい…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://utf-8.jp/public/2016/0307/electron.pdf"&gt;Electron の倒し方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人で使う分にはいいんだけど…対策しなきゃかなぁ… Elm を介してレンダラしたマークダウンを貼り付けてるので問題ないのだろうか… 良く分からない．&lt;/p&gt;
&lt;h2 id="思うところ"&gt;思うところ&lt;/h2&gt;
&lt;p&gt;結局 JS は結構書いてるなーと思った(笑) JS 絶対書きたくないマンは Elm でできることは，まだ制限される印象だ． JS の知識も多少ないとキツソウだし．&lt;/p&gt;
&lt;p&gt;まぁ綺麗に分離できるのがうれしいんだけどね．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;頑張って作っていくぞ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2017-12-18-create-elmdeck-part1.html</id><title type="text">Elm でマークダウンプレゼンテーションエディタを作ってみた (その１)</title><updated>2017-12-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2017-12-18-create-elmdeck-part1.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Elm でマークダウンプレゼンテーションエディタを作ってみた (その１)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2017-12-18" itemprop="datePublished"&gt;
        Dec 18, 2017
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Elm.html"&gt;Elm&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2017/elm2"&gt;Elm Advent Calendar 2017 (その２)&lt;/a&gt; の18日目の記事です．&lt;/p&gt;
&lt;p&gt;ぼくが18日目に登録したとき(12月6日ごろ)は半分以上が空いてたのに全部埋まってる(笑) みんなすごいなぁ．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;タイトルの通り，思い付きで作り始めたマークダウンプレゼンテーションエディタについて書きます． 全てのコードは以下にあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/elmdeck"&gt;matsubara0507/elmdeck - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まだ完成していないです． あと正直なこと言うと，まだ使える代物ではないです(笑) 徐々に改善していくつもりです．&lt;/p&gt;
&lt;h2 id="md-でスライドづくり"&gt;MD でスライドづくり&lt;/h2&gt;
&lt;p&gt;自分はマークダウンでサクッとスライドを作るのが好きで，イロイロ試してみた結果，&lt;a href="https://yhatt.github.io/marp/"&gt;Marp&lt;/a&gt; というツールに落ち着いた． 基本的に不満は無いのだが，プレゼンテーションモード欲しいなーとか，もっと簡単にテーマを作りたいなーとかが微妙にある．&lt;/p&gt;
&lt;p&gt;しかし，最近は&lt;a href="https://github.com/yhatt/marp/wiki/Roadmap-to-Marp-1.0.0"&gt;バージョン1&lt;/a&gt;に向けて構成から書き直しているようで更新が止まっている(個人的には，急かすつもりは全くなく，ゆっくり好きなように作ればいいと思ってる)．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;なので，自分でイチから作ってみることにした． ちなみに，Marp が再リリースされて，そっちの方で全然満足出来たらそっちに移るつもり．&lt;/p&gt;
&lt;p&gt;個人的に最低限欲しい機能は&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;シンタックスハイライト&lt;/li&gt;
&lt;li&gt;数式&lt;/li&gt;
&lt;li&gt;画像の拡縮&lt;/li&gt;
&lt;li&gt;PDF への出力&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;があればよい． できればプレゼンテーションモードとか欲しいけど．&lt;/p&gt;
&lt;h2 id="作ってく"&gt;作ってく&lt;/h2&gt;
&lt;p&gt;ちなみに，既にできているのは (1) シンタックスハイライト，(2) 数式 まで． あと，ローカルファイルの読み書きを Elm でする方法(というかブラウザでいい感じにする方法)が分からなかったので Electron にした．&lt;/p&gt;
&lt;h3 id="markdown-をスライドへ"&gt;Markdown をスライドへ&lt;/h3&gt;
&lt;p&gt;戦略としては，テキストエリアで入力してもらったマークダウン表記のプレーンテキストを何らかのパッケージで構文木に変換し，さらに HTML に変換してもらうだけ． そして，変換したマークダウンの構文木を区切りワード &lt;code&gt;---&lt;/code&gt; にしてスライド1枚1枚にするイメージ．&lt;/p&gt;
&lt;p&gt;今回は以下のパッケージを使った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown"&gt;pablohirafuji/elm-markdown - elm packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マークダウンパーサーとしては他にも，&lt;a href="http://package.elm-lang.org/packages/evancz/elm-markdown"&gt;Elm の作者が作ったモノ&lt;/a&gt;があったが，これは Native モジュールで JS の &lt;a href="https://github.com/chjj/marked"&gt;marked&lt;/a&gt; を呼んでるだけなので，マークダウンの構文木をいじれない． なので，構文木も扱える pablohirafuji/elm-markdown を使った(その代わり速度は遅い…)．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;pablohirafuji/elm-markdown は &lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#parse"&gt;&lt;code&gt;parse&lt;/code&gt;&lt;/a&gt; 関数を用いることで文字列から次の &lt;code&gt;Block b i&lt;/code&gt; 型のリストに変換する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;BlankLine&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ThematicBreak&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Heading&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;CodeBlock&lt;/span&gt; &lt;span class="dt"&gt;CodeBlock&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Paragraph&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;BlockQuote&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;ListBlock&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i)))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;PlainInlines&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Custom&lt;/span&gt; b (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Block b i&lt;/code&gt; 型から &lt;code&gt;Html msg&lt;/code&gt; へは &lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#toHtml"&gt;&lt;code&gt;toHtml&lt;/code&gt;&lt;/a&gt; 関数を使えばよい．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;elm repl&lt;/code&gt; で試した結果，&lt;code&gt;---&lt;/code&gt; は &lt;code&gt;ThematicBreak&lt;/code&gt; になることが分かった． なので，&lt;code&gt;ThematicBreak&lt;/code&gt; で &lt;code&gt;List (Block b i)&lt;/code&gt; を &lt;code&gt;List (List (Block b i))&lt;/code&gt; に分割する． &lt;code&gt;(a -&amp;gt; Bool) -&amp;gt; List a -&amp;gt; List (List a)&lt;/code&gt; って感じの関数が無かったので&lt;a href="https://github.com/matsubara0507/elmdeck/blob/6ff0520f65080c9a94ac85c99fc01e0374ca250e/src/Utils.elm#L9"&gt;自分で定義した&lt;/a&gt;．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;markdownView &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;markdownView { textarea, window } &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;    textarea&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Block.parse &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Utils.split ((&lt;span class="fu"&gt;==&lt;/span&gt;) &lt;span class="dt"&gt;Block.ThematicBreak&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.map (toSlide window)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; div []&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;toSlide &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;toSlide window blocks &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;    blocks&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" data-line-number="12"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.concatMap customHtmlBlock&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" data-line-number="13"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; slideView window&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" data-line-number="15"&gt;customHtmlBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" data-line-number="16"&gt;customHtmlBlock block &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" data-line-number="17"&gt;    Block.defaultHtml (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlBlock) &lt;span class="dt"&gt;Nothing&lt;/span&gt; block&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取りあえずは &lt;code&gt;customHtmlBlock&lt;/code&gt; 関数では標準のを呼んでいる． &lt;code&gt;window&lt;/code&gt; を引き回しているのは，ウィンドウサイズに合わせてスライドの大きさを拡縮するため．&lt;/p&gt;
&lt;h3 id="シンタックスハイライト"&gt;シンタックスハイライト&lt;/h3&gt;
&lt;p&gt;シンタックスハイライトは皆さんご存知 &lt;a href="https://highlightjs.org/"&gt;highlight.js&lt;/a&gt; を使う． Elm 製のパッケージは見当たらなかったので，js のパッケージを使うことにした．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/evancz/elm-markdown/blob/e395295cbe0b460ab051c4040011470628f05b72/src/Native/Markdown.js#L77"&gt;evancz/elm-markdown が highlight.js を使っていた&lt;/a&gt;ので，それを参考に Native モジュールを作った．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="co"&gt;// src/Native/Highlight.js&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; _matsubara0507$elmdeck$Native_Highlight &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;toHighlight&lt;/span&gt;(lang&lt;span class="op"&gt;,&lt;/span&gt; code)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; (&lt;span class="kw"&gt;typeof&lt;/span&gt; hljs &lt;span class="op"&gt;!==&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; lang &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="va"&gt;hljs&lt;/span&gt;.&lt;span class="at"&gt;listLanguages&lt;/span&gt;().&lt;span class="at"&gt;indexOf&lt;/span&gt;(lang) &lt;span class="op"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;    &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;      &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="va"&gt;hljs&lt;/span&gt;.&lt;span class="at"&gt;highlight&lt;/span&gt;(lang&lt;span class="op"&gt;,&lt;/span&gt; code&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;).&lt;span class="at"&gt;value&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; code&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;  &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;    &lt;span class="dt"&gt;toHighlight&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="at"&gt;F2&lt;/span&gt;(toHighlight)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;&lt;span class="op"&gt;}&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側はこんな感じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Native.Highlight&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;toHighlight &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;toHighlight &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;    Native.Highlight.toHighlight&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返ってくるのは &lt;code&gt;&amp;quot;&amp;lt;div&amp;gt;...&amp;lt;/div&amp;gt;&amp;quot;&lt;/code&gt; のような HTML の文字列なので，これを &lt;code&gt;Html a&lt;/code&gt; 型に変換してやる必要がある． それには jinjor 先生の &lt;a href="http://package.elm-lang.org/packages/jinjor/elm-html-parser/latest"&gt;jinjor/elm-html-parser&lt;/a&gt; を用いた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jinjor-labo.hatenablog.com/entry/2016/09/11/222251"&gt;ElmでHTMLパーサを作って公開するまでの手順 - ジンジャー研究室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これをこんな感じに呼び出す&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;customHtmlBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;customHtmlBlock block &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; block &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;        &lt;span class="dt"&gt;Block.CodeBlock&lt;/span&gt; (&lt;span class="dt"&gt;Block.Fenced&lt;/span&gt; _ fence) code &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;                language &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;                    &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;withDefault &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; fence&lt;span class="fu"&gt;.&lt;/span&gt;language&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;            code&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Utils.toHighlight language&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; precode language&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-15" data-line-number="15"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-16" data-line-number="16"&gt;            Block.defaultHtml (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlBlock) &lt;span class="dt"&gt;Nothing&lt;/span&gt; block&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-17" data-line-number="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-18" data-line-number="18"&gt;precode &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-19" data-line-number="19"&gt;precode lang code &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-20" data-line-number="20"&gt;    &lt;span class="st"&gt;&amp;quot;&amp;lt;pre&amp;gt;&amp;lt;code class=\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; lang &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; code &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どう考えても効率悪いけど(笑)&lt;/p&gt;
&lt;h3 id="数式"&gt;数式&lt;/h3&gt;
&lt;p&gt;Marp を参考にして &lt;a href="https://khan.github.io/KaTeX/"&gt;KaTeX&lt;/a&gt; を使うことにした． KaTeX も highlight.js と同じように文字列を受け取って HTML に変換した文字列を返す関数 &lt;code&gt;renderToString&lt;/code&gt; がある． 注意点は，&lt;code&gt;renderToString&lt;/code&gt; の場合は失敗すると例外を投げてくるところ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; _matsubara0507$elmdeck$Native_Katex &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;toKatex&lt;/span&gt;(code)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; (&lt;span class="kw"&gt;typeof&lt;/span&gt; katex &lt;span class="op"&gt;!==&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;    &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;      &lt;span class="cf"&gt;try&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="va"&gt;katex&lt;/span&gt;.&lt;span class="at"&gt;renderToString&lt;/span&gt;(code)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;      &lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="cf"&gt;catch&lt;/span&gt; (e) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; code&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-11" data-line-number="11"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-12" data-line-number="12"&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; code&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-13" data-line-number="13"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-15" data-line-number="15"&gt;  &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-16" data-line-number="16"&gt;    &lt;span class="dt"&gt;toKatex&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; toKatex&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-17" data-line-number="17"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-18" data-line-number="18"&gt;&lt;span class="op"&gt;}&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側はほぼ同じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Native.Katex&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;toKatex &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;toKatex &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;    Native.Katex.toKatex&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初は以下の LaTeX 表記ををパースしようと思った&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$$
  a + 1
$$&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;が難しくてやめた(笑) 結局 &lt;code&gt;katex&lt;/code&gt; のシンタックスハイライトを KaTeX にした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;customHtmlBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;customHtmlBlock block &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; block &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;        &lt;span class="dt"&gt;Block.CodeBlock&lt;/span&gt; (&lt;span class="dt"&gt;Block.Fenced&lt;/span&gt; _ fence) code &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;                language &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" data-line-number="7"&gt;                    &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;withDefault &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; fence&lt;span class="fu"&gt;.&lt;/span&gt;language&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" data-line-number="9"&gt;                toHighlight_ &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-10" data-line-number="10"&gt;                    &lt;span class="kw"&gt;if&lt;/span&gt; List.member language [ &lt;span class="st"&gt;&amp;quot;katex&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Katex&amp;quot;&lt;/span&gt; ] &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-11" data-line-number="11"&gt;                        Utils.toKatex &lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; divFormula&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-12" data-line-number="12"&gt;                    &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-13" data-line-number="13"&gt;                        Utils.toHighlight language &lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; precode language&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-14" data-line-number="14"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-15" data-line-number="15"&gt;            code&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-16" data-line-number="16"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; toHighlight_&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-17" data-line-number="17"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-18" data-line-number="18"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-20" data-line-number="20"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-21" data-line-number="21"&gt;            block&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-22" data-line-number="22"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Block.defaultHtml&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-23" data-line-number="23"&gt;                    (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlBlock)&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-24" data-line-number="24"&gt;                    &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-25" data-line-number="25"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-26" data-line-number="26"&gt;divFormula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-27" data-line-number="27"&gt;divFormula code &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-28" data-line-number="28"&gt;    &lt;span class="st"&gt;&amp;quot;&amp;lt;div class=\&amp;quot;formula\&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; code &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="インラインの数式"&gt;インラインの数式&lt;/h3&gt;
&lt;p&gt;次はインラインの数式 &lt;code&gt;$a + 1$&lt;/code&gt; を変換する． シンタックスハイライトと数式のブロック要素はかなり雑にやったが，ここはもう少し真面目にやらないといけない．&lt;/p&gt;
&lt;p&gt;インライン要素を追加する方法は &lt;a href="https://github.com/pablohirafuji/elm-markdown/tree/2.0.4#implementing-gfm-task-list"&gt;pablohirafuji/elm-markdown に少し書いてある&lt;/a&gt;． これを参考に拡張していった．&lt;/p&gt;
&lt;h4 id="カスタムインライン要素"&gt;カスタムインライン要素&lt;/h4&gt;
&lt;p&gt;インライン要素の型 &lt;code&gt;Inline i&lt;/code&gt; は次のようになっている．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Inline&lt;/span&gt; i&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;HardLineBreak&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;CodeInline&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Link&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Image&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;HtmlInline&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt;, &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)) (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Emphasis&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Custom&lt;/span&gt; i (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インライン要素を増やすには &lt;code&gt;Custom i (List (Inline i))&lt;/code&gt; を用いる． &lt;code&gt;i&lt;/code&gt; の部分に新しい型を追加すればよいのだ． なので，数式のインライン要素用の型を定義する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Formula String&lt;/code&gt; の &lt;code&gt;String&lt;/code&gt; が数式に変換すべき文字列．&lt;/p&gt;
&lt;p&gt;そして &lt;code&gt;Block b i&lt;/code&gt; だったところを &lt;code&gt;Block b Formula&lt;/code&gt; に置き換える． 次に上から順に変えていこう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;customHtmlBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;customHtmlBlock block &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; block &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;            block&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Block.defaultHtml&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;                    (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlBlock)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" data-line-number="9"&gt;                    (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlInline)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" data-line-number="11"&gt;customHtmlInline &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-12" data-line-number="12"&gt;customHtmlInline inline &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-13" data-line-number="13"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; inline &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-14" data-line-number="14"&gt;        &lt;span class="dt"&gt;Inline.Custom&lt;/span&gt; (&lt;span class="dt"&gt;Formula&lt;/span&gt; txt) _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-15" data-line-number="15"&gt;            Utils.toKatex txt&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-16" data-line-number="16"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-17" data-line-number="17"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-18" data-line-number="18"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; span []&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-20" data-line-number="20"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-21" data-line-number="21"&gt;            Inline.defaultHtml (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlInline) inline&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでは難しくない． 問題は &lt;code&gt;Custom (Formula txt) blocks&lt;/code&gt; な値をどうやって構築するか．&lt;/p&gt;
&lt;h2 id="section-3"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Inline i&lt;/code&gt; 型の &lt;code&gt;Text String&lt;/code&gt; のうち &lt;code&gt;$...$&lt;/code&gt; のモノを &lt;code&gt;Custom (Formula txt) []&lt;/code&gt; に変換する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;parseFormulaInline &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;parseFormulaInline inline &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; inline &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;        &lt;span class="dt"&gt;Inline.Text&lt;/span&gt; text &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;            &lt;span class="kw"&gt;case&lt;/span&gt; parseFormula text &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;                [] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;                    [ inline ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-9" data-line-number="9"&gt;                [ _ ] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-10" data-line-number="10"&gt;                    [ inline ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-12" data-line-number="12"&gt;                inlines &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-13" data-line-number="13"&gt;                    inlines&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-15" data-line-number="15"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-16" data-line-number="16"&gt;            [ inline ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-17" data-line-number="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-18" data-line-number="18"&gt;parseFormula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-19" data-line-number="19"&gt;parseFormula text &lt;span class="fu"&gt;=&lt;/span&gt; undefined ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;abc$1+2$def&lt;/code&gt; なども考えられるので &lt;code&gt;String -&amp;gt; List (Inline Formula)&lt;/code&gt; に変換している．&lt;/p&gt;
&lt;h4 id="パーサーを作る"&gt;パーサーを作る&lt;/h4&gt;
&lt;p&gt;いよいよパーサーだ． カレンダーのいつぞやで jinjor 先生が &lt;a href="http://package.elm-lang.org/packages/elm-tools/parser/latest"&gt;elm-tools/parser&lt;/a&gt; を紹介してくれた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jinjor/items/d0d4b83b530251df913e"&gt;Elm で構文解析しよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が，自分には Haskell の Parsec 由来の &lt;a href="http://package.elm-lang.org/packages/elm-community/parser-combinators/latest"&gt;elm-community/parser-combinators&lt;/a&gt; の方が使いやすかったのでコッチに逃げた(ゴメンナサイ)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;withFormula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s ( &lt;span class="dt"&gt;String&lt;/span&gt;, &lt;span class="dt"&gt;String&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;withFormula &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;    (,) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;concat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many noneDal) &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; formula&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;formula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;formula &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;    &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;concat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; between (string &lt;span class="st"&gt;&amp;quot;$&amp;quot;&lt;/span&gt;) (string &lt;span class="st"&gt;&amp;quot;$&amp;quot;&lt;/span&gt;) (many term)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;term &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;term &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;    escapedChar &lt;span class="fu"&gt;&amp;lt;|&amp;gt;&lt;/span&gt; noneDal&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;noneDal &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;noneDal &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;    &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;fromChar &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; noneOf [ &lt;span class="ch"&gt;&amp;#39;$&amp;#39;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" data-line-number="17"&gt;escapedChar &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" data-line-number="18"&gt;escapedChar &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" data-line-number="19"&gt;    &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;append &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; string &lt;span class="st"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;fromChar &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; anyChar)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;abc$1+2$&lt;/code&gt; が &lt;code&gt;(&amp;quot;abc&amp;quot;, &amp;quot;1+2&amp;quot;)&lt;/code&gt; になるようにパーサーを書いた(&lt;code&gt;$1+2$&lt;/code&gt; は &lt;code&gt;(&amp;quot;&amp;quot;, &amp;quot;1+2&amp;quot;)&lt;/code&gt; となる)． このパーサーを再帰的に適用する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;parseFormula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;parseFormula text &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; Combine.parse withFormula text &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;        &lt;span class="dt"&gt;Result.Err&lt;/span&gt; ( (), stream, _ ) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;            &lt;span class="kw"&gt;if&lt;/span&gt; stream&lt;span class="fu"&gt;.&lt;/span&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;                []&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;            &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;                [ &lt;span class="dt"&gt;Inline.Text&lt;/span&gt; stream&lt;span class="fu"&gt;.&lt;/span&gt;&lt;span class="kw"&gt;data&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;        &lt;span class="dt"&gt;Result.Ok&lt;/span&gt; ( (), stream, ( txt, exp ) ) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;            &lt;span class="dt"&gt;Inline.Text&lt;/span&gt; txt&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;&lt;span class="ot"&gt;                ::&lt;/span&gt; &lt;span class="dt"&gt;Inline.Custom&lt;/span&gt; (&lt;span class="dt"&gt;Formula&lt;/span&gt; exp) []&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;&lt;span class="ot"&gt;                ::&lt;/span&gt; parseFormula stream&lt;span class="fu"&gt;.&lt;/span&gt;input&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parse withFormula text&lt;/code&gt; をすると，core の &lt;a href="http://package.elm-lang.org/packages/elm-lang/core/latest/Result#Result"&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; 型を返す． &lt;code&gt;stream&lt;/code&gt; はパースした残りなので，パース成功 &lt;code&gt;Result.Ok&lt;/code&gt; なら &lt;code&gt;stream&lt;/code&gt; に再度パーサーをかけ，失敗 &lt;code&gt;Result.Err&lt;/code&gt; ならそのまま返す．&lt;/p&gt;
&lt;h4 id="高階関数"&gt;高階関数&lt;/h4&gt;
&lt;p&gt;pablohirafuji/elm-markdown には便利な高階関数がいくつか定義されている．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;walk &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;walkInlines &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Inline&lt;/span&gt; i) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前述したとおり &lt;code&gt;Block b i&lt;/code&gt; 型は再帰型になっているので，&lt;code&gt;Block b i&lt;/code&gt; や &lt;code&gt;Inline i&lt;/code&gt; をリストで持っている． なので，&lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#walk"&gt;&lt;code&gt;walk&lt;/code&gt;&lt;/a&gt; や &lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#walkInlines"&gt;&lt;code&gt;walkInlines&lt;/code&gt;&lt;/a&gt; 関数はそれらに対し再帰的に関数を適用してくれる．&lt;/p&gt;
&lt;p&gt;しかし，用意した関数は &lt;code&gt;Inline Formula -&amp;gt; List (Inline Formula)&lt;/code&gt; なのでどちらも使えない． なので，&lt;code&gt;walkInlinesWithConcat : (Inline i -&amp;gt; List (Inline i)) -&amp;gt; Block b i -&amp;gt; Block b i&lt;/code&gt; というのを定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;parseFormulaInBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;parseFormulaInBlock &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;    Block.walkInlinesWithConcat parseFormulaInline&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこれを呼ぶだけ&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;toSlide &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;toSlide window blocks &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" data-line-number="3"&gt;    blocks&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" data-line-number="4"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.map (Block.walk parseFormulaInBlock)&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-5" data-line-number="5"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.concatMap customHtmlBlock&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-6" data-line-number="6"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; slideView window&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="demo"&gt;Demo&lt;/h2&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-elmdeck/elmdeck.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://matsubara0507.github.io/elmdeck/"&gt;GitHub Pages においた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;長くなったのでココまで． Electron の部分も面白いんだけどなぁ．&lt;/p&gt;
&lt;p&gt;頑張って作っていくぞ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2017-12-16-re-adventar-slack-bot-part3.html</id><title type="text">Re: ゼロから作る ADVENTAR の Slack Bot (GAS 編)</title><updated>2017-12-16T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2017-12-16-re-adventar-slack-bot-part3.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Re: ゼロから作る ADVENTAR の Slack Bot (GAS 編)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2017-12-16" itemprop="datePublished"&gt;
        Dec 16, 2017
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/GoogleAppsScript.html"&gt;GoogleAppsScript&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt; &lt;a href="/tags/bot.html"&gt;bot&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://adventar.org/calendars/2300"&gt;IGGG アドベントカレンダー 2017&lt;/a&gt; の16日目の記事です．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;前後編で終わると言ったが，あれはウソだ！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2017-12-02-re-adventar-slack-bot-part1.html"&gt;Re: ゼロから作る ADVENTAR の Slack Bot (Haskell 編) - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017-12-09-re-adventar-slack-bot-part2.html"&gt;Re: ゼロから作る ADVENTAR の Slack Bot (CircleCI 編) - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ADVENTAR の更新を通知する Slack Bot を Haskell で作って，Circle CI で回すとこまでは話した． 一応話はそこでお終いだが「&lt;strong&gt;Bot なんだから Slack 側からのアクションも受け取れろよ！&lt;/strong&gt;」みたいな圧力を受けた(嘘)ので，今回はそこら辺を何とかした話です．&lt;/p&gt;
&lt;h2 id="戦略"&gt;戦略&lt;/h2&gt;
&lt;p&gt;もちろん，弊サークルは貧者なので Google Apps Script を使う． 戦略は簡単，&lt;strong&gt;GAS から GitHub に向けて空コミットを送る&lt;/strong&gt; だけ． そのコミットで CircleCI が動き出す (完)&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/re-adventar-slack-bot/run-with-gas.jpg" /&gt;&lt;/p&gt;
&lt;h2 id="作る"&gt;作る&lt;/h2&gt;
&lt;h3 id="gas-で-slack-bot"&gt;GAS で Slack Bot&lt;/h3&gt;
&lt;p&gt;Slack から受け取るときは &lt;a href="https://api.slack.com/custom-integrations/outgoing-webhooks"&gt;Outgoing Webhooks&lt;/a&gt; を使う． 適当にトリガーワードを決める(今回は &lt;code&gt;update?&lt;/code&gt;)． そのワードが設定したチャンネルで打たれると，空コミットを送るのだ．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;ただ，打ってから結果を CircleCI が返すまで1分ほどかかるので「ちょっと待って」って感じのメッセージを送ることにしよう． そこで，いつものやつ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/soundTricker/items/43267609a870fc9c7453"&gt;Slack BotをGASでいい感じで書くためのライブラリを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;doPost&lt;/span&gt;(e) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; prop &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;PropertiesService&lt;/span&gt;.&lt;span class="at"&gt;getScriptProperties&lt;/span&gt;().&lt;span class="at"&gt;getProperties&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;  &lt;span class="cf"&gt;if&lt;/span&gt; (&lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;VERIFY_TOKEN&lt;/span&gt; &lt;span class="op"&gt;!=&lt;/span&gt; &lt;span class="va"&gt;e&lt;/span&gt;.&lt;span class="va"&gt;parameter&lt;/span&gt;.&lt;span class="at"&gt;token&lt;/span&gt;) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;    &lt;span class="cf"&gt;throw&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;Error&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;invalid token.&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;  &lt;span class="co"&gt;/* for Slack */&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; slackApp &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;SlackApp&lt;/span&gt;.&lt;span class="at"&gt;create&lt;/span&gt;(&lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;SLACK_API_TOKEN&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; BOT_NAME &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;gunmer&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; BOT_ICON &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;http://drive.google.com/uc?export=view&amp;amp;id=&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;ICON_ID&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; option &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;username &lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; BOT_NAME&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;icon_url &lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; BOT_ICON&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;link_names &lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="op"&gt;};&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; channelName &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;e&lt;/span&gt;.&lt;span class="va"&gt;parameter&lt;/span&gt;.&lt;span class="at"&gt;channel_name&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;  &lt;span class="va"&gt;Logger&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(&lt;span class="va"&gt;slackApp&lt;/span&gt;.&lt;span class="at"&gt;postMessage&lt;/span&gt;(channelName&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;just a moment...&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; option))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" data-line-number="17"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，&lt;code&gt;doPost&lt;/code&gt; 関数を呼び出す関数を用意して，テストではそいつを実行するとデバッグがはかどる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;test&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; prop &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;PropertiesService&lt;/span&gt;.&lt;span class="at"&gt;getScriptProperties&lt;/span&gt;().&lt;span class="at"&gt;getProperties&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; e &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;    &lt;span class="dt"&gt;parameter&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;      &lt;span class="dt"&gt;token&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;VERIFY_TOKEN&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;      &lt;span class="dt"&gt;text&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;update?&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;      &lt;span class="dt"&gt;channel_name&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;bot-test&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;  &lt;span class="at"&gt;doPost&lt;/span&gt;(e)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gas-で-github-api"&gt;GAS で GitHub API&lt;/h3&gt;
&lt;p&gt;GitHub に任意のコミットを出すためには，GitHub API の &lt;a href="https://developer.github.com/v3/git"&gt;Git Data&lt;/a&gt; を使う．&lt;/p&gt;
&lt;p&gt;GitHub API を GAS で簡単に扱うために昔作った&lt;a href="https://github.com/matsubara0507/gasdump/tree/githubapi/GitHubAPI"&gt;ライブラリ&lt;/a&gt;があるので，コレを使えば良い(ググったら他にも&lt;a href="https://github.com/soundTricker/gas-github"&gt;あった&lt;/a&gt;けど，Git Data は未実装っぽい)． 昔のオレ Good job !&lt;/p&gt;
&lt;p&gt;使い方については&lt;a href="https://matsubara0507.github.io/posts/2017-05-03-make-githubapi-lib-for-gas.html"&gt;昔書いた記事&lt;/a&gt;を参考にして．&lt;/p&gt;
&lt;p&gt;取りあえずは，こんな感じにすれば準備OK．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;doPost&lt;/span&gt;(e) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; prop &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;PropertiesService&lt;/span&gt;.&lt;span class="at"&gt;getScriptProperties&lt;/span&gt;().&lt;span class="at"&gt;getProperties&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;  &lt;span class="cf"&gt;if&lt;/span&gt; (&lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;VERIFY_TOKEN&lt;/span&gt; &lt;span class="op"&gt;!=&lt;/span&gt; &lt;span class="va"&gt;e&lt;/span&gt;.&lt;span class="va"&gt;parameter&lt;/span&gt;.&lt;span class="at"&gt;token&lt;/span&gt;) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;    &lt;span class="cf"&gt;throw&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;Error&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;invalid token.&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;  &lt;span class="co"&gt;/* push empty commit */&lt;/span&gt;  &lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; option &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;name&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;NAME&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;email&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;EMAIL&lt;/span&gt; &lt;span class="op"&gt;};&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; github &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="va"&gt;GitHubAPI&lt;/span&gt;.&lt;span class="at"&gt;GitHubAPI&lt;/span&gt;(&lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;GITHUB_USERNAME&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;GITHUB_REPO&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; option)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;  ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit 用の名前(&lt;code&gt;prop.NAME&lt;/code&gt;)とメールアドレス(&lt;code&gt;prop.EMAIL&lt;/code&gt;)に，API を叩くためのトークン(&lt;code&gt;prop.GITHUB_TOKEN&lt;/code&gt;)と，API を叩く先のアカウント(&lt;code&gt;prop.GITHUB_USERNAME&lt;/code&gt;)とリポジトリ(&lt;code&gt;prop.GITHUB_REPO&lt;/code&gt;)をスクリプトのプロパティに定義してある(直接書いたって良い)．&lt;/p&gt;
&lt;h3 id="空コミットを出す"&gt;空コミットを出す&lt;/h3&gt;
&lt;p&gt;Git は &lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;tree&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;， &lt;code&gt;tag&lt;/code&gt; の4つのオブジェクト(ファイル)を使って過去のデータなどを管理している． &lt;code&gt;blob&lt;/code&gt; はファイルそのもの，&lt;code&gt;tree&lt;/code&gt; はディレクトリ構造，&lt;code&gt;commit&lt;/code&gt; と &lt;code&gt;tag&lt;/code&gt; は名前の通りコミットとタグを表している． また，どの種類のオブジェクトも SHA-1 ハッシュ値で名前付けされている．&lt;/p&gt;
&lt;p&gt;コミットを出すには，&lt;code&gt;commit&lt;/code&gt; オブジェクトを作る必要があり，その中には親コミットと &lt;code&gt;tree&lt;/code&gt; オブジェクトの SHA-1 が書かれている． では空コミットの場合はどうなるのか． 簡単だ，&lt;strong&gt;親コミットと同じ &lt;code&gt;tree&lt;/code&gt; オブジェクトを中に書けばよい&lt;/strong&gt; ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;doPost&lt;/span&gt;(e) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;  ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; github &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="va"&gt;GitHubAPI&lt;/span&gt;.&lt;span class="at"&gt;GitHubAPI&lt;/span&gt;(&lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;GITHUB_USERNAME&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;GITHUB_REPO&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; option)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; branch &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;github&lt;/span&gt;.&lt;span class="at"&gt;getBranch&lt;/span&gt;(&lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;GITHUB_BRANCH&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; pcommit &lt;span class="op"&gt;=&lt;/span&gt; branch[&lt;span class="st"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;][&lt;span class="st"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; ptree &lt;span class="op"&gt;=&lt;/span&gt; branch[&lt;span class="st"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;][&lt;span class="st"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;][&lt;span class="st"&gt;&amp;#39;tree&amp;#39;&lt;/span&gt;][&lt;span class="st"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; commit &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;github&lt;/span&gt;.&lt;span class="at"&gt;createCommit&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;empty!&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; ptree&lt;span class="op"&gt;,&lt;/span&gt; pcommit)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" data-line-number="9"&gt;  &lt;span class="va"&gt;github&lt;/span&gt;.&lt;span class="at"&gt;updateReference&lt;/span&gt;(&lt;span class="va"&gt;prop&lt;/span&gt;.&lt;span class="at"&gt;GITHUB_BRANCH&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; commit[&lt;span class="st"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" data-line-number="11"&gt;  ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-12" data-line-number="12"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後にしてるのは，ブランチ指しているコミットの更新である．&lt;/p&gt;
&lt;h2 id="完成"&gt;完成&lt;/h2&gt;
&lt;p&gt;&lt;img src="/assets/re-adventar-slack-bot/adventar-bot-2.jpg" /&gt;&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;今回は少なめ． というかすごく簡単にできた． 昔のオレ Good job !!&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20171212/1513050147</id><title type="text">[Haskell]goな関数</title><updated>2017-12-12T03:42:27Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20171212/1513050147"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;これは「&lt;a href="https://qiita.com/advent-calendar/2017/haskell2" target="_blank"&gt;Haskell (その2) Advent Calendar 2017&lt;/a&gt;」の1日目の記事です。遅くなってすいません。&lt;/p&gt;
&lt;p&gt;読者として末尾再帰ぐらいは理解しているHaskellerを想定しています。&lt;/p&gt;
&lt;h4&gt;トップレベルとローカル関数&lt;/h4&gt;
&lt;p&gt;再帰を用いて関数を書いているとき、トップレベルで再帰するか、ローカル関数で再帰するか、ときどき迷う。この記事では、僕なりの判断基準を示したい。&lt;/p&gt;
&lt;p&gt;Data.Listで定義されている再帰が必要な関数は、ほとんどがトップレベルで再帰している。代表例のmapの例を見てみよう。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
map &lt;span class="synStatement"&gt;::&lt;/span&gt; (a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; b) &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; [a] &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; [b]
map _ []     &lt;span class="synStatement"&gt;=&lt;/span&gt; []
map f (x&lt;span class="synStatement"&gt;:&lt;/span&gt;xs) &lt;span class="synStatement"&gt;=&lt;/span&gt; f x &lt;span class="synStatement"&gt;:&lt;/span&gt; map f xs
&lt;/pre&gt;

&lt;p&gt;mapをローカル関数を使う実装にしてみよう。この記事では、ローカル関数名としてgoを用いる。(loopを使う流儀もある。)&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
map' &lt;span class="synStatement"&gt;::&lt;/span&gt; (a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; b) &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; [a] &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; [b]
map' f xxs &lt;span class="synStatement"&gt;=&lt;/span&gt; go [] xxs
  &lt;span class="synType"&gt;where&lt;/span&gt;
    go acc []     &lt;span class="synStatement"&gt;=&lt;/span&gt; acc
    go acc (x&lt;span class="synStatement"&gt;:&lt;/span&gt;xs) &lt;span class="synStatement"&gt;=&lt;/span&gt; go (acc &lt;span class="synStatement"&gt;++&lt;/span&gt; [f x]) xs
&lt;/pre&gt;

&lt;p&gt;Haskellerなら、(++)を使いリストの末尾に要素を追加していることに違和感を覚えるだろう。&lt;/p&gt;
&lt;p&gt;以前、NTT Dataで利用されたHaskellドリルが話題となった。全体的にはよいのだけれど、上記のmap'のように、必ずwhereの中にローカル関数を定義させていたことには賛同できなかった。&lt;/p&gt;
&lt;p&gt;Haskellを習得する際は、リストプログラミングから入ることが多く、初心者はどうしてもトップレベルで再帰しがちである。Haskellドリルには、これを矯正する効果が多少はあるかもしれない。&lt;/p&gt;
&lt;p&gt;一方、ローカル関数で再帰する例として、以下のコードを取り上げる。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
udpLookup &lt;span class="synStatement"&gt;::&lt;/span&gt; ByteString
          &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; Socket
          &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; Int
          &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; (DNSMessage &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; Bool)
          &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; Int
          &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; (Socket &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; IO DNSMessage)
          &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; IO DNSMessage
udpLookup query sock tm checkSeqno retry rcv &lt;span class="synStatement"&gt;=&lt;/span&gt; go &lt;span class="synConstant"&gt;0&lt;/span&gt; False
  &lt;span class="synType"&gt;where&lt;/span&gt;
    go cnt mismatch
      &lt;span class="synStatement"&gt;|&lt;/span&gt; cnt &lt;span class="synStatement"&gt;==&lt;/span&gt; retry &lt;span class="synStatement"&gt;=&lt;/span&gt; &lt;span class="synStatement"&gt;if&lt;/span&gt; mismatch &lt;span class="synStatement"&gt;then&lt;/span&gt;
                         E.throwIO SequenceNumberMismatch
                       &lt;span class="synStatement"&gt;else&lt;/span&gt;
                         E.throwIO RetryLimitExceeded
      &lt;span class="synStatement"&gt;|&lt;/span&gt; otherwise    &lt;span class="synStatement"&gt;=&lt;/span&gt; &lt;span class="synStatement"&gt;do&lt;/span&gt;
          mres &lt;span class="synStatement"&gt;&amp;#60;-&lt;/span&gt; timeout tm (send sock query &lt;span class="synStatement"&gt;&amp;#62;&amp;#62;&lt;/span&gt; rcv sock)
          &lt;span class="synStatement"&gt;case&lt;/span&gt; mres &lt;span class="synStatement"&gt;of&lt;/span&gt;
              Nothing  &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; go (cnt &lt;span class="synStatement"&gt;+&lt;/span&gt; &lt;span class="synConstant"&gt;1&lt;/span&gt;) False
              Just res
                &lt;span class="synStatement"&gt;|&lt;/span&gt; checkSeqno res &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; &lt;span class="synStatement"&gt;if&lt;/span&gt; trunCation &lt;span class="synStatement"&gt;$&lt;/span&gt; flags &lt;span class="synStatement"&gt;$&lt;/span&gt; header res &lt;span class="synStatement"&gt;then&lt;/span&gt;
                                      E.throwIO TCPFallback
                                    &lt;span class="synStatement"&gt;else&lt;/span&gt;
                                      return res
                &lt;span class="synStatement"&gt;|&lt;/span&gt; otherwise      &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; go (cnt &lt;span class="synStatement"&gt;+&lt;/span&gt; &lt;span class="synConstant"&gt;1&lt;/span&gt;) True
&lt;/pre&gt;

&lt;p&gt;このコードの意味は分からなくてもよいが、このコードをトップレベルでの再帰に書き直してみると、次のようなことが分かるだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; 引数の数が多くなって、再帰の際に変化する引数がどれなのパッと見分からなくなる&lt;/li&gt;
&lt;li&gt; 蓄積変数など本来関数に閉じているべきパラメータを外に見せなければならなくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さてさて、トップレベルとローカル関数を使い分ける基準はあるのだろうか？&lt;/p&gt;
&lt;h4&gt;遅延評価とトップレベル&lt;/h4&gt;
&lt;p&gt;Data.Listの関数がトップレベルで定義されているのは、遅延評価と関係がある。私は遅延評価のファンではない。なぜなら、遅延評価が役立つ場面は、以下の3つしかないからである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; リスト処理&lt;/li&gt;
&lt;li&gt; CASでの変数の更新&lt;/li&gt;
&lt;li&gt; 純粋性のテスト&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskellのデフォルトの評価戦略が正格評価だったらよかったのにと思う。ただし、遅延評価がリスト処理に役立つのは間違いない。狭義の意味では、関数プログラミングはリストプログラミングであるから、関数プログラミングに遅延評価が必要であると勘違いしやすい。&lt;/p&gt;
&lt;p&gt;Haskellで構造が遅延する一般的なデータ型はリストかData.Sequenceぐらいである。Data.Mapでさえ構造は遅延しない。私の定義では、関数プログラミングとは不変データプログラミングである。Haskellでは、構造が正格な不変データが多いので、デフォルトは正格評価であってほしい。&lt;/p&gt;
&lt;p&gt;デフォルトを正格評価にするStrict/StrictDataプラグマは、GHC 8.0で実装された。GHC 8.4がリリースされれば、3つのメジャーバージョンを保守するポリシーでは GHC 7.x を捨てられるので、Strict/StrictDataプラグラマを活用できるようになるだろう。&lt;/p&gt;
&lt;p&gt;前置きが長くなったが、遅延評価がリスト処理に役立つ例を見てみよう。以下は、map とhead を組み合わせた例である。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
   head &lt;span class="synStatement"&gt;$&lt;/span&gt; map (&lt;span class="synStatement"&gt;+&lt;/span&gt;&lt;span class="synConstant"&gt;1&lt;/span&gt;) [&lt;span class="synConstant"&gt;1&lt;/span&gt;,&lt;span class="synConstant"&gt;2&lt;/span&gt;,&lt;span class="synConstant"&gt;3&lt;/span&gt;,&lt;span class="synConstant"&gt;4&lt;/span&gt;,&lt;span class="synConstant"&gt;5&lt;/span&gt;]
&lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; head (&lt;span class="synConstant"&gt;2&lt;/span&gt; &lt;span class="synStatement"&gt;:&lt;/span&gt; map (&lt;span class="synStatement"&gt;+&lt;/span&gt;&lt;span class="synConstant"&gt;1&lt;/span&gt;) [&lt;span class="synConstant"&gt;2&lt;/span&gt;,&lt;span class="synConstant"&gt;3&lt;/span&gt;,&lt;span class="synConstant"&gt;4&lt;/span&gt;,&lt;span class="synConstant"&gt;5&lt;/span&gt;])
&lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; &lt;span class="synConstant"&gt;2&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;mapでは、トップレベルで再帰しているため、構造を再帰の外で作っている。そのため、遅延評価の下では無駄な計算が起こらない。一方、ローカル関数を使うmap'だと次のようになる。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
   head &lt;span class="synStatement"&gt;$&lt;/span&gt; map' (&lt;span class="synStatement"&gt;+&lt;/span&gt;&lt;span class="synConstant"&gt;1&lt;/span&gt;) [&lt;span class="synConstant"&gt;1&lt;/span&gt;,&lt;span class="synConstant"&gt;2&lt;/span&gt;,&lt;span class="synConstant"&gt;3&lt;/span&gt;,&lt;span class="synConstant"&gt;4&lt;/span&gt;,&lt;span class="synConstant"&gt;5&lt;/span&gt;]
&lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; head [&lt;span class="synConstant"&gt;2&lt;/span&gt;,&lt;span class="synConstant"&gt;3&lt;/span&gt;,&lt;span class="synConstant"&gt;4&lt;/span&gt;,&lt;span class="synConstant"&gt;5&lt;/span&gt;,&lt;span class="synConstant"&gt;6&lt;/span&gt;]
&lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; &lt;span class="synConstant"&gt;2&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;という訳で、リストを生成する関数はトップレベルで再帰するべきである。&lt;/p&gt;
&lt;h4&gt;ローカル関数の利点&lt;/h4&gt;
&lt;p&gt;では、リストを生成しない関数はどうだろうか？ 上記のローカル関数を使う関数をトップレベルに書き換えたときの欠点が、ローカル関数を使う関数の利点であるから：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; 再帰の際に変化する引数がどれなのかパッと見て分かる&lt;/li&gt;
&lt;li&gt; 関数に閉じているべきパラメータを外に見せなくて済む&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実は、もう一つ性能が良くなるという利点もある。Haskellの通常のデータはポインターで指されており、即値ではない。Intであろうと本当の値はポインターで指されている。トップレベルの再帰に、たとえば Int を使うと、関数を呼び出すごとにポインターをたどることになる。公開されている関数の引数は、即値に最適化できないからである。&lt;/p&gt;
&lt;p&gt;ローカル関数を使うと、コンパイラは最適化に積極的になれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; ローカル関数の引数は、可能であれば即値が使われる&lt;/li&gt;
&lt;li&gt; ローカル関数から見たトップレベルの引数も可能であれば即値が使われる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こういう形式をWorker Wrapperと言って、プログラマーが少し手助けすることでコンパイラーに最適化を促す手法の一種である。たとえば、udpLookupなら、go が Worker、udpLookup が Wrapper である。&lt;/p&gt;
&lt;h4&gt;まとめ&lt;/h4&gt;
&lt;p&gt;結論はいたって簡単だ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; リストを生成する関数はトップレベルで再帰せよ&lt;/li&gt;
&lt;li&gt; それ以外の関数ではローカル関数で再帰せよ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20171205/1512455644</id><title type="text">[TLS][Haskell]TLS 1.3 開発日記 その23 BoringSSL</title><updated>2017-12-05T06:34:04Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20171205/1512455644"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;BoringSSLでTLS 1.3を使う方法のまとめ。&lt;/p&gt;
&lt;h4&gt;インストール&lt;/h4&gt;
&lt;p&gt;ビルドシステムNinjaをあらかじめインストールしておく。&lt;/p&gt;
&lt;pre&gt;
% git clone &lt;a href="https://boringssl.googlesource.com/boringssl" target="_blank"&gt;https://boringssl.googlesource.com/boringssl&lt;/a&gt;
% cd boringssl
% mkdir build &amp;&amp; cd build &amp;&amp; cmake -GNinja .. &amp;&amp; ninja bssl
&lt;/pre&gt;
&lt;p&gt;ビルドは感心するほど速い！&lt;/p&gt;
&lt;h4&gt;BoringSSLサーバ&lt;/h4&gt;
&lt;pre&gt;
% tool/bssl server -tls13-variant -accept 13443 -key $SOMEWHERE/key.pem -cert $SOMEWHERE/certificate.pem -loop -early-data
&lt;/pre&gt;
&lt;p&gt;追記：-tls13-draft22-variantはなくなったようだ。&lt;/p&gt;
&lt;h4&gt;BoringSSLクライアント&lt;/h4&gt;
&lt;p&gt;Full：&lt;/p&gt;
&lt;pre&gt;
% tool/bssl client -tls13-variant draft22 -connect 127.0.0.1:13443
&lt;/pre&gt;
&lt;p&gt;HRR：&lt;/p&gt;
&lt;pre&gt;
% tool/bssl client -tls13-variant draft22 -connect 127.0.0.1:13443 -curves P-521:x25519
&lt;/pre&gt;
&lt;p&gt;PSK：&lt;/p&gt;
&lt;pre&gt;
% tool/bssl client -tls13-variant draft22 -connect 127.0.0.1:13443 -test-resumption
&lt;/pre&gt;
&lt;p&gt;0RTT：&lt;/p&gt;
&lt;pre&gt;
% tool/bssl client -tls13-variant draft22 -connect 127.0.0.1:13443 -test-resumption -early-data @$SOMEWHERE/early-data.txt
&lt;/pre&gt;
&lt;/div&gt;
</summary></entry></feed>
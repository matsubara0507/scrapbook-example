<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Sample Site Posts</title><id>https://matsubara0507.github.io/scrapbook-example/atom.xml</id><updated>2018-03-24T00:00:00Z</updated><link href="https://matsubara0507.github.io/scrapbook-example"/><entry><id>https://haskell.e-bigmoon.com/posts/2018/03-24-quiz-1.html</id><title type="text">Haskell Quiz はじめました。 No.1 type, newtype, data</title><updated>2018-03-24T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/03-24-quiz-1.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;何となくクイズはじめました！(頑張って続けます・・・)&lt;/p&gt;
&lt;p&gt;間違ってたら &lt;code&gt;twitter&lt;/code&gt; や &lt;a href="https://github.com/e-bigmoon/haskell-blog/issues"&gt;github の issue&lt;/a&gt; で教えてください！&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="haskell-quiz-no.1-type-newtype-data"&gt;Haskell Quiz No.1 type, newtype, data&lt;/h2&gt;
&lt;p&gt;難易度: λλλ&lt;/p&gt;
&lt;p&gt;元ネタは &lt;code&gt;Haskell wiki&lt;/code&gt; だったと思いますが、忘れてしまいました・・・。&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Foo&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Foo1&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Foo1&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Foo2&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Foo2&lt;/span&gt; &lt;span class="fu"&gt;!&lt;/span&gt;&lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Foo3&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Foo3&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;x1 &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="dt"&gt;Foo1&lt;/span&gt; undefined &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;     &lt;span class="dt"&gt;Foo1&lt;/span&gt; _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;x2 &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="dt"&gt;Foo2&lt;/span&gt; undefined &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;     &lt;span class="dt"&gt;Foo2&lt;/span&gt; _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;x3 &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="dt"&gt;Foo3&lt;/span&gt; undefined &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;     &lt;span class="dt"&gt;Foo3&lt;/span&gt; _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;y1 &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; undefined &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" data-line-number="17"&gt;     &lt;span class="dt"&gt;Foo1&lt;/span&gt; _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" data-line-number="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" data-line-number="19"&gt;y2 &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; undefined &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" data-line-number="20"&gt;     &lt;span class="dt"&gt;Foo2&lt;/span&gt; _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" data-line-number="22"&gt;y3 &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; undefined &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-23" data-line-number="23"&gt;     &lt;span class="dt"&gt;Foo3&lt;/span&gt; _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-24" data-line-number="24"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-25" data-line-number="25"&gt;&lt;span class="ot"&gt;int ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-26" data-line-number="26"&gt;int &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-27" data-line-number="27"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-28" data-line-number="28"&gt;yInt &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; int &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-29" data-line-number="29"&gt;       _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下の値はそれぞれ何になるでしょう？&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;x1   &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;???&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;x2   &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;???&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;x3   &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;???&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;y1   &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;???&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;y2   &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;???&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;y3   &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;???&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;yInt &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;???&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全部正解できたら普通にすごいです。&lt;/p&gt;
&lt;p&gt;答えは次回！&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-03-24-poly-variant-with-haskell.html</id><title type="text">多相バリアントを使いこなそう with Haskell</title><updated>2018-03-24T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-03-24-poly-variant-with-haskell.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;多相バリアントを使いこなそう with Haskell&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-03-24" itemprop="datePublished"&gt;
        Mar 24, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/extensible-package.html"&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://sampou.connpass.com/event/80492/"&gt;この前の「『Haskellによる関数プログラミングの思考法』読書会」&lt;/a&gt;の後の懇親会(？)で &lt;strong&gt;多相バリアント&lt;/strong&gt; の話になりまして，その時に以下の記事が話題にあがった．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://osiire.hatenablog.com/entry/20090510/1241957550"&gt;多相バリアントを使いこなそう(1) - osiire’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://osiire.hatenablog.com/entry/20090512/1242055541"&gt;多相バリアントを使いこなそう(2) - osiire’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://osiire.hatenablog.com/entry/20090514/1242235108"&gt;多相バリアントを使いこなそう(3) - osiire’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://osiire.hatenablog.com/entry/20090516/1242456737"&gt;多相バリアントを使いこなそう(4) - osiire’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの記事は OCaml で多相バリアントの紹介をしています． ということで，同様の議論を Haskell でもしてみた！というのが，この記事の内容です．&lt;/p&gt;
&lt;h3 id="haskell-と多相バリアント"&gt;Haskell と多相バリアント&lt;/h3&gt;
&lt;p&gt;悲しいことに，Haskell には組み込みで多相バリアントは無い(バリアントとは Haskell の代数的データ型における直和型と概ね一緒)． なので，多相バリアントを Haskell で模倣するために，毎度おなじみ &lt;a href="https://hackage.haskell.org/package/extensible"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; パッケージを用いる．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;ネタバレをすると Haskell で同じことをするのは難しかった． なので，本質的な議論は osiire’s blog の方を読んだ方がいいと思うよ． 結局，本記事は osiire’s blog のと同様のことを Haskell もとい，&lt;code&gt;extensible&lt;/code&gt; パッケージでどのように行うか，という記事って感じになった．&lt;/p&gt;
&lt;h2 id="多相バリアントの基本"&gt;多相バリアントの基本&lt;/h2&gt;
&lt;p&gt;多相バリアントとは，名前の通り，多相的なバリアントである． バリアントは前述したとおり，直和型と基本的に同じ．&lt;/p&gt;
&lt;p&gt;例えば，普通の直和型として次のようなものがあったとする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Card&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Joker&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Number&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;InData&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Str&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Number&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「最初の型はジョーカーと数字札があるトランプの型，次の型は何かファイルからデータを読み込む時に文字列と数字のデータを統一的に扱うための型」だそうです(&lt;a href="http://osiire.hatenablog.com/entry/20090510/1241957550"&gt;多相バリアントを使いこなそう(1)&lt;/a&gt; より)． どちらの型にも &lt;code&gt;Number Int&lt;/code&gt; という部分があるので次のような関数を両方に適用できそうな気がする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;getNumber (&lt;span class="dt"&gt;Number&lt;/span&gt; n) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; n&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;getNumber _ &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん，そんなことはできない(そもそも，Haskell の値コンストラクタは名前空間を共有してしまうので同時に利用はできないのだが…)． そこで多相バリアントを用いれば，このような関数を実装することが出来るようになる．&lt;/p&gt;
&lt;h3 id="多相バリアントを定義"&gt;多相バリアントを定義&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;extensible&lt;/code&gt; パッケージを使って多相バリアント(拡張可能バリアント)を定義すると次のようになる(&lt;code&gt;DataKinds&lt;/code&gt; と &lt;code&gt;TypeOperators&lt;/code&gt; 言語拡張が必要)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Card&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;joker&amp;quot; &amp;gt;: (), &amp;quot;number&amp;quot; &amp;gt;: Int ]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;InData&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;str&amp;quot; &amp;gt;: String, &amp;quot;number&amp;quot; &amp;gt;: Int ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とくに細かい説明はしないが，なんとなく意味が読み取れるだろう． &lt;code&gt;getNumber&lt;/code&gt; 関数の実装は難しいので後回しにするとして，&lt;code&gt;getNumber&lt;/code&gt; 関数の型は &lt;code&gt;extensible&lt;/code&gt; パッケージの &lt;a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Inclusion.html#t:-8838-"&gt;&lt;code&gt;⊆&lt;/code&gt;&lt;/a&gt; 型クラスを用いて次のように書ける(意味は見た通り)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE FlexibleContexts #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;span class="ot"&gt;getNumber ::&lt;/span&gt; (&lt;span class="ch"&gt;&amp;#39;[&amp;quot;number&amp;quot; &amp;gt;: Int] ⊆ xs) =&amp;gt; Variant xs -&amp;gt; Maybe Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;getNumber &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GHCi で試してみる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t getNumber (undefined&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Card&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;getNumber (undefined&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Card&lt;/span&gt;)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t getNumber (undefined&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;InData&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;getNumber (undefined&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;InData&lt;/span&gt;)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確かに動作する．&lt;/p&gt;
&lt;h2 id="包含関係"&gt;包含関係&lt;/h2&gt;
&lt;p&gt;さて，&lt;code&gt;getNumber&lt;/code&gt; 関数をどのように実装するかだが，その前に多相バリアントの包含関係を議論しておく(この議論は&lt;a href="http://osiire.hatenablog.com/entry/20090514/1242235108"&gt;多相バリアントを使いこなそう(3)&lt;/a&gt;に対応する)．&lt;/p&gt;
&lt;p&gt;次のような簡単なバリアント型を考える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="dt"&gt;HogeFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;HogeFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;hoge&amp;quot; &amp;gt;: ()&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;   , &lt;span class="st"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このバリアント型に対し，&lt;code&gt;⊆&lt;/code&gt; を用いて多相的な関数は2種類考えれる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="ot"&gt;toInt1 ::&lt;/span&gt; (&lt;span class="dt"&gt;HogeFields&lt;/span&gt; ⊆ xs) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;toInt1 &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;&lt;span class="ot"&gt;toInt2 ::&lt;/span&gt; (xs ⊆ &lt;span class="dt"&gt;HogeFields&lt;/span&gt;) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;toInt2 &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toInt1&lt;/code&gt; は &lt;code&gt;&amp;quot;hoge&amp;quot; &amp;gt;: ()&lt;/code&gt; と &lt;code&gt;&amp;quot;fuga&amp;quot; &amp;gt;: ()&lt;/code&gt; を要素に持つバリアント型全てが利用できる関数である(さっきの &lt;code&gt;getNumber&lt;/code&gt; と同じ)． &lt;code&gt;toInt2&lt;/code&gt; は &lt;code&gt;&amp;quot;hoge&amp;quot; &amp;gt;: ()&lt;/code&gt; か &lt;code&gt;&amp;quot;fuga&amp;quot; &amp;gt;: ()&lt;/code&gt; のどれかを要素に持つ(それ以外は持ってはいけない)バリアント型全てに利用できる関数である． 試しに，次の3つのバリアント型の値を定義し，GHCi で試してみよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="ot"&gt;hoge1 ::&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;hoge1 &lt;span class="fu"&gt;=&lt;/span&gt; embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge &lt;span class="fu"&gt;@=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;&lt;span class="ot"&gt;hoge2 ::&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;piyo&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; () &lt;span class="ch"&gt;&amp;#39;: HogeFields)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;hoge2 &lt;span class="fu"&gt;=&lt;/span&gt; embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;piyo &lt;span class="fu"&gt;@=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;&lt;span class="ot"&gt;hoge3 ::&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[&amp;quot;hoge&amp;quot; &amp;gt;: ()]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;hoge3 &lt;span class="fu"&gt;=&lt;/span&gt; embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge &lt;span class="fu"&gt;@=&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;見てわかるように(？)，&lt;code&gt;hoge3 ⊆ hoge1 ⊆ hoge2&lt;/code&gt; である(厳密にはバリアントの要素の集合で成り立つ関係だが)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t toInt1 hoge1&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;toInt1&lt;span class="ot"&gt; hoge1 ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t toInt1 hoge2&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;toInt1&lt;span class="ot"&gt; hoge2 ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t toInt1 hoge3&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" data-line-number="7"&gt;&lt;span class="fu"&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; error&lt;span class="fu"&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" data-line-number="8"&gt;    &lt;span class="fu"&gt;?&lt;/span&gt; &lt;span class="dt"&gt;Couldn&amp;#39;t&lt;/span&gt; match &lt;span class="kw"&gt;type&lt;/span&gt; ‘&lt;span class="ch"&gt;&amp;#39;Missing (&amp;quot;fuga&amp;quot; &amp;#39;&lt;/span&gt;&lt;span class="fu"&gt;:&amp;gt;&lt;/span&gt; ())’&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" data-line-number="9"&gt;                     with ‘&lt;span class="ch"&gt;&amp;#39;Expecting pos0’&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-10" data-line-number="10"&gt;        arising from a use &lt;span class="kw"&gt;of&lt;/span&gt; ‘toInt1’&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-11" data-line-number="11"&gt;    &lt;span class="fu"&gt;?&lt;/span&gt; &lt;span class="dt"&gt;In&lt;/span&gt; the expression&lt;span class="fu"&gt;:&lt;/span&gt; toInt1 hoge3&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-12" data-line-number="12"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t toInt2 hoge1&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-13" data-line-number="13"&gt;toInt2&lt;span class="ot"&gt; hoge1 ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-14" data-line-number="14"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t toInt2 hoge2&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-16" data-line-number="16"&gt;&lt;span class="fu"&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; error&lt;span class="fu"&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-17" data-line-number="17"&gt;    &lt;span class="fu"&gt;?&lt;/span&gt; &lt;span class="dt"&gt;Couldn&amp;#39;t&lt;/span&gt; match &lt;span class="kw"&gt;type&lt;/span&gt; ‘&lt;span class="ch"&gt;&amp;#39;Missing (&amp;quot;piyo&amp;quot; &amp;#39;&lt;/span&gt;&lt;span class="fu"&gt;:&amp;gt;&lt;/span&gt; ())’&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-18" data-line-number="18"&gt;                     with ‘&lt;span class="ch"&gt;&amp;#39;Expecting pos0’&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-19" data-line-number="19"&gt;        arising from a use &lt;span class="kw"&gt;of&lt;/span&gt; ‘toInt2’&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-20" data-line-number="20"&gt;    &lt;span class="fu"&gt;?&lt;/span&gt; &lt;span class="dt"&gt;In&lt;/span&gt; the expression&lt;span class="fu"&gt;:&lt;/span&gt; toInt2 hoge2&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-21" data-line-number="21"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t toInt2 hoge3&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-22" data-line-number="22"&gt;toInt2&lt;span class="ot"&gt; hoge3 ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確かに，&lt;code&gt;toInt1&lt;/code&gt; は &lt;code&gt;hoge1&lt;/code&gt; と &lt;code&gt;hoge2&lt;/code&gt; に適用でき，&lt;code&gt;toInt2&lt;/code&gt; は &lt;code&gt;hoge1&lt;/code&gt; と &lt;code&gt;hoge3&lt;/code&gt; に適用できている．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;さて，&lt;code&gt;toInt1&lt;/code&gt; と &lt;code&gt;toInt2&lt;/code&gt; の実装を与えてみる． 実は簡単なのは後者 &lt;code&gt;toInt2&lt;/code&gt; だ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;span class="ot"&gt;toInt2 ::&lt;/span&gt; (xs ⊆ &lt;span class="dt"&gt;HogeFields&lt;/span&gt;) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;toInt2 &lt;span class="fu"&gt;=&lt;/span&gt; flip matchField (spread&lt;span class="ot"&gt; xs ::&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge &lt;span class="fu"&gt;@=&lt;/span&gt; (const &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;fuga &lt;span class="fu"&gt;@=&lt;/span&gt; (const &lt;span class="dv"&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;a href="https://matsubara0507.github.io/posts/2017-11-28-fun-of-extensible-1.html"&gt;昔の記事&lt;/a&gt;でも紹介した) &lt;a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Inclusion.html#v:spread"&gt;&lt;code&gt;spread&lt;/code&gt;&lt;/a&gt; 関数を用いることで &lt;strong&gt;バリアント型を拡張できる&lt;/strong&gt; (&lt;a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Field.html#v:matchField"&gt;&lt;code&gt;matchField&lt;/code&gt;&lt;/a&gt; 関数の使い方についてはこの&lt;a href="https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html"&gt;記事&lt;/a&gt;を参照して)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="ot"&gt;shrink ::&lt;/span&gt; (xs ⊆ ys) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; ys &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;&lt;span class="ot"&gt;spread ::&lt;/span&gt; (xs ⊆ ys) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; ys&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡縮する関数 &lt;code&gt;spread&lt;/code&gt; や &lt;code&gt;shrink&lt;/code&gt; は強力なのだが，多相的すぎて前後の型が分からないとエラーになる(気がする(パッケージの作者じゃないので細かいことはよくわからん))ので，型注釈 (&lt;code&gt;spread xs :: Hoge&lt;/code&gt; の部分)を与える必要がある．&lt;/p&gt;
&lt;h3 id="必殺-coinclusion"&gt;必殺 Coinclusion&lt;/h3&gt;
&lt;p&gt;前者が難しいのは，&lt;code&gt;spread&lt;/code&gt; や &lt;code&gt;shrink&lt;/code&gt; とは逆の振る舞いを要求するからだ． そのために(この前作者から教えてもらった隠し技(別に隠してない)) &lt;a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Nullable.html"&gt;&lt;code&gt;Nullable&lt;/code&gt;&lt;/a&gt; を使う！ &lt;code&gt;Nullable&lt;/code&gt; を使うとバリアントやレコードの全ての要素を簡単に &lt;code&gt;Maybe&lt;/code&gt; でラップできる(なんかいいテーマがあったら，そのうち解説する)． さらに &lt;code&gt;Nullable&lt;/code&gt; を用いることで，Coinclusion を定義できる！&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="ot"&gt;wrench ::&lt;/span&gt; (&lt;span class="dt"&gt;Generate&lt;/span&gt; ys, xs ⊆ ys) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; (h &lt;span class="fu"&gt;:*&lt;/span&gt; xs) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Nullable&lt;/span&gt; h &lt;span class="fu"&gt;:*&lt;/span&gt; ys&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;span class="ot"&gt;retrench ::&lt;/span&gt; (&lt;span class="dt"&gt;Generate&lt;/span&gt; ys, xs ⊆ ys) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; (h &lt;span class="fu"&gt;:|&lt;/span&gt; ys) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Nullable&lt;/span&gt; ((&lt;span class="fu"&gt;:|&lt;/span&gt;) h) xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;wrench&lt;/code&gt; や &lt;code&gt;retrench&lt;/code&gt; は &lt;code&gt;shrink&lt;/code&gt; と &lt;code&gt;spread&lt;/code&gt; の逆向きの変換になっているのが分かるだろうか？ 逆向きにしたせいで足りない部分は &lt;code&gt;Nullable&lt;/code&gt; によって &lt;code&gt;Nothing&lt;/code&gt; となる． 例えば &lt;code&gt;Variant (&amp;quot;piyo&amp;quot; &amp;gt;: () ': HogeFields)&lt;/code&gt; から &lt;code&gt;Hoge&lt;/code&gt; に縮小する場合は，&lt;code&gt;embedAssoc (#piyo @= ())&lt;/code&gt; が &lt;code&gt;Nothing&lt;/code&gt; となり，他が &lt;code&gt;Just&lt;/code&gt; でラップされる．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;Coinclusion を用いて &lt;code&gt;toInt2&lt;/code&gt; 関数を実装してみると次のようになる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE PolyKinds           #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;span class="ot"&gt;{-# LANGUAGE RankNTypes          #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;span class="ot"&gt;{-# LANGUAGE ScopedTypeVariables #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;&lt;span class="ot"&gt;toInt1 ::&lt;/span&gt; (&lt;span class="dt"&gt;Generate&lt;/span&gt; xs, &lt;span class="dt"&gt;HogeFields&lt;/span&gt; ⊆ xs) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;toInt1 &lt;span class="fu"&gt;=&lt;/span&gt; matchFieldWithDefault &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge &lt;span class="fu"&gt;@=&lt;/span&gt; (const &lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; () &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-8" data-line-number="8"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;fuga &lt;span class="fu"&gt;@=&lt;/span&gt; (const &lt;span class="dv"&gt;2&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; () &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-9" data-line-number="9"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-11" data-line-number="11"&gt;&lt;span class="ot"&gt;matchFieldWithDefault ::&lt;/span&gt; forall xs ys h r &lt;span class="fu"&gt;.&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-12" data-line-number="12"&gt;  (&lt;span class="dt"&gt;Generate&lt;/span&gt; ys, xs ⊆ ys) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; r &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;RecordOf&lt;/span&gt; (&lt;span class="dt"&gt;Match&lt;/span&gt; h r) xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;VariantOf&lt;/span&gt; h ys &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-13" data-line-number="13"&gt;matchFieldWithDefault defaultValue pat &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-14" data-line-number="14"&gt;  fromMaybe defaultValue &lt;span class="fu"&gt;.&lt;/span&gt; matchFieldWithMaybe pat&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-16" data-line-number="16"&gt;&lt;span class="ot"&gt;matchFieldWithMaybe ::&lt;/span&gt; forall xs ys h r &lt;span class="fu"&gt;.&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-17" data-line-number="17"&gt;  (&lt;span class="dt"&gt;Generate&lt;/span&gt; ys, xs ⊆ ys) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;RecordOf&lt;/span&gt; (&lt;span class="dt"&gt;Match&lt;/span&gt; h r) xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;VariantOf&lt;/span&gt; h ys &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; r&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-18" data-line-number="18"&gt;matchFieldWithMaybe pat &lt;span class="fu"&gt;=&lt;/span&gt; matchWith func (wrench pat)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-19" data-line-number="19"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-20" data-line-number="20"&gt;&lt;span class="ot"&gt;    func ::&lt;/span&gt; forall x &lt;span class="fu"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Nullable&lt;/span&gt; (&lt;span class="dt"&gt;Field&lt;/span&gt; (&lt;span class="dt"&gt;Match&lt;/span&gt; h r)) x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; h x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; r&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-21" data-line-number="21"&gt;    func fx gx &lt;span class="fu"&gt;=&lt;/span&gt; (\x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; runMatch (getField x) &lt;span class="fu"&gt;$&lt;/span&gt; getField gx) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getNullable fx&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;めんどくさいので細かい解説はしない(そもそももっといい方法があるかもしれない)． この &lt;code&gt;matchFieldWithMaybe&lt;/code&gt; を用いれば &lt;code&gt;getNumber&lt;/code&gt; も簡単に実装できるだろう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="ot"&gt;getNumber ::&lt;/span&gt; (&lt;span class="dt"&gt;Generate&lt;/span&gt; xs, &lt;span class="ch"&gt;&amp;#39;[&amp;quot;number&amp;quot; &amp;gt;: Int] ⊆ xs) =&amp;gt; Variant xs -&amp;gt; Maybe Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;getNumber &lt;span class="fu"&gt;=&lt;/span&gt; matchFieldWithMaybe &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;number &lt;span class="fu"&gt;@=&lt;/span&gt; id &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="例-イベントを拡張する"&gt;例 : イベントを拡張する&lt;/h2&gt;
&lt;p&gt;ここからは「多相バリアントを使いこなそう」で取り上げられてた例を Haskell で示そう． ひとつ目は次のふたつのイベント型を考える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;KeyboardEvent&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="dt"&gt;KeyboardEventFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;KeyboardEventFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;keyPress&amp;quot; &amp;gt;: Char&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;   , &lt;span class="st"&gt;&amp;quot;keyRelease&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;MouseEvent&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="dt"&gt;MouseEventFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;MouseEventFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;mousePress&amp;quot; &amp;gt;: (Int, Int)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;   , &lt;span class="st"&gt;&amp;quot;mouseRelease&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt;, &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;   , &lt;span class="st"&gt;&amp;quot;click&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt;, &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，これらの両方の型許容する型 &lt;code&gt;Event&lt;/code&gt; を作りたい． 普通の直和型を用いて次のように書くことが出来る．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Event&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Key&lt;/span&gt; &lt;span class="dt"&gt;KeyboardEvent&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Mouse&lt;/span&gt; &lt;span class="dt"&gt;MouseEvent&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん，これでは元のふたつの型をうまく再利用できていない． 既に何度か登場している型レベルリストの連結 &lt;a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Product.html#t:-43--43-"&gt;&lt;code&gt;++&lt;/code&gt;&lt;/a&gt; を使って次のように書くこともできる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Event&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; (&lt;span class="dt"&gt;KeyboardEventFields&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="dt"&gt;MouseEventFields&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こうすると，&lt;code&gt;Event&lt;/code&gt; 型と &lt;code&gt;KeyboardEvent&lt;/code&gt; 型・&lt;code&gt;MouseEvent&lt;/code&gt; 型には包含関係ができ，前述した &lt;code&gt;Hoge&lt;/code&gt; 型で示した方法により各々で関数を共有することが出来る． 例えば次の &lt;code&gt;getCharFromEvent&lt;/code&gt; 関数は &lt;code&gt;KeyboardEvent&lt;/code&gt; 型と &lt;code&gt;Event&lt;/code&gt; 型の両方で利用できる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;&lt;span class="ot"&gt;getCharFromEvent ::&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;  (&lt;span class="dt"&gt;Generate&lt;/span&gt; xs, &lt;span class="dt"&gt;KeyboardEventFields&lt;/span&gt; ⊆ xs) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" data-line-number="3"&gt;getCharFromEvent &lt;span class="fu"&gt;=&lt;/span&gt; matchFieldWithDefault (error &lt;span class="st"&gt;&amp;quot;not a key&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" data-line-number="4"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;keyPress   &lt;span class="fu"&gt;@=&lt;/span&gt; id&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-5" data-line-number="5"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;keyRelease &lt;span class="fu"&gt;@=&lt;/span&gt; id&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-6" data-line-number="6"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="例-トランプで-expression-problem"&gt;例 : トランプで Expression Problem&lt;/h2&gt;
&lt;p&gt;Expression Problem が何なのかは各位ググってもらうとして，「多相バリアントを使いこなそう」の最後で紹介されていた，多相バリアントによる Expression Problem の解法を Haskell でもやってみる．&lt;/p&gt;
&lt;p&gt;次のような型と関数があったとする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb19-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Card&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="dt"&gt;CardFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;CardFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-3" data-line-number="3"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;number&amp;quot; &amp;gt;: Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-4" data-line-number="4"&gt;   , &lt;span class="st"&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;   &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-5" data-line-number="5"&gt;   , &lt;span class="st"&gt;&amp;quot;queen&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-6" data-line-number="6"&gt;   , &lt;span class="st"&gt;&amp;quot;king&amp;quot;&lt;/span&gt;   &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-7" data-line-number="7"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-9" data-line-number="9"&gt;&lt;span class="ot"&gt;cardNum ::&lt;/span&gt; &lt;span class="dt"&gt;Card&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-10" data-line-number="10"&gt;cardNum &lt;span class="fu"&gt;=&lt;/span&gt; matchField cardNumPattern&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-12" data-line-number="12"&gt;&lt;span class="ot"&gt;cardNumPattern ::&lt;/span&gt; &lt;span class="dt"&gt;RecordOf&lt;/span&gt; (&lt;span class="dt"&gt;Match&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="dt"&gt;CardFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-13" data-line-number="13"&gt;cardNumPattern&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-14" data-line-number="14"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;number &lt;span class="fu"&gt;@=&lt;/span&gt; id&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-15" data-line-number="15"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;jack   &lt;span class="fu"&gt;@=&lt;/span&gt; const &lt;span class="dv"&gt;11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-16" data-line-number="16"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;queen  &lt;span class="fu"&gt;@=&lt;/span&gt; const &lt;span class="dv"&gt;12&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-17" data-line-number="17"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;king   &lt;span class="fu"&gt;@=&lt;/span&gt; const &lt;span class="dv"&gt;13&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-18" data-line-number="18"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;code&gt;cardNumPattern&lt;/code&gt; を切り出しているのがあからさまに恣意的だが…)これに以下のことは可能だろうか？&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;静的で安全に(キャストせず)&lt;/li&gt;
&lt;li&gt;元のコードを一切変更せず&lt;/li&gt;
&lt;li&gt;新しい場合分けを加え&lt;/li&gt;
&lt;li&gt;新しい操作も加えた&lt;/li&gt;
&lt;li&gt;新しい場合分け構造を定義する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最後の「構造」というのは今回は置いておいて(OCaml ではモジュールとして定義してたが，Haskell でモジュールに切り分けるにはファイルを切り分ける必要があるので…めんどい…)，1-4を考えてみよう． &lt;code&gt;Card&lt;/code&gt; 型やその関数を拡張したものとして，次のような &lt;code&gt;CardExt&lt;/code&gt; 型とその関数を定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb20-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;CardExt&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="dt"&gt;CardExtFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;CardExtFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;CardFields&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[&amp;quot;joker&amp;quot; &amp;gt;: ()]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-4" data-line-number="4"&gt;&lt;span class="ot"&gt;cardExtNum ::&lt;/span&gt; &lt;span class="dt"&gt;CardExt&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-5" data-line-number="5"&gt;cardExtNum &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-6" data-line-number="6"&gt;  matchField &lt;span class="fu"&gt;$&lt;/span&gt; shrink (&lt;span class="fu"&gt;#&lt;/span&gt;joker &lt;span class="fu"&gt;@=&lt;/span&gt; (const &lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; () &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; cardNumPattern)&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-8" data-line-number="8"&gt;&lt;span class="ot"&gt;nextCardExt ::&lt;/span&gt; &lt;span class="dt"&gt;CardExt&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;CardExt&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-9" data-line-number="9"&gt;nextCardExt &lt;span class="fu"&gt;=&lt;/span&gt; matchField&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-10" data-line-number="10"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;number &lt;span class="fu"&gt;@=&lt;/span&gt; (\n &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;if&lt;/span&gt; n &lt;span class="fu"&gt;&amp;lt;&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="kw"&gt;then&lt;/span&gt; embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;number &lt;span class="fu"&gt;@=&lt;/span&gt; n &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="kw"&gt;else&lt;/span&gt; embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;jack &lt;span class="fu"&gt;@=&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-11" data-line-number="11"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;jack   &lt;span class="fu"&gt;@=&lt;/span&gt; const (embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;queen  &lt;span class="fu"&gt;@=&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-12" data-line-number="12"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;queen  &lt;span class="fu"&gt;@=&lt;/span&gt; const (embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;king   &lt;span class="fu"&gt;@=&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-13" data-line-number="13"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;king   &lt;span class="fu"&gt;@=&lt;/span&gt; const (embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;joker  &lt;span class="fu"&gt;@=&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-14" data-line-number="14"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;joker  &lt;span class="fu"&gt;@=&lt;/span&gt; const (embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;number &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-15" data-line-number="15"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで一応&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;静的で安全に(もちろん!)&lt;/li&gt;
&lt;li&gt;既存のコードを改造せず&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;joker&amp;quot; &amp;gt;: ()&lt;/code&gt; という新しい場合分けを加え&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextCardExt&lt;/code&gt; という新しい操作(関数)を加える&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ことができた．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;組込みでこれらの機能がある OCaml はいいなぁとなった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-03-23T13:04:21.963+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/03-20-gitrev.html</id><title type="text">アプリケーションのバージョンに Git の情報を出してみよう！</title><updated>2018-03-20T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/03-20-gitrev.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;今回は &lt;a href="https://www.stackage.org/package/gitrev"&gt;gitrev&lt;/a&gt; パッケージと &lt;a href="https://www.stackage.org/package/optparse-simple"&gt;optparse-simple&lt;/a&gt; パッケージを使ってアプリケーションに &lt;code&gt;Git&lt;/code&gt; の情報を含めてみようと思います！&lt;/p&gt;
&lt;p&gt;利用者の多いアプリケーションだと、バグ報告時にどのコミットでビルドしたものなのか知りたい場合に便利です。&lt;/p&gt;
&lt;p&gt;表示されるバージョン情報はこんな感じになります。&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="ot"&gt;# gitrev の例&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;./&lt;/span&gt;Main.hs&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;Main.hs&lt;span class="fu"&gt;:&lt;/span&gt; [panic master&lt;span class="fu"&gt;@&lt;/span&gt;3a0bd17fdfb8a3e334292a560280e8e0791e941c (&lt;span class="dt"&gt;Tue&lt;/span&gt; &lt;span class="dt"&gt;Mar&lt;/span&gt; &lt;span class="dv"&gt;20&lt;/span&gt; &lt;span class="dv"&gt;02&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt;&lt;span class="dv"&gt;00&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt;&lt;span class="dv"&gt;17&lt;/span&gt; &lt;span class="dv"&gt;2018&lt;/span&gt; &lt;span class="fu"&gt;+&lt;/span&gt;&lt;span class="dv"&gt;0900&lt;/span&gt;) (&lt;span class="dv"&gt;1&lt;/span&gt; commits &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="dt"&gt;HEAD&lt;/span&gt;)]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="ot"&gt;# optparse-simple の例&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;&lt;span class="fu"&gt;$&lt;/span&gt; stack exec &lt;span class="co"&gt;-- example-version-exe&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;span class="dt"&gt;Version&lt;/span&gt; &lt;span class="fl"&gt;0.1&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;&lt;span class="fl"&gt;0.0&lt;/span&gt;, &lt;span class="dt"&gt;Git&lt;/span&gt; revision &lt;span class="fl"&gt;341e785&lt;/span&gt;b02c4c599f64b922b4aa9cfff3c006945&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のアプリケーション等でも利用されているように、実用度はとても高めです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/commercialhaskell/stack"&gt;stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/haskell/haskell-ide-engine"&gt;hie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquidhaskell"&gt;liquidhaskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、実装コストもそれほどかからないため、オススメです！&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="gitrev-パッケージ"&gt;gitrev パッケージ&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.stackage.org/haddock/lts-11.1/gitrev-1.3.1/Development-GitRev.html"&gt;gitrev&lt;/a&gt; パッケージは &lt;code&gt;Template Haskell&lt;/code&gt; の機能を使ってコンパイル時に以下の情報を取得可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ブランチ名および、タグ名&lt;/li&gt;
&lt;li&gt;コミット数&lt;/li&gt;
&lt;li&gt;コミット日&lt;/li&gt;
&lt;li&gt;コミットの describe&lt;/li&gt;
&lt;li&gt;コミットのハッシュ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そのため、表示する情報を自分の好きなようにカスタマイズしたい場合に便利でしょう。&lt;/p&gt;
&lt;h3 id="サンプルアプリケーション"&gt;サンプルアプリケーション&lt;/h3&gt;
&lt;p&gt;以下のコードは &lt;code&gt;Hackage&lt;/code&gt; に載っているコードです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="ot"&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="co"&gt;-- stack --resolver lts-11.1 script&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Development.GitRev&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;&lt;span class="ot"&gt;panic ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;panic msg &lt;span class="fu"&gt;=&lt;/span&gt; error panicMsg&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt; panicMsg &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;          concat [ &lt;span class="st"&gt;&amp;quot;[panic &amp;quot;&lt;/span&gt;, &lt;span class="fu"&gt;$&lt;/span&gt;(gitBranch), &lt;span class="st"&gt;&amp;quot;@&amp;quot;&lt;/span&gt;, &lt;span class="fu"&gt;$&lt;/span&gt;(gitHash)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;                 , &lt;span class="st"&gt;&amp;quot; (&amp;quot;&lt;/span&gt;, &lt;span class="fu"&gt;$&lt;/span&gt;(gitCommitDate), &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;                 , &lt;span class="st"&gt;&amp;quot; (&amp;quot;&lt;/span&gt;, &lt;span class="fu"&gt;$&lt;/span&gt;(gitCommitCount), &lt;span class="st"&gt;&amp;quot; commits in HEAD)&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" data-line-number="12"&gt;                 , dirty, &lt;span class="st"&gt;&amp;quot;] &amp;quot;&lt;/span&gt;, msg ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" data-line-number="13"&gt;        dirty &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;(gitDirty) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; (uncommitted files present)&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" data-line-number="14"&gt;              &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" data-line-number="16"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; panic &lt;span class="st"&gt;&amp;quot;oh no!&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に実行してみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;tree&lt;/span&gt; .&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="ex"&gt;.&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;└── &lt;span class="ex"&gt;Main.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="ex"&gt;0&lt;/span&gt; directories, 1 file&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;$ &lt;span class="fu"&gt;chmod&lt;/span&gt; u+x Main.hs&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;$ &lt;span class="ex"&gt;./Main.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;&lt;span class="ex"&gt;Main.hs&lt;/span&gt;: [panic UNKNOWN@UNKNOWN (UNKNOWN) &lt;span class="kw"&gt;(&lt;/span&gt;&lt;span class="ex"&gt;UNKNOWN&lt;/span&gt; commits in HEAD&lt;span class="kw"&gt;)&lt;/span&gt;] &lt;span class="ex"&gt;oh&lt;/span&gt; no!&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;&lt;span class="ex"&gt;CallStack&lt;/span&gt; (from HasCallStack)&lt;span class="bu"&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;  &lt;span class="ex"&gt;error&lt;/span&gt;, called at /home/bm12/Desktop/gitrev-sample/Main.hs:7:13 in main:Main&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現状は &lt;code&gt;git&lt;/code&gt; のコミットが無いため、全て &lt;code&gt;UNKNOWN&lt;/code&gt; として表示されています。&lt;/p&gt;
&lt;p&gt;実際に &lt;code&gt;git&lt;/code&gt; リポジトリを作ってコミットしてみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;$ &lt;span class="fu"&gt;git&lt;/span&gt; init&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;span class="ex"&gt;Initialized&lt;/span&gt; empty Git repository in /home/bm12/Desktop/gitrev-sample/.git/&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;$ &lt;span class="fu"&gt;git&lt;/span&gt; add -A&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;$ &lt;span class="fu"&gt;git&lt;/span&gt; commit -m &lt;span class="st"&gt;&amp;quot;TEST&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;[&lt;span class="ex"&gt;master&lt;/span&gt; (root-commit) &lt;span class="ex"&gt;3a0bd17&lt;/span&gt;] TEST&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt; &lt;span class="ex"&gt;1&lt;/span&gt; file changed, 16 insertions(+)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt; &lt;span class="ex"&gt;create&lt;/span&gt; mode 100755 Main.hs&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" data-line-number="10"&gt;$ &lt;span class="ex"&gt;./Main.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" data-line-number="11"&gt;&lt;span class="ex"&gt;Main.hs&lt;/span&gt;: [panic master@3a0bd17fdfb8a3e334292a560280e8e0791e941c (Tue Mar 20 02:00:17 2018 +0900) &lt;span class="kw"&gt;(&lt;/span&gt;&lt;span class="ex"&gt;1&lt;/span&gt; commits in HEAD&lt;span class="kw"&gt;)&lt;/span&gt;] &lt;span class="ex"&gt;oh&lt;/span&gt; no!&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じで &lt;code&gt;git&lt;/code&gt; の情報を自由に組み合わせることができます。&lt;/p&gt;
&lt;h2 id="optparse-simple-パッケージ"&gt;optparse-simple パッケージ&lt;/h2&gt;
&lt;p&gt;あまり書式を気にせず、定形で良い場合はもっと簡単な方法があります。&lt;/p&gt;
&lt;p&gt;それは &lt;code&gt;optparse-simple&lt;/code&gt; パッケージの &lt;a href="https://www.stackage.org/haddock/lts-11.1/optparse-simple-0.1.0/Options-Applicative-Simple.html#v:simpleVersion"&gt;simpleVersion&lt;/a&gt; を使う方法です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;simpleVersion&lt;/code&gt; では &lt;code&gt;git&lt;/code&gt; の情報だけでなく、アプリケーションのバージョンも一緒に表示することができます。&lt;/p&gt;
&lt;h3 id="simpleversion"&gt;simpleVersion&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.stackage.org/haddock/lts-11.1/optparse-simple-0.1.0/src/Options.Applicative.Simple.html#simpleVersion"&gt;simpleVersion&lt;/a&gt; の定義は以下のようになっています。&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="ot"&gt;simpleVersion ::&lt;/span&gt; &lt;span class="dt"&gt;Version&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Q&lt;/span&gt; &lt;span class="dt"&gt;Exp&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;simpleVersion version &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;  [&lt;span class="fu"&gt;|&lt;/span&gt;concat ([&lt;span class="st"&gt;&amp;quot;Version &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;           ,&lt;span class="fu"&gt;$&lt;/span&gt;(TH.lift &lt;span class="fu"&gt;$&lt;/span&gt; showVersion version)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;           ] &lt;span class="fu"&gt;++&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;           &lt;span class="kw"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;gitHash &lt;span class="fu"&gt;==&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;UNKNOWN&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;             &lt;span class="kw"&gt;then&lt;/span&gt; []&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;             &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;               [&lt;span class="st"&gt;&amp;quot;, Git revision &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;               ,&lt;span class="fu"&gt;$&lt;/span&gt;gitHash&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;               ,&lt;span class="kw"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;gitDirty&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;                   &lt;span class="kw"&gt;then&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; (dirty)&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;                   &lt;span class="kw"&gt;else&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-14" data-line-number="14"&gt;               ])&lt;span class="fu"&gt;|&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;$gitHash&lt;/code&gt; や &lt;code&gt;$gitDirty&lt;/code&gt; を見ればわかる通り、内部的に &lt;code&gt;gitrev&lt;/code&gt; パッケージを利用して &lt;code&gt;git&lt;/code&gt; の情報を取得しています。&lt;/p&gt;
&lt;p&gt;また、第一引数の &lt;code&gt;Version&lt;/code&gt; 型は &lt;code&gt;base&lt;/code&gt; パッケージの &lt;a href="https://www.stackage.org/haddock/lts-11.1/base-4.10.1.0/Data-Version.html"&gt;Data.Version&lt;/a&gt; で定義されている型です。&lt;/p&gt;
&lt;p&gt;以下のように &lt;code&gt;makeVersion :: [Int] -&amp;gt; Version&lt;/code&gt; 関数を使って &lt;code&gt;Version&lt;/code&gt; 型の値を作ることができます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TemplateHaskell   #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Options.Applicative.Simple&lt;/span&gt; (simpleVersion)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Version&lt;/span&gt; (makeVersion)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; putStrLn &lt;span class="fu"&gt;$&lt;/span&gt;(simpleVersion &lt;span class="fu"&gt;$&lt;/span&gt; makeVersion [&lt;span class="dv"&gt;100&lt;/span&gt;,&lt;span class="dv"&gt;0&lt;/span&gt;,&lt;span class="dv"&gt;0&lt;/span&gt;,&lt;span class="dv"&gt;0&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;適当にプロジェクトを作って、上記の内容を実行してみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; exec example-exe &lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="ex"&gt;Version&lt;/span&gt; 100.0.0.0&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まだ &lt;code&gt;git&lt;/code&gt; で管理していないため、バージョン情報のみが表示されます。&lt;/p&gt;
&lt;p&gt;では、先ほどの例と同様に &lt;code&gt;git&lt;/code&gt; リポジトリを作ってコミットした結果を見てみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;$ &lt;span class="fu"&gt;git&lt;/span&gt; init&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ex"&gt;Initialized&lt;/span&gt; empty Git repository in /home/bm12/Desktop/gitrev-sample/.git/&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;$ &lt;span class="fu"&gt;git&lt;/span&gt; add -A&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;$ &lt;span class="fu"&gt;git&lt;/span&gt; commit -m &lt;span class="st"&gt;&amp;quot;TEST&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;[&lt;span class="ex"&gt;master&lt;/span&gt; (root-commit) &lt;span class="ex"&gt;3a0bd17&lt;/span&gt;] TEST&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt; &lt;span class="ex"&gt;1&lt;/span&gt; file changed, 16 insertions(+)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt; &lt;span class="ex"&gt;create&lt;/span&gt; mode 100755 Main.hs&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; clean&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; build&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" data-line-number="12"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; exec example-exe &lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" data-line-number="13"&gt;&lt;span class="ex"&gt;Version&lt;/span&gt; 100.0.0.0, Git revision e106394f7fdded0c9908cbf8edc87c5d5d5b4309&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにちゃんとリビジョンが表示されるようになりました。&lt;/p&gt;
&lt;h3 id="アプリケーションのバージョンを自動的に更新する"&gt;アプリケーションのバージョンを自動的に更新する&lt;/h3&gt;
&lt;p&gt;アプリケーションのリリースごとに &lt;code&gt;makeVersion&lt;/code&gt; を使って更新する作業はとても面倒ですし、いつか間違えてしまうかもしれません。&lt;/p&gt;
&lt;p&gt;これを解決するためには &lt;code&gt;.cabal&lt;/code&gt; ファイルからバージョン情報を自動取得して &lt;code&gt;simpleVersion&lt;/code&gt; 関数に渡してあげるようにすれば良いのです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TemplateHaskell   #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Options.Applicative.Simple&lt;/span&gt; (simpleVersion)&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Paths_XXXX&lt;/span&gt;               &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Meta&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" data-line-number="7"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; putStrLn &lt;span class="fu"&gt;$&lt;/span&gt;(simpleVersion Meta.version)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Paths_XXXX&lt;/code&gt; の &lt;code&gt;XXXX&lt;/code&gt; はアプリケーション名 (&lt;code&gt;cabal&lt;/code&gt; ファイルの &lt;code&gt;name&lt;/code&gt; の値) を指定します。これで &lt;code&gt;cabal&lt;/code&gt; ファイルのバージョン情報を直接取得できるようになります。&lt;/p&gt;
&lt;p&gt;表示される結果はこんな感じです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; exec -- example-version-exe&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;span class="ex"&gt;Version&lt;/span&gt; 0.1.0.0, Git revision 341e785b02c4c599f64b922b4aa9cfff3c006945&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;めちゃめちゃ簡単なのでオススメの方法です。&lt;/p&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;自分のアプリケーションがとてもカッコよくなるので是非ためしてみてください！&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/03-19-yesod-subsite.html</id><title type="text">Yesod v1.6 のサブサイト</title><updated>2018-03-19T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/03-19-yesod-subsite.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;今回は &lt;code&gt;Yesod&lt;/code&gt; を使っているマニア向け情報です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Yesod&lt;/code&gt; にはサブサイトという機能があり、Yesod Book の &lt;a href="https://www.yesodweb.com/book/creating-a-subsite"&gt;Creating a Subsite&lt;/a&gt; で一通りの使い方が説明されています。&lt;/p&gt;
&lt;p&gt;簡単に言えば、異なる &lt;code&gt;Yesod&lt;/code&gt; アプリケーションで共通のコンポーネント (認証システム等) を利用するために使えるようです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scaffolded site&lt;/code&gt; を使っている人は &lt;a href="https://www.stackage.org/lts-11.1/package/yesod-static-1.6.0"&gt;yesod-static&lt;/a&gt; パッケージで提供されている &lt;code&gt;Static&lt;/code&gt; 型をサブサイトとして利用していることでしょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Yesod&lt;/code&gt; のバージョンが &lt;code&gt;1.6&lt;/code&gt; に上がった影響により &lt;code&gt;Yesod Book&lt;/code&gt; の内容がそのままでは動かなくなっていたため、コードを修正して実際に動かしてみたいと思います。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="修正ポイント"&gt;修正ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HandlerT site IO a&lt;/code&gt; のような形式は何も考えずに &lt;code&gt;HandlerFor site a&lt;/code&gt; に書き換える&lt;/li&gt;
&lt;li&gt;サブサイトのハンドラ関数の型は &lt;code&gt;SubHandlerFor sub master a&lt;/code&gt; という形式に書き換える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HandlerFor&lt;/code&gt; から &lt;code&gt;SubHandlerFor&lt;/code&gt; へ持ち上げる時は &lt;code&gt;liftHandler&lt;/code&gt; を使う&lt;/li&gt;
&lt;li&gt;サブサイトの &lt;code&gt;YesodDispatch&lt;/code&gt; 型クラスのインスタンスは &lt;code&gt;HandlerT&lt;/code&gt; ではなく &lt;code&gt;instance Yesod master =&amp;gt; YesodSubDispatch HelloSub master where&lt;/code&gt; のように &lt;code&gt;Yesod&lt;/code&gt; 型クラスのインスタンスを直接指定できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="修正後のソースコード"&gt;修正後のソースコード&lt;/h2&gt;
&lt;p&gt;ここでは公式サイトのコードと同様のディレクトリ構造及び、ファイル名とします。&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;tree&lt;/span&gt; .&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="ex"&gt;.&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;├── &lt;span class="ex"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;│   └── &lt;span class="ex"&gt;Data.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;├── &lt;span class="ex"&gt;HelloSub.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;└── &lt;span class="ex"&gt;Main.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;&lt;span class="ex"&gt;1&lt;/span&gt; directory, 3 files&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ファイルを分割しているのは &lt;code&gt;TH&lt;/code&gt; の &lt;code&gt;GHC stage restriction&lt;/code&gt; を回避するためです。&lt;/p&gt;
&lt;h3 id="hellosubdata.hs"&gt;HelloSub/Data.hs&lt;/h3&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE QuasiQuotes     #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TypeFamilies    #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;HelloSub.Data&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Yesod&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;mkYesodSubData &lt;span class="st"&gt;&amp;quot;HelloSub&amp;quot;&lt;/span&gt; [parseRoutes|&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;/ SubHomeR GET&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" data-line-number="12"&gt;|]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;サブサイトのファウンデーション型 &lt;code&gt;HelloSub&lt;/code&gt; とルートを定義しています。&lt;/p&gt;
&lt;p&gt;通常であれば &lt;code&gt;mkYesod&lt;/code&gt; を利用しますが &lt;code&gt;mkYesodSubData&lt;/code&gt; を利用している点がサブサイトの特徴です。&lt;/p&gt;
&lt;h3 id="hellosub.hs"&gt;HelloSub.hs&lt;/h3&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE FlexibleInstances     #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="ot"&gt;{-# LANGUAGE MultiParamTypeClasses #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;span class="ot"&gt;{-# LANGUAGE OverloadedStrings     #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;span class="ot"&gt;{-# LANGUAGE QuasiQuotes           #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TemplateHaskell       #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;  ( &lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;HelloSub.Data&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;  , &lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;  ) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;HelloSub.Data&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Yesod&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Yesod.Core.Types&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;&lt;span class="ot"&gt;getSubHomeR ::&lt;/span&gt; &lt;span class="dt"&gt;Yesod&lt;/span&gt; master &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SubHandlerFor&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt; master &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" data-line-number="16"&gt;getSubHomeR &lt;span class="fu"&gt;=&lt;/span&gt; liftHandler &lt;span class="fu"&gt;$&lt;/span&gt; defaultLayout [whamlet|Welcome to the subsite!|]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" data-line-number="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" data-line-number="18"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Yesod&lt;/span&gt; master &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;YesodSubDispatch&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt; master &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" data-line-number="19"&gt;  yesodSubDispatch &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;(mkYesodSubDispatch resourcesHelloSub)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;サブサイトのハンドラと &lt;code&gt;dispatch&lt;/code&gt; の定義です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;resourcesHelloSub&lt;/code&gt; は &lt;code&gt;HelloSub/Data.hs&lt;/code&gt; で定義した &lt;code&gt;mkYesodSubData&lt;/code&gt; でコンパイル時に自動生成されます。&lt;/p&gt;
&lt;h3 id="main.hs"&gt;Main.hs&lt;/h3&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="ot"&gt;#!/usr/bin/env stack&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;span class="co"&gt;-- stack --resolver lts-11.0 script --package yesod-core --package yesod&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="ot"&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;&lt;span class="ot"&gt;{-# LANGUAGE QuasiQuotes       #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TemplateHaskell   #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TypeFamilies      #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" data-line-number="9"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Yesod&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" data-line-number="11"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Master&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Master&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-12" data-line-number="12"&gt;  {&lt;span class="ot"&gt; getHelloSub ::&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-13" data-line-number="13"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-15" data-line-number="15"&gt;mkYesod &lt;span class="st"&gt;&amp;quot;Master&amp;quot;&lt;/span&gt; [parseRoutes|&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-16" data-line-number="16"&gt;/ HomeR GET&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-17" data-line-number="17"&gt;/subsite SubsiteR HelloSub getHelloSub&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-18" data-line-number="18"&gt;|]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-20" data-line-number="20"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Yesod&lt;/span&gt; &lt;span class="dt"&gt;Master&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-22" data-line-number="22"&gt;&lt;span class="ot"&gt;getHomeR ::&lt;/span&gt; &lt;span class="dt"&gt;HandlerFor&lt;/span&gt; &lt;span class="dt"&gt;Master&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-23" data-line-number="23"&gt;getHomeR &lt;span class="fu"&gt;=&lt;/span&gt; defaultLayout&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-24" data-line-number="24"&gt;  [whamlet|&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-25" data-line-number="25"&gt;    &lt;span class="kw"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to the homepage&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-26" data-line-number="26"&gt;    &lt;span class="kw"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-27" data-line-number="27"&gt;      Feel free to visit the #&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-28" data-line-number="28"&gt;      &lt;span class="kw"&gt;&amp;lt;a&lt;/span&gt;&lt;span class="ot"&gt; href=&lt;/span&gt;&lt;span class="kw"&gt;@{&lt;/span&gt;&lt;span class="dt"&gt;SubsiteR&lt;/span&gt; &lt;span class="dt"&gt;SubHomeR&lt;/span&gt;&lt;span class="kw"&gt;}&amp;gt;&lt;/span&gt;subsite&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-29" data-line-number="29"&gt;      \ as well.&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-30" data-line-number="30"&gt;  |]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-31" data-line-number="31"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-32" data-line-number="32"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; warp &lt;span class="dv"&gt;3000&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;Master&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重要なポイントは以下の3点です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Master&lt;/code&gt; ファウンデーション型にサブサイトの型を含ませる (さらにアクセサ &lt;code&gt;getHelloSub&lt;/code&gt; を定義)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/subsite SubsiteR HelloSub getHelloSub&lt;/code&gt; という形式でサブサイトへのルートを定義&lt;/li&gt;
&lt;li&gt;サブサイトへの参照は &lt;code&gt;@{SubsiteR SubHomeR}&lt;/code&gt; という形式の型安全URLとなる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="実行"&gt;実行&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stack interpreter&lt;/code&gt; 形式で実行します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;$ &lt;span class="fu"&gt;chmod&lt;/span&gt; u+x Main.hs&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;$ &lt;span class="ex"&gt;./Main.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="ex"&gt;19/Mar&lt;/span&gt;/2018:&lt;span class="ex"&gt;00&lt;/span&gt;:37:27 +0900 [Info#yesod-core] Application launched @(yesod-core-1.6.2-JztYji0NiLuH8rcbB3eMBP:Yesod.Core.Dispatch ./Yesod/Core/Dispatch.hs:167:11)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この状態で &lt;a href="http://localhost:3000/" class="uri"&gt;http://localhost:3000/&lt;/a&gt; にアクセスしてみましょう。以下のようなページが表示されるはずです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/2018/03-19/img01.png" alt="トップページ" /&gt;&lt;figcaption&gt;トップページ&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;サブサイトにアクセスするとこんな感じです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/2018/03-19/img02.png" alt="サブサイト" /&gt;&lt;figcaption&gt;サブサイト&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="scaffolded-site"&gt;Scaffolded Site&lt;/h2&gt;
&lt;p&gt;ここではさらに一歩踏み込んで &lt;code&gt;Scaffolded Site&lt;/code&gt; を利用する際、どのファイルに何を書いたら良いのか簡単に解説しておこうと思います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Scaffolded Site&lt;/code&gt; は一番素朴な &lt;code&gt;yesod-simple&lt;/code&gt; を利用することとします。&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; new example-subsite yesod-simple&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;$ &lt;span class="bu"&gt;cd&lt;/span&gt; example-subsite&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;サブサイトの内容は上記で定義した内容を再利用します。&lt;/p&gt;
&lt;h3 id="stack.yaml"&gt;stack.yaml&lt;/h3&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="fu"&gt;resolver:&lt;/span&gt;&lt;span class="at"&gt; lts-11.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="fu"&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; .&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現状落ちてくるものは &lt;code&gt;yesod-1.6.0&lt;/code&gt; ではないので、書き換えます。&lt;/p&gt;
&lt;h3 id="package.yaml"&gt;package.yaml&lt;/h3&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="fu"&gt;dependencies:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; base&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; classy-prelude-yesod&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; yesod&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; yesod-core&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; yesod-static&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; yesod-form&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; classy-prelude&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; classy-prelude-conduit&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; bytestring&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; text&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" data-line-number="12"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; template-haskell&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" data-line-number="13"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; shakespeare&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-14" data-line-number="14"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; hjsmin&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-15" data-line-number="15"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; monad-control&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-16" data-line-number="16"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; wai-extra&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-17" data-line-number="17"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; yaml&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-18" data-line-number="18"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; http-conduit&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-19" data-line-number="19"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; directory&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-20" data-line-number="20"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; warp&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-21" data-line-number="21"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; data-default&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-22" data-line-number="22"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; aeson&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-23" data-line-number="23"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; conduit&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-24" data-line-number="24"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; monad-logger&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-25" data-line-number="25"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; fast-logger&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-26" data-line-number="26"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; wai-logger&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-27" data-line-number="27"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; file-embed&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-28" data-line-number="28"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; safe&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-29" data-line-number="29"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; unordered-containers&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-30" data-line-number="30"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; containers&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-31" data-line-number="31"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; vector&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-32" data-line-number="32"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; time&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-33" data-line-number="33"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; case-insensitive&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-34" data-line-number="34"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; wai&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-35" data-line-number="35"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; foreign-store&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バージョンを全部消しただけです。&lt;/p&gt;
&lt;h3 id="srcfoundation.hs"&gt;src/Foundation.hs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;App&lt;/code&gt; データ型にサブサイトを含め、さらに &lt;code&gt;import&lt;/code&gt; を追加します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;App&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;App&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;  {&lt;span class="ot"&gt; appSettings    ::&lt;/span&gt; &lt;span class="dt"&gt;AppSettings&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;  ,&lt;span class="ot"&gt; appStatic      ::&lt;/span&gt; &lt;span class="dt"&gt;Static&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;  ,&lt;span class="ot"&gt; appHttpManager ::&lt;/span&gt; &lt;span class="dt"&gt;Manager&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" data-line-number="7"&gt;  ,&lt;span class="ot"&gt; appLogger      ::&lt;/span&gt; &lt;span class="dt"&gt;Logger&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" data-line-number="8"&gt;  ,&lt;span class="ot"&gt; getHelloSub    ::&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" data-line-number="9"&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;yesod-1.6.0&lt;/code&gt; した影響でコンパイルエラーが出るため、&lt;code&gt;shouldLog&lt;/code&gt; をコメントアウトします。&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;    &lt;span class="co"&gt;-- shouldLog app _source level =&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;    &lt;span class="co"&gt;--     appShouldLogAll (appSettings app)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;    &lt;span class="co"&gt;--         || level == LevelWarn&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;    &lt;span class="co"&gt;--         || level == LevelError&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="configroute"&gt;config/route&lt;/h3&gt;
&lt;p&gt;サブサイトへのルートを追加します。&lt;/p&gt;
&lt;pre class="txt"&gt;&lt;code&gt;/subsite SubsiteR HelloSub getHelloSub&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="srcapplication.hs"&gt;src/Application.hs&lt;/h3&gt;
&lt;p&gt;以下の2点を追記します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import HelloSub&lt;/code&gt; を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;makeFoundation&lt;/code&gt; 関数に &lt;code&gt;let getHelloSub = HelloSub&lt;/code&gt; を追記&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;&lt;span class="ot"&gt;makeFoundation ::&lt;/span&gt; &lt;span class="dt"&gt;AppSettings&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;App&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;makeFoundation appSettings &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt; getHelloSub &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;HelloSub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;  appHttpManager &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; newManager&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;  appLogger &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; newStdoutLoggerSet defaultBufSize &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; makeYesodLogger&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" data-line-number="9"&gt;  appStatic &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" data-line-number="10"&gt;    (&lt;span class="kw"&gt;if&lt;/span&gt; appMutableStatic appSettings &lt;span class="kw"&gt;then&lt;/span&gt; staticDevel &lt;span class="kw"&gt;else&lt;/span&gt; static)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" data-line-number="11"&gt;    (appStaticDir appSettings)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-13" data-line-number="13"&gt;  return &lt;span class="dt"&gt;App&lt;/span&gt; {&lt;span class="fu"&gt;..&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;App {..}&lt;/code&gt; は &lt;code&gt;GHC&lt;/code&gt; の &lt;code&gt;RecordWildCards&lt;/code&gt; 言語拡張です。&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Example&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;  { a &lt;span class="fu"&gt;=&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;  , b &lt;span class="fu"&gt;=&lt;/span&gt; b&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;  , c &lt;span class="fu"&gt;=&lt;/span&gt; c&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;僕はあまり使いませんが、雰囲気はこんな感じです。&lt;/p&gt;
&lt;h3 id="実行-1"&gt;実行&lt;/h3&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; build&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; exec example-subsite&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://localhost:3000/subsite" class="uri"&gt;http://localhost:3000/subsite&lt;/a&gt; にアクセスすると次のような画面が現れます。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/2018/03-19/img03.png" alt="実行結果" /&gt;&lt;figcaption&gt;実行結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Yesod&lt;/code&gt; を使っていてもサブサイトについて知らないという人は多いと思いますが、&lt;code&gt;Yesod&lt;/code&gt; のアプリケーションが増えてきた時に使える、とても便利な仕組みだと思います。&lt;/p&gt;
&lt;p&gt;サブサイトについて、もっと詳しく知りたい人は &lt;a href="https://www.stackage.org/lts-11.1/package/yesod-static-1.6.0"&gt;yesod-static&lt;/a&gt; パッケージの実装を見てみると良いでしょう。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20180316/1521169933</id><title type="text">TLS 1.3 開発日記 その27 ID 25/26</title><updated>2018-03-16T03:12:13Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20180316/1521169933"/><summary type="html">
&lt;div class="section"&gt;
&lt;h4&gt;ドラフト25&lt;/h4&gt;
&lt;p&gt;ドラフト24までは、AEADに使う additonal_data は空文字列だった。ドラフト25からは、&lt;a href="https://github.com/tlswg/tls13-spec/pull/1158" target="_blank"&gt;正しいレコードヘッダが使われることを遵守させるため&lt;/a&gt;に、additonal_dataが以下のように定義された。&lt;/p&gt;
&lt;pre&gt;
       additional_data = TLSCiphertext.opaque_type ||
                         TLSCiphertext.legacy_record_version ||
                         TLSCiphertext.length
&lt;/pre&gt;
&lt;p&gt;以下の TLSCiphertext の構造と見比べれば、これがレコードヘッダそのものであることが分かるだろう。&lt;/p&gt;
&lt;pre&gt;
       struct {
           ContentType opaque_type = application_data; /* 23 */
           ProtocolVersion legacy_record_version = 0x0303; /* TLS v1.2 */
           uint16 length;
           opaque encrypted_record[TLSCiphertext.length];
       } TLSCiphertext;
&lt;/pre&gt;
&lt;p&gt;注意したいのは、TLSCiphertext.lengthである。復号化の際は TLSCiphertext.length は、入力の長さを図ればよい。しかし、暗号化の際は AEAD-Encrypt を呼び出す前に、結果の暗号文の長さを計算する必要がある。&lt;/p&gt;
&lt;p&gt;TLS 1.3のAEAD-Encryptは、暗号文+認証タグを生成する。暗号文の長さは、平文の長さに等しい。よって、以下のように計算できる。&lt;/p&gt;
&lt;pre&gt;
      暗号文の長さ = 平文の長さ + 認証タグの長さ
&lt;/pre&gt;
&lt;p&gt;一方 TLS 1.2 では、&lt;a href="http://d.hatena.ne.jp/kazu-yamamoto/20170426/1493186127" target="_blank"&gt;additonal_data に平文(本当は圧縮文)のレコードヘッダを使う&lt;/a&gt;。すなわち、復号化の際にあらかじめ平文の長さを計算しておく必要がある。TLS 1.2 の ADEAD では explicit IV が利用されるので、以下のように平文の長さを計算できる。&lt;/p&gt;
&lt;pre&gt;
      平文の長さ = 暗号文の長さ - explicit IV の長さ - 認証タグの長さ
&lt;/pre&gt;
&lt;h4&gt;ドラフト26&lt;/h4&gt;
&lt;p&gt;supported_versions拡張では、TLS 1.2 以前のバージョンを交渉してはいけないことが明記された。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/03-13-stack-extra-deps-shorthand.html</id><title type="text">extra-deps に github の短縮形が指定できるようになります</title><updated>2018-03-13T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/03-13-stack-extra-deps-shorthand.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;今日マージされた &lt;a href="https://github.com/commercialhaskell/stack/pull/3890"&gt;Allow ‘github’ shorthand for extra-deps (fixes #3873) #3890&lt;/a&gt; がとても便利だと思いますのでご紹介します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; --version&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="ex"&gt;Version&lt;/span&gt; 1.7.0, Git revision 4a140342f9b28005bf2fdd5335bdcd32c9370265 (5702 commits) &lt;span class="ex"&gt;x86_64&lt;/span&gt; hpack-0.21.2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;code&gt;stack.yaml&lt;/code&gt; に記述する &lt;code&gt;extra-deps&lt;/code&gt; は主に2つの理由で記述することが多いです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lts&lt;/code&gt; に含まれていないパッケージのバージョンを指定するため&lt;/li&gt;
&lt;li&gt;そもそも &lt;code&gt;Hackage&lt;/code&gt; に上がっていないパッケージを使うため&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は &lt;code&gt;extra-deps&lt;/code&gt; の指定方法に &lt;code&gt;github&lt;/code&gt; 専用の短縮形が導入されました。&lt;/p&gt;
&lt;p&gt;こんな感じで指定可能です。(コミットの短縮形はいつから使えていたのかわかりませんが、使えます)&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="fu"&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;github:&lt;/span&gt;&lt;span class="at"&gt; haskell/text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;commit:&lt;/span&gt;&lt;span class="at"&gt; 9fac5d&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.6.5 ではまだ利用できない機能となっております。&lt;/p&gt;
&lt;h2 id="試し方"&gt;試し方&lt;/h2&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; upgrade --git&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="co"&gt;# コンパイルするので時間かかります&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; --version&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="ex"&gt;Version&lt;/span&gt; 1.7.0, Git revision 4a140342f9b28005bf2fdd5335bdcd32c9370265 (5702 commits) &lt;span class="ex"&gt;x86_64&lt;/span&gt; hpack-0.21.2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;遊んでから、元の &lt;code&gt;stack&lt;/code&gt; のバージョンに戻す時は以下のようにするだけです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; upgrade --binary-version 1.6.5&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;span class="ex"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; --version&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;&lt;span class="ex"&gt;Version&lt;/span&gt; 1.6.5, Git revision 24ab0d6ff07f28276e082c3ce74dfdeb1a2ca9e9 (5514 commits) &lt;span class="ex"&gt;x86_64&lt;/span&gt; hpack-0.20.0&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;&lt;span class="co"&gt;# バイナリが落ちてくるのですぐ終わります&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack 1.7.0&lt;/code&gt; ぐらいから利用できるようになるはず&lt;/li&gt;
&lt;li&gt;&lt;code&gt;github&lt;/code&gt; が新たに追加され &lt;code&gt;user/repo&lt;/code&gt; の短縮形で記述できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit&lt;/code&gt; もいつからか短縮形で記述できるようになっていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subdirs&lt;/code&gt; を指定すれば &lt;code&gt;Yesod&lt;/code&gt; のような mega-repo でも指定できる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/03-07-The-wizard-monoid.html</id><title type="text">wizard モノイド</title><updated>2018-03-07T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/03-07-The-wizard-monoid.html"/><summary type="html">&lt;h2 id="wizard-モノイド-翻訳"&gt;wizard モノイド (翻訳)&lt;/h2&gt;
&lt;p&gt;Original post: &lt;a href="http://www.haskellforall.com/2018/02/the-wizard-monoid.html"&gt;The wizard monoid&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近の GHC 8.0 は、&lt;code&gt;IO&lt;/code&gt; 用の &lt;code&gt;Monoid&lt;/code&gt; インスタンスを提供しています。このブログ記事では、組み合わせ可能な “wizard” を作りつつ、なぜこのインスタンスが便利なのかを示す例をお見せします。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3 id="wizard"&gt;Wizard&lt;/h3&gt;
&lt;p&gt;ここで使う “wizard” とは、ユーザーに複数の入力を促し、全ての入力が完了したら、いくつかのアクションを実行するようなプログラムです。&lt;/p&gt;
&lt;p&gt;簡単な wizard の例です:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;    &lt;span class="co"&gt;-- First, we request all inputs:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;    name &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your age?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;    age &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;    &lt;span class="co"&gt;-- Then, we perform all actions:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;    putStrLn (&lt;span class="st"&gt;&amp;quot;Your name is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; name)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;    putStrLn (&lt;span class="st"&gt;&amp;quot;Your age is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; age)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… 実行例:&lt;/p&gt;
&lt;pre class="plain"&gt;&lt;code&gt;What is your name?
Gabriel&amp;lt;Enter&amp;gt;
What is your age?
31&amp;lt;Enter&amp;gt;
Your name is: Gabriel
Your age is: 31&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… それで、以下はもう少し複雑な wizard の例です:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;System.Directory&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;    &lt;span class="co"&gt;-- First, we request all inputs:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;    files &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; System.Directory.listDirectory &lt;span class="st"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; askFile file &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;            putStrLn (&lt;span class="st"&gt;&amp;quot;Would you like to delete &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; file &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;            response &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;            &lt;span class="kw"&gt;case&lt;/span&gt; response &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;                &lt;span class="st"&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; return [file]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;                _   &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; return []&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;    listOfListOfFilesToRemove &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; mapM askFile files&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; listOfFilesToRemove &lt;span class="fu"&gt;=&lt;/span&gt; concat listOfListOfFilesToRemove&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" data-line-number="17"&gt;    &lt;span class="co"&gt;-- Then, we perform all actions:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" data-line-number="18"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; removeFile file &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" data-line-number="19"&gt;            putStrLn (&lt;span class="st"&gt;&amp;quot;Removing &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; file)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-20" data-line-number="20"&gt;            System.Directory.removeFile file&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-21" data-line-number="21"&gt;    mapM_ removeFile listOfFilesToRemove&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… 実行例:&lt;/p&gt;
&lt;pre class="plain"&gt;&lt;code&gt;Would you like to delete file1.txt?
y&amp;lt;Enter&amp;gt;
Would you like to delete file2.txt?
n&amp;lt;Enter&amp;gt;
Would you like to delete file3.txt?
y&amp;lt;Enter&amp;gt;
Removing file1.txt
Removing file3.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上に挙げた例では、ユーザーが要求された入力を全て入力し終えるまで、変更ができないアクションを実行するのは避けたいという要求があります。&lt;/p&gt;
&lt;h3 id="モジュール性"&gt;モジュール性&lt;/h3&gt;
&lt;p&gt;最初の例を見直してみましょう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;    &lt;span class="co"&gt;-- First, we request all inputs:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;    name &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your age?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;    age &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;    &lt;span class="co"&gt;-- Then, we perform all actions:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;    putStrLn (&lt;span class="st"&gt;&amp;quot;Your name is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; name)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;    putStrLn (&lt;span class="st"&gt;&amp;quot;Your age is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; age)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この例は、実質的には2つの独立した wizard を組み合わせています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最初の wizard はユーザーの名前を要求し、表示している&lt;/li&gt;
&lt;li&gt;2つ目の wizard はユーザーの年齢を要求し、表示している&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし、アクションを実行する前に全ての入力が必要だったので、2つの wizard のロジックをそれぞれ混ぜる必要がありました。&lt;/p&gt;
&lt;p&gt;これら2つの wizard を別々に定義し、より大きな wizard に合体させる方法があったらどうでしょう? &lt;code&gt;IO&lt;/code&gt; の &lt;code&gt;Monoid&lt;/code&gt; インスタンスの長所を活かせば可能です。こんな感じ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Monoid&lt;/span&gt; ((&amp;lt;&amp;gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;span class="ot"&gt;name ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;name &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;    x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;    return (putStrLn (&lt;span class="st"&gt;&amp;quot;Your name is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;&lt;span class="ot"&gt;age ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;age &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-11" data-line-number="11"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your age?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-12" data-line-number="12"&gt;    x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-13" data-line-number="13"&gt;    return (putStrLn (&lt;span class="st"&gt;&amp;quot;Your age is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-15" data-line-number="15"&gt;&lt;span class="ot"&gt;runWizard ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-16" data-line-number="16"&gt;runWizard request &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-17" data-line-number="17"&gt;    respond &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-18" data-line-number="18"&gt;    respond&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-20" data-line-number="20"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-21" data-line-number="21"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; runWizard (name &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; age)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このプログラムはさっきの例と完全に同じ動きをします。が、ユーザーの名前を扱うロジックは、ユーザーの年齢を扱うロジックと完全に分離されています。&lt;/p&gt;
&lt;p&gt;この方法でうまくいくのは、それぞれの wizard を2つの部分に分けたからです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リクエストの部分 (ユーザーに入力を求める部分など)&lt;/li&gt;
&lt;li&gt;レスポンスの部分 (その入力に応じたアクションを実行する部分など)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… そしてそれぞれの wizard に &lt;code&gt;IO (IO ())&lt;/code&gt; という型を与えることによって、型レベルでこれを実現しています:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="ot"&gt;name ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;&lt;span class="ot"&gt;age ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;外側の &lt;code&gt;IO&lt;/code&gt; アクションは“リクエスト”です。リクエストが終了したとき、外側の &lt;code&gt;IO&lt;/code&gt; アクションは内側の &lt;code&gt;IO&lt;/code&gt; アクション、つまり“レスポンス”を返します。例えば:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;--      ↓ リクエスト&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;name ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;span class="co"&gt;--          ↑ レスポンス&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;name &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;    x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;    &lt;span class="co"&gt;-- ↑ ここから上の部分全てが、外側の `IO` アクションの一部 (例えばリクエスト)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;    &lt;span class="co"&gt;--      ↓ この return される値は、内側の `IO` アクション (例えばレスポンス)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;    return (putStrLn (&lt;span class="st"&gt;&amp;quot;Your name is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; x))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wizard は &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt; 演算子を使って組み合わせることができます。&lt;code&gt;IO&lt;/code&gt; アクションに限って言うなら、以下のような動作をします:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;ioLeft &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; ioRight&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;&lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt; resultLeft  &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; ioLeft&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;     resultRight &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; ioRight&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;     return (resultLeft &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; resultRight)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;言い換えるなら、&lt;code&gt;IO&lt;/code&gt; アクションを2つ組み合わせるということは、それぞれの &lt;code&gt;IO&lt;/code&gt; アクションを実行して結果を組み合わせるということなのです。これは、2つの &lt;code&gt;IO&lt;/code&gt; アクションをネストさせると、アクションを実行して結果を組み合わせるという処理を2回実行する、ということも示しています:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;requestLeft &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; requestRight&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt; respondLeft  &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; requestLeft&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;     respondRight &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; requestRight&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;     return (respondLeft &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; respondRight)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;&lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt; respondLeft  &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; requestLeft&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;     respondRight &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; requestRight&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;     return (&lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-10" data-line-number="10"&gt;         unitLeft  &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; respondLeft&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-11" data-line-number="11"&gt;         unitRight &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; respondRight&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-12" data-line-number="12"&gt;         return (unitLeft &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; unitRight) )&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-14" data-line-number="14"&gt;&lt;span class="co"&gt;-- Both `unitLeft` and `unitRight` are `()` and `() &amp;lt;&amp;gt; () = ()`, so we can&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-15" data-line-number="15"&gt;&lt;span class="co"&gt;-- simplify this further to:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-17" data-line-number="17"&gt;&lt;span class="co"&gt;-- `unitLeft` も `unitRight` も `()` で、`() &amp;lt;&amp;gt; () = ()` なので、&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-18" data-line-number="18"&gt;&lt;span class="co"&gt;-- 以下のように簡約化することができます:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-19" data-line-number="19"&gt;&lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt; respondLeft  &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; requestLeft&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-20" data-line-number="20"&gt;     respondRight &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; requestRight&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-21" data-line-number="21"&gt;     return (&lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-22" data-line-number="22"&gt;         respondLeft&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-23" data-line-number="23"&gt;         respondRight )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり、2つの wizard を組み合わせると、リクエストを組み合わせてレスポンスも組み合わせたことになるのです。&lt;/p&gt;
&lt;p&gt;この方法は2つ以上の wizard でもうまくいきます。例えば:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;request0 &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; request1 &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; request2 &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; request3&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;&lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt; respond0 &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request0&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;     respond1 &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request1&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;     respond2 &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request2&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;     respond3 &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request3&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;     return (&lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" data-line-number="8"&gt;         respond0&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" data-line-number="9"&gt;         respond1&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" data-line-number="10"&gt;         respond2&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" data-line-number="11"&gt;         respond3 )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これをアクションの形で表現するために、さっきの例をもう一度見てみましょう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Monoid&lt;/span&gt; ((&amp;lt;&amp;gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;&lt;span class="ot"&gt;name ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;name &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;    x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;    return (putStrLn (&lt;span class="st"&gt;&amp;quot;Your name is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" data-line-number="9"&gt;&lt;span class="ot"&gt;age ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" data-line-number="10"&gt;age &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" data-line-number="11"&gt;    putStrLn &lt;span class="st"&gt;&amp;quot;What is your age?&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-12" data-line-number="12"&gt;    x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-13" data-line-number="13"&gt;    return (putStrLn (&lt;span class="st"&gt;&amp;quot;Your age is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-15" data-line-number="15"&gt;&lt;span class="ot"&gt;runWizard ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-16" data-line-number="16"&gt;runWizard request &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-17" data-line-number="17"&gt;    respond &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-18" data-line-number="18"&gt;    respond&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-20" data-line-number="20"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-21" data-line-number="21"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; runWizard (name &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; age)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;…&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;age&lt;/code&gt; はかなり似ているので、共通の関数を使うような実装にすることができますね:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Monoid&lt;/span&gt; ((&amp;lt;&amp;gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;span class="ot"&gt;prompt ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;prompt attribute &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;    putStrLn (&lt;span class="st"&gt;&amp;quot;What is your &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; attribute &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;    x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;    return (putStrLn (&lt;span class="st"&gt;&amp;quot;Your &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; attribute &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-9" data-line-number="9"&gt;&lt;span class="ot"&gt;runWizard ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-10" data-line-number="10"&gt;runWizard request &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-11" data-line-number="11"&gt;    respond &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-12" data-line-number="12"&gt;    respond&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-14" data-line-number="14"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-15" data-line-number="15"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; runWizard (prompt &lt;span class="st"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; prompt &lt;span class="st"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2つの wizard のロジックが混ざっていたとき、この共通化のロジックを使うことはできませんでした。しかしロジック毎に別々の wizard に分割すると、プログラムを小さくするための共通構造を突くことができます。&lt;/p&gt;
&lt;p&gt;このプログラムの圧縮によって、簡単に新しい wizard を追加することができます:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Monoid&lt;/span&gt; ((&amp;lt;&amp;gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;&lt;span class="ot"&gt;prompt ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;prompt attribute &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;    putStrLn (&lt;span class="st"&gt;&amp;quot;What is your &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; attribute &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;    x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;    return (putStrLn (&lt;span class="st"&gt;&amp;quot;Your &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; attribute &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;&lt;span class="ot"&gt;runWizard ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;runWizard request &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;    respond &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;    respond&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; runWizard (prompt &lt;span class="st"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; prompt &lt;span class="st"&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; prompt &lt;span class="st"&gt;&amp;quot;favorite color&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… そして、モノイド関連の標準ライブラリ関数を活用しましょう。例えば &lt;code&gt;foldMap&lt;/code&gt; を使えば wizard を大量に作ることができます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Monoid&lt;/span&gt; ((&amp;lt;&amp;gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;&lt;span class="ot"&gt;prompt ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;prompt attribute &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;    putStrLn (&lt;span class="st"&gt;&amp;quot;What is your &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; attribute &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;    x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;    return (putStrLn (&lt;span class="st"&gt;&amp;quot;Your &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; attribute &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; is: &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;&lt;span class="ot"&gt;runWizard ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;runWizard request &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;    respond &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;    respond&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-14" data-line-number="14"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-15" data-line-number="15"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; runWizard (foldMap prompt [ &lt;span class="st"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;favorite color&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;sign&amp;quot;&lt;/span&gt; ])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;より重要なのは、プログラムが何をしているのか一目瞭然になりました。読みやすさは書きやすさに比べ、大きな美徳です。&lt;/p&gt;
&lt;h3 id="最後の例"&gt;最後の例&lt;/h3&gt;
&lt;p&gt;ファイル削除の例も同じ観点から見直してみましょう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;System.Directory&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" data-line-number="4"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-5" data-line-number="5"&gt;    &lt;span class="co"&gt;-- 最初に全ての入力をリクエストする:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-6" data-line-number="6"&gt;    files &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; System.Directory.listDirectory &lt;span class="st"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-7" data-line-number="7"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; askFile file &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-8" data-line-number="8"&gt;            putStrLn (&lt;span class="st"&gt;&amp;quot;Would you like to delete &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; file &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-9" data-line-number="9"&gt;            response &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-10" data-line-number="10"&gt;            &lt;span class="kw"&gt;case&lt;/span&gt; response &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-11" data-line-number="11"&gt;                &lt;span class="st"&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; return [file]&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-12" data-line-number="12"&gt;                _   &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; return []&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-14" data-line-number="14"&gt;    listOfListOfFilesToRemove &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; mapM askFile files&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-15" data-line-number="15"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; listOfFilesToRemove &lt;span class="fu"&gt;=&lt;/span&gt; concat listOfListOfFilesToRemove&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-17" data-line-number="17"&gt;    &lt;span class="co"&gt;-- 次に全てのアクションを実行する&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-18" data-line-number="18"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; removeFile file &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-19" data-line-number="19"&gt;            putStrLn (&lt;span class="st"&gt;&amp;quot;Removing &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; file)&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-20" data-line-number="20"&gt;            System.Directory.removeFile file&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-21" data-line-number="21"&gt;    mapM_ removeFile listOfFilesToRemove&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さっきと同じパターンで、シンプルにすることができます:&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;System.Directory&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-4" data-line-number="4"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-5" data-line-number="5"&gt;    files &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; System.Directory.listDirectory &lt;span class="st"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-6" data-line-number="6"&gt;    runWizard (foldMap prompt files)&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-8" data-line-number="8"&gt;&lt;span class="ot"&gt;prompt ::&lt;/span&gt; FilePath &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-9" data-line-number="9"&gt;prompt file &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-10" data-line-number="10"&gt;    putStrLn (&lt;span class="st"&gt;&amp;quot;Would you like to delete &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; file &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-11" data-line-number="11"&gt;    response &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-12" data-line-number="12"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; response &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-13" data-line-number="13"&gt;        &lt;span class="st"&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; return (&lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-14" data-line-number="14"&gt;            putStrLn (&lt;span class="st"&gt;&amp;quot;Removing &amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; file)&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-15" data-line-number="15"&gt;            System.Directory.removeFile file )&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-16" data-line-number="16"&gt;        _   &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; return (return ())&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-17" data-line-number="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-18" data-line-number="18"&gt;&lt;span class="ot"&gt;runWizard ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;IO&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-19" data-line-number="19"&gt;runWizard request &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-20" data-line-number="20"&gt;    respond &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; request&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-21" data-line-number="21"&gt;    respond&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;やるべきなのは、1つのファイルに対して処理を行う wizard を定義すること、そして &lt;code&gt;foldMap&lt;/code&gt; を使って wizard を大量に生成することだけです。&lt;code&gt;IO&lt;/code&gt; の &lt;code&gt;Monoid&lt;/code&gt; インスタンスは、全てのリクエストを束ねて表示し、後で選択したファイルを削除してくれます。&lt;/p&gt;
&lt;h3 id="結論"&gt;結論&lt;/h3&gt;
&lt;p&gt;ユーザーが望む wizard の全てにこのパターンが適用できるわけではありません。例えば、wizard が互いに依存しているような状況では、このパターンはすぐに使い物にならなくなります。しかし、このパターンは &lt;code&gt;Monoid&lt;/code&gt; の &lt;code&gt;IO&lt;/code&gt; インスタンスを他の &lt;code&gt;Monoid&lt;/code&gt; のインスタンスと (もしくは自分自身と!) 連結させ、新しい動作を生成するような一例にはなっています。&lt;/p&gt;</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20180306/1520314185</id><title type="text">[Haskell]あなたの知らないSemigroupの世界</title><updated>2018-03-06T05:29:45Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20180306/1520314185"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;自分で定義するデータの中には、足し算したくなるようなデータがある。たとえば、送信と受信のカウンターを定義したとしよう。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synType"&gt;data&lt;/span&gt; Metrics &lt;span class="synStatement"&gt;=&lt;/span&gt; Metrics {
    rx &lt;span class="synStatement"&gt;::&lt;/span&gt; Int
  , ts &lt;span class="synStatement"&gt;::&lt;/span&gt; Int
  } &lt;span class="synType"&gt;deriving&lt;/span&gt; (Eq, Show)
&lt;/pre&gt;

&lt;p&gt;これは以下のように足し算できると嬉しいだろう。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synStatement"&gt;&amp;#62;&lt;/span&gt; Metrics &lt;span class="synConstant"&gt;1&lt;/span&gt; &lt;span class="synConstant"&gt;2&lt;/span&gt; &lt;span class="synStatement"&gt;+&lt;/span&gt; Metrics &lt;span class="synConstant"&gt;3&lt;/span&gt; &lt;span class="synConstant"&gt;4&lt;/span&gt;
Metrics {rx &lt;span class="synStatement"&gt;=&lt;/span&gt; &lt;span class="synConstant"&gt;4&lt;/span&gt;, ts &lt;span class="synStatement"&gt;=&lt;/span&gt; &lt;span class="synConstant"&gt;6&lt;/span&gt;}
&lt;/pre&gt;

&lt;p&gt;しかしこれは Num のインスタンスにすべきではない。このデータ型に掛け算は定義できないからだ。かといって、addMetrics みたいな関数を定義するのはかっこ悪い。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synStatement"&gt;&amp;#62;&lt;/span&gt; Metrics &lt;span class="synConstant"&gt;1&lt;/span&gt; &lt;span class="synConstant"&gt;2&lt;/span&gt; &lt;span class="synStatement"&gt;`addMetrics`&lt;/span&gt; Metrics &lt;span class="synConstant"&gt;3&lt;/span&gt; &lt;span class="synConstant"&gt;4&lt;/span&gt;
Metrics {rx &lt;span class="synStatement"&gt;=&lt;/span&gt; &lt;span class="synConstant"&gt;4&lt;/span&gt;, ts &lt;span class="synStatement"&gt;=&lt;/span&gt; &lt;span class="synConstant"&gt;6&lt;/span&gt;}
&lt;/pre&gt;

&lt;p&gt;このように演算子が一個だけ欲しいと思ったら、それは多分 Monoid だ。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synPreProc"&gt;import&lt;/span&gt; Data.Monoid

&lt;span class="synType"&gt;instance&lt;/span&gt; Monoid Metrics &lt;span class="synType"&gt;where&lt;/span&gt;
    mempty &lt;span class="synStatement"&gt;=&lt;/span&gt; Metrics &lt;span class="synConstant"&gt;0&lt;/span&gt; &lt;span class="synConstant"&gt;0&lt;/span&gt;
    Metrics r1 t1 &lt;span class="synStatement"&gt;`mappend`&lt;/span&gt; Metrics r2 t2 &lt;span class="synStatement"&gt;=&lt;/span&gt; Metrics (r1 &lt;span class="synStatement"&gt;+&lt;/span&gt; r2) (t1 &lt;span class="synStatement"&gt;+&lt;/span&gt; t2)
&lt;/pre&gt;

&lt;p&gt;GHC 7.10までは、(&amp;#60;&amp;#62;) が mappend の別名であるので、以下のようなコードが書ける。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synStatement"&gt;&amp;#62;&lt;/span&gt; Metrics &lt;span class="synConstant"&gt;1&lt;/span&gt; &lt;span class="synConstant"&gt;2&lt;/span&gt; &lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt; Metrics &lt;span class="synConstant"&gt;3&lt;/span&gt; &lt;span class="synConstant"&gt;4&lt;/span&gt;
Metrics {rx &lt;span class="synStatement"&gt;=&lt;/span&gt; &lt;span class="synConstant"&gt;4&lt;/span&gt;, ts &lt;span class="synStatement"&gt;=&lt;/span&gt; &lt;span class="synConstant"&gt;6&lt;/span&gt;}
&lt;/pre&gt;

&lt;p&gt;やったね！&lt;/p&gt;
&lt;h4&gt;GHC 8.4へようこそ&lt;/h4&gt;
&lt;p&gt;上記のコードを GHC 8.4 で読み込むと以下のようなエラーが出る。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
Example.hs&lt;span class="synStatement"&gt;:&lt;/span&gt;&lt;span class="synConstant"&gt;8&lt;/span&gt;&lt;span class="synStatement"&gt;:&lt;/span&gt;&lt;span class="synConstant"&gt;10&lt;/span&gt;&lt;span class="synStatement"&gt;:&lt;/span&gt; error&lt;span class="synStatement"&gt;:&lt;/span&gt;
    ・ No &lt;span class="synType"&gt;instance&lt;/span&gt; for (Semigroup Metrics)
        arising from the superclasses &lt;span class="synStatement"&gt;of&lt;/span&gt; an &lt;span class="synType"&gt;instance&lt;/span&gt; declaration
    ・In the &lt;span class="synType"&gt;instance&lt;/span&gt; declaration for ‘Monoid Metrics’
  &lt;span class="synStatement"&gt;|&lt;/span&gt;
&lt;span class="synConstant"&gt;8&lt;/span&gt; &lt;span class="synStatement"&gt;|&lt;/span&gt; &lt;span class="synType"&gt;instance&lt;/span&gt; Monoid Metrics &lt;span class="synType"&gt;where&lt;/span&gt;
  &lt;span class="synStatement"&gt;|&lt;/span&gt;          &lt;span class="synStatement"&gt;^^^^^^^^^^^^^^&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;これはどういうことだろう？ その疑問に答えるのがこの記事の主旨である。&lt;/p&gt;
&lt;p&gt;mappendよりも(&amp;#60;&amp;#62;)の方がかっこいいのに、長い間 (&amp;#60;&amp;#62;) はMonoidのメソッドにはしてもらえなかった。あくまで別名であった。それは一部の人に、SemigroupをMonoidのスーパークラスにするという野望があったからだ。&lt;/p&gt;
&lt;p&gt;数学での定義を思い出そう：&lt;/p&gt;
&lt;h5&gt; 半群 (Semigroup)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt; 結合則: (a &amp;#60;&amp;#62; b) &amp;#60;&amp;#62; c = a &amp;#60;&amp;#62; (b &amp;#60;&amp;#62; c)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt; モノイド (Monoid)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt; 結合則: (a &amp;#60;&amp;#62; b) &amp;#60;&amp;#62; c = a &amp;#60;&amp;#62; (b &amp;#60;&amp;#62; c)&lt;/li&gt;
&lt;li&gt; 単位元：e &amp;#60;&amp;#62; a = a &amp;#60;&amp;#62; e = a&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt; 群 (Group)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt; 結合則: (a &amp;#60;&amp;#62; b) &amp;#60;&amp;#62; c = a &amp;#60;&amp;#62; (b &amp;#60;&amp;#62; c)&lt;/li&gt;
&lt;li&gt; 単位元：e &amp;#60;&amp;#62; a = a &amp;#60;&amp;#62; e = a&lt;/li&gt;
&lt;li&gt; 逆元：a &amp;#60;&amp;#62; inv a = e&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さっきの疑問に答えると、GHC 8.4ではSemigroupがMonoidのスーパークラスとなり、Metricsに対する(&amp;#60;&amp;#62;)の定義がないために、エラーが出たという訳だ。&lt;/p&gt;
&lt;h4&gt;状況把握&lt;/h4&gt;
&lt;p&gt;今後どのようなコードを書けばよいかという疑問に答えるためには、GHCの各バージョンでの状況を把握しなければならない。&lt;/p&gt;
&lt;h5&gt;GHC 7.10 (base 4.8)&lt;/h5&gt;
&lt;p&gt;GHC 7.10 では、みなさんご存知のように base パッケージに Data.Monoid モジュールがある：&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synComment"&gt;-- base : Data.Monoid&lt;/span&gt;
&lt;span class="synType"&gt;class&lt;/span&gt; Monoid a &lt;span class="synType"&gt;where&lt;/span&gt;
    mempty &lt;span class="synStatement"&gt;::&lt;/span&gt; a
    mappend &lt;span class="synStatement"&gt;::&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a

(&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;::&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a
(&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;=&lt;/span&gt; mappend
&lt;/pre&gt;

&lt;p&gt;Monoid型自体はPreludeの仲間入りを果たしたが、(&amp;#60;&amp;#62;)は明示的にimportする必要がある。&lt;/p&gt;
&lt;p&gt;Data.Semigroupは、semigroupsパッケージで定義されている：&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synComment"&gt;-- semigroup : Data.Semigroup&lt;/span&gt;
&lt;span class="synType"&gt;class&lt;/span&gt; Semigroup a &lt;span class="synType"&gt;where&lt;/span&gt;
    (&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;::&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a

&lt;span class="synType"&gt;default&lt;/span&gt; (&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;::&lt;/span&gt; Monoid a &lt;span class="synStatement"&gt;=&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a
  (&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;=&lt;/span&gt; mappend
&lt;/pre&gt;

&lt;p&gt;最後の default は、DefaultSignatures という拡張で、Monoidの制約を持てば Semigroupの方の (&amp;#60;&amp;#62;) は mappend で代用できると読む。親子関係がひっくり返っていて、なんだかなぁという感じである。&lt;/p&gt;
&lt;h5&gt;GHC 8.0 (base 4.9)&lt;/h5&gt;
&lt;p&gt;Data.Semigroupがsemigroupパッケージからbaseパッケージへ移った：&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synComment"&gt;-- base : Data.Monoid&lt;/span&gt;
&lt;span class="synType"&gt;class&lt;/span&gt; Monoid a &lt;span class="synType"&gt;where&lt;/span&gt;
    mempty &lt;span class="synStatement"&gt;::&lt;/span&gt; a
    mappend &lt;span class="synStatement"&gt;::&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a

(&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;::&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a
(&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;=&lt;/span&gt; mappend

&lt;span class="synComment"&gt;--base : Data.Semigroup&lt;/span&gt;
&lt;span class="synType"&gt;class&lt;/span&gt; Semigroup a &lt;span class="synType"&gt;where&lt;/span&gt;
    (&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;::&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a
&lt;/pre&gt;

&lt;p&gt;親子関係はない。&lt;/p&gt;
&lt;p&gt;フラグ -Wnoncanonical-monoid-instances が定義された。これは、MonoidのインスタンスなのにSemigroupのインスタンスになってないと警告を出すフラグである。デフォルトは off。上位互換性に関するフラグ -Wcompat を付けても、警告が出る。&lt;/p&gt;
&lt;p&gt;まだ GHC 8.4 を使えない人は、-Wall の横に -Wcompat を書き足して遊んでみるとよい。&lt;/p&gt;
&lt;h5&gt; GHC 8.2 (base 4.10)&lt;/h5&gt;
&lt;p&gt;何も変更なし。嵐の前の静けさだ。&lt;/p&gt;
&lt;h5&gt; GHC 8.4 (base 4.11)&lt;/h5&gt;
&lt;p&gt;なんとなんと、MonoidとSemigroupがPreludeの仲間に入った。そして、SemigroupがMonoidのスーパークラスとなった。&lt;/p&gt;
&lt;pre class="syntax-highlight"&gt;
&lt;span class="synComment"&gt;-- Prelude&lt;/span&gt;
&lt;span class="synType"&gt;class&lt;/span&gt; Semigroup a &lt;span class="synType"&gt;where&lt;/span&gt;
  (&lt;span class="synStatement"&gt;&amp;#60;&amp;#62;&lt;/span&gt;) &lt;span class="synStatement"&gt;::&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a &lt;span class="synStatement"&gt;-&amp;#62;&lt;/span&gt; a

&lt;span class="synType"&gt;class&lt;/span&gt; Semigroup a &lt;span class="synStatement"&gt;=&amp;#62;&lt;/span&gt; Monoid a &lt;span class="synType"&gt;where&lt;/span&gt;
  mempty &lt;span class="synStatement"&gt;::&lt;/span&gt; a
&lt;/pre&gt;

&lt;p&gt;訂正：SemigroupがMonoidのスパークラスになったために、(&amp;#60;&amp;#62;) を定義してないとエラーが出るようになった。嵐がやってきたのだ。&lt;/p&gt;
&lt;h4&gt;対処方法&lt;/h4&gt;
&lt;p&gt;ここまで解説すれば、対処方法は明らかであろう。&lt;a href="https://prime.haskell.org/wiki/Libraries/Proposals/SemigroupMonoid" target="_blank"&gt;Semigroup (as superclass of) Monoid Proposal&lt;/a&gt;の最後に、semigroupsパッケージを使う方法と使わない方法が載っているので、よく眺めてほしい。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html</id><title type="text">tasty-discover が Windows+日本語環境で動かなかったので直す</title><updated>2018-03-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;tasty-discover が Windows+日本語環境で動かなかったので直す&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-03-04" itemprop="datePublished"&gt;
        Mar 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;おそらく少数派であろう Windows + 日本語環境の Haskeller のひげです．&lt;/p&gt;
&lt;p&gt;最近は知人のすゝめで，Haskell のテストフレームワークに &lt;a href="https://hackage.haskell.org/package/tasty"&gt;&lt;code&gt;tasty&lt;/code&gt;&lt;/a&gt; を使ってます． &lt;code&gt;tasty&lt;/code&gt; にも例に漏れず &lt;a href="http://hackage.haskell.org/package/tasty-discover"&gt;&lt;code&gt;tasty-discover&lt;/code&gt;&lt;/a&gt; というテスト用の関数を &lt;code&gt;.hs&lt;/code&gt; ファイルから集めてきてくれるツールがある． しかし，悲しいことに &lt;code&gt;tasty-discover&lt;/code&gt; がマルチバイト文字(日本語とか)を Windows で読み込むと &lt;strong&gt;いつもの&lt;/strong&gt; エラーで死んでしまう．&lt;/p&gt;
&lt;p&gt;なので，直して PR 出した． この記事はそのメモです．&lt;/p&gt;
&lt;h2 id="問題のエラー"&gt;問題のエラー&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Building test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
tasty-discover: test\ConfigTest.hs: hGetContents: invalid argument (invalid byte sequence)
`tasty-discover&amp;#39; failed in phase `Haskell pre-processor&amp;#39;. (Exit code: 1)
Progress: 1/2
--  While building custom Setup.hs for package tasty-discover-4.1.3 using:
      C:\Users\Hoge\AppData\Roaming\stack\setup-exe-cache\i386-windows\Cabal-simple_Z6RU0evB_2.0.1.0_ghc-8.2.2.exe --builddir=.stack-work\dist\010ee936 build lib:tasty-discover exe:tasty-discover test:test --ghc-options &amp;quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&amp;quot;
    Process exited with code: ExitFailure 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hGetContents: invalid argument (invalid byte sequence)&lt;/code&gt; は 日本語 Windows Haskeller なら親の顔より良く見るエラーメッセージですね(そんなことは無い)． このエラーは &lt;code&gt;hGetContents&lt;/code&gt; で読み込もうとしているファイルの文字コードが，&lt;code&gt;hGetContents&lt;/code&gt; で設定されている文字コードと違うために起きている(&lt;code&gt;hGetContents&lt;/code&gt; 関数は，例えば &lt;code&gt;readFile&lt;/code&gt; 関数などで呼び出されている)．&lt;/p&gt;
&lt;h2 id="対処法"&gt;対処法&lt;/h2&gt;
&lt;p&gt;日本語 Windows Haskeller 筆頭の igrep 氏が Haskell-jp Blog に投稿してくれてる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.jp/blog/posts/2017/windows-gotchas.html"&gt;WindowsでHaskellを扱う時によく遭遇するエラーと対処法 - Haskell-jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は(孫プロセスとして読んでるせいか)「それでもダメな場合」に当たる． つまり，場当たり的な解決方法(&lt;code&gt;chcp 65001&lt;/code&gt; と打つとか)ではダメで，プログラムを修正するしかない．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;神な igrep 氏は，この場合の解決策も書いておいてくれた． この &lt;a href="https://github.com/haskell/haddock/pull/566"&gt;PR&lt;/a&gt; を参考にして書き換えてやればよい．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tasty-discover&lt;/code&gt; も&lt;a href="https://github.com/lwm/tasty-discover/pull/138/files"&gt;こんな感じに書き加えた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="pr-を出す"&gt;PR を出す&lt;/h2&gt;
&lt;p&gt;修正自体は1時間ほどで終わり(移動中の新幹線の中で直した)，これでテストを実行できるようになったので PR を出さずに満足してしまった(あるある)． 半月ほどほっといてたら，同じケースで困った知り合いに &lt;a href="https://github.com/lwm/tasty-discover/issues/135"&gt;Issue&lt;/a&gt; を出されてしまった(笑)&lt;/p&gt;
&lt;p&gt;しょうがないので PR を出そうとしたら，「Windows は良く分からないから，ぜひ Windows 環境用の自動テストも欲しい！」と&lt;a href="https://github.com/lwm/tasty-discover/issues/127"&gt;作者に言われてしまった&lt;/a&gt;(「時間があればやって」とね)．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.appveyor.com/"&gt;AppVeyor&lt;/a&gt; と言うのを使えばいいみたい． 調べたらサクッとできそうなので，やってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci"&gt;Using AppVeyor for Haskell+Windows CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事にある設定ファイルをそのままコピペしてやってみたが，問題がふたつあった． ひとつ目は，&lt;code&gt;tasty-discover&lt;/code&gt; のテスト自体に &lt;code&gt;tasty-discover&lt;/code&gt; を使っている点だ． 最初に &lt;code&gt;stack test&lt;/code&gt; を実行するときにはまだ &lt;code&gt;tasty-discover&lt;/code&gt; はインストールされてないのでテストが落ちてしまう．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2 of 2] Compiling Paths_tasty_discover ( .stack-work\dist\010ee936\build\tasty-discover\autogen\Paths_tasty_discover.hs, .stack-work\dist\010ee936\build\tasty-discover\tasty-discover-tmp\Paths_tasty_discover.o )
Linking .stack-work\dist\010ee936\build\tasty-discover\tasty-discover.exe ...
Preprocessing test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
Building test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
ghc.EXE: could not execute: tasty-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なので，&lt;code&gt;stack test&lt;/code&gt; する前に &lt;code&gt;stack install&lt;/code&gt; することにした．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;ふたつ目は，そもそも WIndows のビルドが落ちる点． &lt;code&gt;System.FilePath&lt;/code&gt; に関するバグだったので，&lt;a href="https://github.com/lwm/tasty-discover/pull/136/files#diff-383b12983902facd1ce205458e1061b6"&gt;サクッと直した&lt;/a&gt;． Windows のテストに関する &lt;a href="https://github.com/lwm/tasty-discover/pull/136"&gt;PR&lt;/a&gt; もマージされたので，本命の &lt;a href="https://github.com/lwm/tasty-discover/pull/138"&gt;PR&lt;/a&gt; も出した(これもマージされた)．&lt;/p&gt;
&lt;h2 id="今回の問題をテストする"&gt;今回の問題をテストする(？)&lt;/h2&gt;
&lt;p&gt;今回の問題のテストも欲しいと言われた． &lt;code&gt;tasty-discover&lt;/code&gt; のテスト自体が &lt;code&gt;tasty-discover&lt;/code&gt; を使うため，ユニットテストとして表現できない． &lt;code&gt;stack test&lt;/code&gt; そのものが落ちるか落ちないかのテストはできるが，それはなんか違うなぁと思い，結局コミットはしていない．&lt;/p&gt;
&lt;p&gt;ただし，いちおう AppVeyor で&lt;a href="https://ci.appveyor.com/project/matsubara0507/tasty-discover/build/1.0.9"&gt;再現できるようにはした&lt;/a&gt;． AppVeyor はデフォルトだと日本語環境になっていない(即ち Shift-JIS じゃない)ため落ちない． なので，以下を参考にして日本語環境にして実行した．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appveyor/ci/issues/846"&gt;Support a different code page · Issue #846 · appveyor/ci&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;init:
- ps: Set-WinSystemLocale ja-JP
- ps: Start-Sleep -s 5
- ps: Restart-Computer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というのを &lt;code&gt;appveyor.yml&lt;/code&gt; に書き加えるだけで良い．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;なんか &lt;a href="https://github.com/lwm/tasty-discover/issues/139"&gt;Push 権限を貰った&lt;/a&gt;． こういうこともあるんですね(OSS歴が浅いので驚いた)．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v6</id><title type="text">test6</title><updated>2018-03-03T13:44:46Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v6"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v5</id><title type="text">test5</title><updated>2018-03-03T12:20:13Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v5"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v4</id><title type="text">test4</title><updated>2018-03-03T05:46:33Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v4"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v3</id><title type="text">test3</title><updated>2018-03-03T05:05:52Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v3"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v2</id><title type="text">test2</title><updated>2018-03-03T04:59:34Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v2"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v1</id><title type="text">test1</title><updated>2018-03-03T04:55:52Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v1"/></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/03-03-liquidhaskell-intro.html</id><title type="text">Liquid Haskell のインストールと学習方法</title><updated>2018-03-03T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/03-03-liquidhaskell-intro.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; を半年ほど勉強した結果、色々と出来ることが増えて楽しくなってきました。&lt;/p&gt;
&lt;p&gt;現状、日本語で詳しく説明しているブログ記事や &lt;code&gt;Qiita&lt;/code&gt; 記事はほとんどありません。&lt;/p&gt;
&lt;p&gt;とても面白いツールだと思いますので、色々と紹介していけたらと思います。&lt;/p&gt;
&lt;p&gt;今回は &lt;code&gt;Liquid Haskell&lt;/code&gt; の導入方法について簡単に説明したいと思います。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="liquid-haskell-とは"&gt;Liquid Haskell とは？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; は &lt;code&gt;GHC&lt;/code&gt; の型よりも、さらに厳密な &lt;code&gt;篩型 (Refinement Type)&lt;/code&gt; の型検査器です。&lt;/p&gt;
&lt;p&gt;既存のコードを変更 (さらには実行すら) することなく利用できるため、既存のプロジェクトの一部にだけ導入することも可能です。&lt;/p&gt;
&lt;p&gt;また、つい最近も &lt;code&gt;GADT&lt;/code&gt; をサポートしたりと、開発はとても活発に行われています。&lt;/p&gt;
&lt;p&gt;正しいソフトウェアを楽しく作るために、&lt;code&gt;Liquid Haskell&lt;/code&gt; を学習してみるのはどうでしょうか！&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;Liquid&lt;/code&gt; という単語は &lt;code&gt;液体&lt;/code&gt; と言いたくなりますが、それとはあまり関係なく、実際は &lt;code&gt;Logically Qualified Data&lt;/code&gt; の略です。(ロゴは &lt;code&gt;水滴&lt;/code&gt; + &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; なので、全く無関係では無いかもですが)&lt;/p&gt;
&lt;h2 id="インストール"&gt;インストール&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; は以下の2つのリポジトリで開発が進められています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquidhaskell"&gt;ucsd-progsys/liquidhaskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquid-fixpoint"&gt;ucsd-progsys/liquid-fixpoint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;liquidhaskell&lt;/code&gt; がフロントエンド (コマンドライン処理やパーサーなどの処理等) を行い &lt;code&gt;liquid-fixpoint&lt;/code&gt; が &lt;code&gt;SMT&lt;/code&gt; ソルバに投げるための処理を色々とやっている印象です。(詳しくないので間違ってたらすみません)&lt;/p&gt;
&lt;p&gt;なので、僕らが関係するのは基本的に &lt;code&gt;liquidhaskell&lt;/code&gt; リポジトリの方です。(&lt;code&gt;liquid-fixpoint&lt;/code&gt; はサブモジュールになっています)&lt;/p&gt;
&lt;p&gt;また、実際にチェックを行うのは &lt;code&gt;SMT&lt;/code&gt; ソルバなので、そちらも同様にインストールが必要です。&lt;/p&gt;
&lt;h3 id="smt-ソルバのインストール"&gt;SMT ソルバのインストール&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SMT&lt;/code&gt; ソルバも色々と種類があるようで、公式では以下の3種類が紹介されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Z3&lt;/li&gt;
&lt;li&gt;CVC4&lt;/li&gt;
&lt;li&gt;MathSat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どれでもちゃんと動くので好きなソルバを使えば良いのですが、どれを選んだら良いかわからない人は &lt;code&gt;Z3&lt;/code&gt; にしましょう。&lt;/p&gt;
&lt;p&gt;理由としてはインストール方法が簡単で、性能も良いそうです。&lt;/p&gt;
&lt;h4 id="ubuntu"&gt;Ubuntu&lt;/h4&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ sudo apt install z3

$ z3 --version
Z3 version 4.4.1&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="mac-brew"&gt;Mac (brew)&lt;/h4&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ brew install z3

$ z3 --version
Z3 version 4.6.0 - 64 bit&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="liquid-haskell-のインストール"&gt;Liquid Haskell のインストール&lt;/h3&gt;
&lt;p&gt;現状、一番安定しているのは &lt;code&gt;github&lt;/code&gt; の &lt;a href="https://github.com/ucsd-progsys/liquidhaskell"&gt;&lt;strong&gt;develop&lt;/strong&gt;&lt;/a&gt; ブランチを &lt;code&gt;stack&lt;/code&gt; でビルドしてインストールする方法だと思います。&lt;/p&gt;
&lt;p&gt;また、その他のインストール方法等は &lt;a href="https://github.com/ucsd-progsys/liquidhaskell/blob/develop/INSTALL.md"&gt;INSTALL.md&lt;/a&gt; をご参照下さい。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ git clone --recursive git@github.com:ucsd-progsys/liquidhaskell.git
$ cd liquidhaskell
$ stack install

$ liquid
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stack プロジェクトで利用する場合は、以下のように &lt;code&gt;stack exec&lt;/code&gt; コマンドで呼び出します。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack exec -- liquid
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="サンプルプログラム"&gt;サンプルプログラム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;myDiv&lt;/code&gt; 関数の例を使って &lt;code&gt;LiquidHaskell&lt;/code&gt; に慣れましょう！&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- MyDiv.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;MyDiv&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;myDiv&lt;/code&gt; の実装は単に &lt;code&gt;div&lt;/code&gt; をラップしただけです。&lt;/p&gt;
&lt;p&gt;この関数はだいたい上手く動きますが、もし第二引数に &lt;strong&gt;0&lt;/strong&gt; が与えられたらどうでしょうか？そう、実行時エラーになります・・・。試してみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack repl -- MyDiv.hs
*MyDiv&amp;gt; myDiv 10 2
5
*MyDiv&amp;gt; myDiv 10 0
*** Exception: divide by zero&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;全然安全ではありませんね。&lt;/p&gt;
&lt;p&gt;では、どうしたら本当に安全な &lt;code&gt;myDiv&lt;/code&gt; を作れるのでしょうか？&lt;/p&gt;
&lt;p&gt;その答えは&lt;code&gt;篩(ふるい)型&lt;/code&gt;にあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; では &lt;code&gt;篩型&lt;/code&gt; を &lt;code&gt;{-@ ... @-}&lt;/code&gt; のコメント形式で記述します。&lt;code&gt;Liquid Haskell&lt;/code&gt; を利用するメリットの1つは、篩型の自動推論です。(推論できない場合も多々ありますが、結構色々と推論してくれます)&lt;/p&gt;
&lt;p&gt;先程の &lt;code&gt;myDiv&lt;/code&gt; には篩型を書いていませんが、こういう場合に &lt;code&gt;Liquid Haskell&lt;/code&gt; は &lt;code&gt;Haskell&lt;/code&gt; の型をそのまま篩型として利用します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;myDiv&lt;/code&gt; に対して明示的に篩型を書いてみましょう！&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; Int -&amp;gt; Int @-}&lt;/span&gt; &lt;span class="co"&gt;-- これが篩型&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;myDiv&lt;/code&gt; 関数を &lt;code&gt;LquidHaskell&lt;/code&gt; でチェックしてみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid MyDiv.hs
**** RESULT: UNSAFE ************************************************************

 MyDiv.hs:4:11-13: Error: Liquid Type Mismatch

 4 | myDiv = div
             ^^^

   Inferred type
     VV : Int

   not a subtype of Required type
     VV : {VV : Int | VV /= 0}

   In Context&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なぜか &lt;code&gt;UNSAFE&lt;/code&gt; が表示されましたね。これは &lt;code&gt;Liquid Haskell&lt;/code&gt; で既に &lt;code&gt;div&lt;/code&gt; の篩型が定義されているからです。(&lt;a href="https://github.com/ucsd-progsys/liquidhaskell/blob/develop/include/GHC/Real.spec#L19"&gt;div&lt;/a&gt; 以外にも色々ありますが、充実しているとは言い難いと思います)&lt;/p&gt;
&lt;p&gt;だいたいこんな感じで、第二引数に &lt;strong&gt;0を含まないInt型&lt;/strong&gt; という事前条件がついているのです。&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ div :: Int -&amp;gt; {v:Int | v /= 0} -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そのため、先程のエラーメッセージで以下のように指摘されてしまったのです。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;not a subtype of Required type
     VV : {VV : Int | VV /= 0}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;つまり、僕らの定義した篩型は &lt;code&gt;0&lt;/code&gt; を含む &lt;code&gt;Int&lt;/code&gt; 型なので、このままだと &lt;code&gt;div&lt;/code&gt; に &lt;code&gt;0&lt;/code&gt; が与えられてしまう可能性があるよ！ということを教えてくれています。&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; Int -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;myDiv&lt;/code&gt; にも同じ篩型をつけてみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; {v:Int | v /= 0} -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;SAFE&lt;/code&gt; になります。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid MyDiv.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt; を含まない &lt;code&gt;Int&lt;/code&gt; 型というのは、よく使いそうなので篩型のエイリアスとして定義してみます。&lt;/p&gt;
&lt;p&gt;篩型のエイリアスは &lt;code&gt;type&lt;/code&gt; キーワードを使います。&lt;code&gt;Haskell&lt;/code&gt; と同じですね。&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ type NonZero = {v:Int | v /= 0} @-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして &lt;code&gt;myDiv&lt;/code&gt; の篩型も &lt;code&gt;NonZero&lt;/code&gt; で置き換えます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ type NonZero = {v:Int | v /= 0} @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; NonZero -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;意味は全く同じですが、先程よりもわかりやすくなりました。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid MyDiv.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後に &lt;code&gt;myDiv&lt;/code&gt; を呼び出す関数を定義してみましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;good&lt;/code&gt; は問題の無い使い方です。&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="ot"&gt;good ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;good &lt;span class="fu"&gt;=&lt;/span&gt; myDiv &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、以下のような関数 &lt;code&gt;bad&lt;/code&gt; が定義された場合、&lt;code&gt;Liquid Haskell&lt;/code&gt; は &lt;code&gt;UNSAFE&lt;/code&gt; を返します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;&lt;span class="ot"&gt;bad ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;bad &lt;span class="fu"&gt;=&lt;/span&gt; myDiv &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid MyDiv.hs
**** RESULT: UNSAFE ************************************************************

 MyDiv.hs:13:7-16: Error: Liquid Type Mismatch

 13 | bad = myDiv 10 0
            ^^^^^^^^^^

   Inferred type
     VV : {v : Int | v == (0 : int)
                     &amp;amp;&amp;amp; v == ?a}

   not a subtype of Required type
     VV : {VV : Int | VV /= 0}

   In Context
     ?a : {?a : Int | ?a == (0 : int)}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="問題"&gt;問題&lt;/h2&gt;
&lt;p&gt;以下のプログラムは標準入力から入力された数 &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; で &lt;code&gt;safeDiv n m&lt;/code&gt; を計算します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;safeDiv&lt;/code&gt; の &lt;code&gt;check&lt;/code&gt; を正しく実装して &lt;code&gt;Liquid Haskell&lt;/code&gt; の結果を &lt;code&gt;SAFE&lt;/code&gt; にしてみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb20-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- Main.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Main&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-4" data-line-number="4"&gt;&lt;span class="co"&gt;{-@ type NonZero = {v:Int | v /= 0} @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-6" data-line-number="6"&gt;&lt;span class="co"&gt;{-@ myDiv :: Int -&amp;gt; NonZero -&amp;gt; Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-7" data-line-number="7"&gt;&lt;span class="ot"&gt;myDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-8" data-line-number="8"&gt;myDiv &lt;span class="fu"&gt;=&lt;/span&gt; div&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-10" data-line-number="10"&gt;&lt;span class="co"&gt;{-@ lazy main @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-11" data-line-number="11"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-12" data-line-number="12"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-13" data-line-number="13"&gt;  n &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-14" data-line-number="14"&gt;  m &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-15" data-line-number="15"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; safeDiv (read n) (read m) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-16" data-line-number="16"&gt;    &lt;span class="dt"&gt;Just&lt;/span&gt; res &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; print res&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-17" data-line-number="17"&gt;    &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-18" data-line-number="18"&gt;      putStrLn &lt;span class="st"&gt;&amp;quot;第二引数に0が入力されています&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-19" data-line-number="19"&gt;      putStrLn &lt;span class="st"&gt;&amp;quot;もう一度入力してください&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-20" data-line-number="20"&gt;      main&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-22" data-line-number="22"&gt;&lt;span class="co"&gt;{-@ safeDiv :: Int -&amp;gt; Int -&amp;gt; Maybe Int @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-23" data-line-number="23"&gt;&lt;span class="ot"&gt;safeDiv ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-24" data-line-number="24"&gt;safeDiv n m&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-25" data-line-number="25"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; check     &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; div n m&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-26" data-line-number="26"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; otherwise &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-27" data-line-number="27"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-28" data-line-number="28"&gt;   check &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hint: &lt;code&gt;div&lt;/code&gt; に &lt;code&gt;0&lt;/code&gt; を通さないよう &lt;code&gt;check&lt;/code&gt; でバリデーションすれば良いです。&lt;/p&gt;
&lt;h3 id="エラーメッセージ"&gt;エラーメッセージ&lt;/h3&gt;
&lt;p&gt;現状では、&lt;code&gt;Liquid Haskell&lt;/code&gt; は以下のエラーメッセージを返します。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid Main.hs
**** RESULT: UNSAFE ************************************************************

 Main.hs:24:24-30: Error: Liquid Type Mismatch

 24 |   | check     = Just $ div n m
                             ^^^^^^^

   Inferred type
     VV : {v : Int | v == m}

   not a subtype of Required type
     VV : {VV : Int | VV /= 0}

   In Context
     m : Int&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="実行例"&gt;実行例&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; が &lt;code&gt;UNSAFE&lt;/code&gt; の場合は実行時エラーが発生します。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack repl -- Main.hs
*Main&amp;gt; main
10
2
5

*Main&amp;gt; main
10
0
*** Exception: divide by zero&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; を &lt;code&gt;SAFE&lt;/code&gt; にすると、再入力を促すようになります。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;*Main&amp;gt; main
10
0
第二引数に0が入力されています
もう一度入力してください
10
2
5&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="興味を持った方へ"&gt;興味を持った方へ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; に興味を持った方は以下の文献を読んで &lt;code&gt;Liquid Haskell&lt;/code&gt; に詳しくなりましょう！(個人的にまとめているやつを貼り付けただけなので雑ですみません・・・)&lt;/p&gt;
&lt;p&gt;たぶん、おすすめは以下のチュートリアルです。(僕はまだ読んでないですが、かなり最近できたものなので情報が新しく良いのではないかと思います)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://liquid.kosmikus.org/"&gt;Liquid Haskell Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="日本語の情報"&gt;日本語の情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ccvanishing.hateblo.jp/entry/2016/12/24/193038"&gt;LiquidHaskell コトハジメ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dodgsonlabs.booth.pm/items/490689"&gt;入門 LiquidHaskell −篩型による静的コード解析−&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://demand-side-science.jp/blog/2014/flops2014%E5%A0%B1%E5%91%8A/"&gt;FLOPS2014報告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ブログ"&gt;ブログ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ucsd-progsys.github.io/liquidhaskell-blog/"&gt;liquidhaskell-blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.haskellforall.com/2015/12/compile-time-memory-safety-using-liquid.html"&gt;Compile-time memory safety using Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://conscientiousprogrammer.com/blog/2015/12/23/24-days-of-hackage-2015-day-23-liquid-haskell-refinement-types-for-the-real-world/"&gt;Liquid Haskell: refinement types for the real world&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="チュートリアル"&gt;チュートリアル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://liquid.kosmikus.org/"&gt;Liquid Haskell Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquidhaskell-tutorial"&gt;liquidhaskell-tutorial&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;long tutorial&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ucsd-progsys.github.io/liquidhaskell-tutorial/book.pdf"&gt;book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/liquidhaskell-tutorial/blob/master/pdf/programming-with-refinement-types.pdf"&gt;programming-with-refinement-types.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ucsd-progsys/lh-workshop"&gt;lh-workshop&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;short tutorial&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~nvazou/presentations/shonan17/01-index.html"&gt;Liquid Haskell: Verification of Haskell Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="スライド"&gt;スライド&lt;/h3&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/00_Index.lhs.slides.html#/"&gt;Liquid Types For Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/01_SimpleRefinements.lhs.slides.html#/"&gt;Simple Refinement Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/02_Measures.lhs.slides.html#/"&gt;Measuring Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/03_HigherOrderFunctions.lhs.slides.html#/"&gt;Higher-Order Specifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/04_AbstractRefinements.lhs.slides.html#/"&gt;Abstract Refinements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/09_Laziness.lhs.slides.html#/"&gt;Lazy Evaluation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/10_Termination.lhs.slides.html#/"&gt;Refinements &amp;amp; Termination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/flops14/lhs/11_Evaluation.lhs.slides.html#/"&gt;Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://web.eecs.umich.edu/~weimerw/students/anish-ms-pres.pdf"&gt;Finding and Fixing Bugs in Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Gabriel439/slides/blob/master/liquidhaskell/slides.md"&gt;Scrap your Bounds Checks with Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikivazou.github.io/static/popl18/reflection.pdf"&gt;Refinement Reflection: Complete Verification with SMT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://popl18.sigplan.org/event/plmw-popl-2018-liquidhaskell-overview"&gt;Liquid Haskell: Refinement Types for Haskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="論文"&gt;論文&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~pmr/papers/rondon-liquid-types.pdf"&gt;Pat Rondon’s Ph.D Dissertation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/liquid/liquid_types_techrep.pdf"&gt;Tech Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/papers/refinement_types_for_haskell.pdf"&gt;Refinement Types For Haskell, ICFP 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/papers/real_world_liquid.pdf"&gt;LiquidHaskell in the Real World, Haskell 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~rjhala/papers/abstract_refinement_types.pdf"&gt;Abstract Refinement Types, ESOP 2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1701.03320.pdf"&gt;An Introduction to Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://goto.ucsd.edu/~nvazou/thesis/main.pdf"&gt;Liquid Haskell: Haskell as a Theorem Prover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikivazou.github.io/static/Haskell17/a-tale.pdf"&gt;A Tale of Two Provers Verifying Monoidal String Matching in Liquid Haskell and Coq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="youtube"&gt;Youtube&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LEsEME7JwEE"&gt;Liquid Types for Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vYh27zz9530"&gt;Ranjit Jhala - Liquid Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vQrutfPAERQ"&gt;LambdaConf 2015 - LiquidHaskell Refinement Types for Haskell Ranjit Jhala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vqvNQixKr6w"&gt;Haskell 2014: LiquidHaskell: Refinement Types for the Real World, Eric L. Seidel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nd3buP97Ryw"&gt;07 Bounded Refinement Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;篩型は &lt;code&gt;{-@ ... @-}&lt;/code&gt; で記述する&lt;/li&gt;
&lt;li&gt;篩型の型エイリアスは &lt;code&gt;{-@ type @-}&lt;/code&gt; で記述する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2018-03-02T10:19:01.008+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20180302/1519966635</id><title type="text">TLS 1.3 開発日記 その26 ID 24</title><updated>2018-03-02T04:57:15Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20180302/1519966635"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;TLS 1.3 ドラフト24で重要な変更は1つだけ。レコードのバージョン。&lt;/p&gt;
&lt;p&gt;ドラフト23では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0301 (TLS 1.0)&lt;/li&gt;
&lt;li&gt; ServerHello のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;に定められた。これはこれでよい。&lt;/p&gt;
&lt;p&gt;しかし、サーバから HelloRetryRequest なる ServerHello が返され場合はどうなるだろう？ ある実装では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0301 (TLS 1.0)&lt;/li&gt;
&lt;li&gt; ServerHello (HRR) のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0301 (TLS 1.0)&lt;/li&gt;
&lt;li&gt; ServerHello のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となるだろう。また別の実装では、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0301 (TLS 1.0)&lt;/li&gt;
&lt;li&gt; ServerHello (HRR) のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;li&gt; ClientHello のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;li&gt; ServerHello のレコードバージョンは 0x0303 (TLS 1.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となるだろう。&lt;/p&gt;
&lt;p&gt;どちらがミドルボックスを騙せるかというと、後者である。前者はレコードのバージョンがころころ変わるから、ミドルボックスが怪しいと思って通信を遮断するかもしれない。&lt;/p&gt;
&lt;p&gt;というわけで、2回目の ClientHello のレコードバージョンは、0x0303 に定められた。なお、実装者間の合意ではドラフト 24 に対応しても、supported_versions 拡張に指定するTLSのバージョンにはドラフト 23 の値を使うことで合意が取れている。&lt;/p&gt;
&lt;p&gt;個人的には、レコードの書式にバージョンフィールドがあるのはプロトコルの設計ミスだと思う。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/03-01-liquidhaskell.html</id><title type="text">Liquid Haskell</title><updated>2018-03-01T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/03-01-liquidhaskell.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Liquid Haskell で少しハマったのでメモとして残しておきます。&lt;/p&gt;
&lt;p&gt;本来なら先に仕様を書いて実装を書くべきだと思いますが、今回の例は既存のコードにリファインメント型をつけるような場合を想定しています。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Liquid Haskell を気になってる人向けの記事です。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="やりたいこと"&gt;やりたいこと&lt;/h2&gt;
&lt;p&gt;データの挿入と更新操作を次のような型で表現します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Update&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="dt"&gt;Eq&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のデータ型を使って、次のような関数を定義します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="ot"&gt;isInsert ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;isInsert &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;isInsert _      &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;adjustBound&lt;/code&gt; 関数は以下のように動作します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;span class="dv"&gt;11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;100&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="dv"&gt;11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;&lt;span class="dv"&gt;11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Update&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" data-line-number="9"&gt;&lt;span class="dv"&gt;5&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" data-line-number="10"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Update&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; &lt;span class="dv"&gt;100&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" data-line-number="11"&gt;&lt;span class="dv"&gt;10&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-12" data-line-number="12"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Update&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-13" data-line-number="13"&gt;&lt;span class="dv"&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;adjustBound&lt;/code&gt; のような関数でバグが無いことを確認するためには何をしたら良いでしょうか？&lt;/p&gt;
&lt;p&gt;型は非常に強力ですが、値について何も教えてくれません。&lt;/p&gt;
&lt;h2 id="バグの少ない世界を目指して"&gt;バグの少ない世界を目指して&lt;/h2&gt;
&lt;p&gt;僕が Haskell を使う理由は、第一に &lt;code&gt;楽しい&lt;/code&gt; からです。そのため、「勉強しても就職する時に役に立たないでしょ？」などと言われても全く気になりません。(そもそも、就職するために勉強するわけじゃないですよね)&lt;/p&gt;
&lt;p&gt;また Haskell を使えば、正しいソフトウェアを普通に作ることができます。また、&lt;code&gt;hspec&lt;/code&gt; などで単体テストを書いたり、&lt;code&gt;QuichCheck&lt;/code&gt; などでランダムテストを書くことで、過去に起こった問題を再発させないようにする努力や、バグを少なくするための取り組みが行われています。&lt;/p&gt;
&lt;p&gt;しかしながら、個人的にはどれもまだ不安です。もしかしたら、チェックしてない部分にバグがあるんじゃないの・・・？&lt;/p&gt;
&lt;p&gt;そんな心配性の方は &lt;code&gt;Liquid Haskell (LH)&lt;/code&gt; を使いましょう！&lt;/p&gt;
&lt;h2 id="型をより厳しく"&gt;型をより厳しく&lt;/h2&gt;
&lt;p&gt;最初に定義した &lt;code&gt;Operation&lt;/code&gt; 型と &lt;code&gt;adjustBound&lt;/code&gt; を再掲します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- LH.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;LH&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Update&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="dt"&gt;Eq&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;&lt;span class="ot"&gt;isInsert ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;isInsert &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;isInsert _      &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とりあえず、現在のコードを &lt;code&gt;LH&lt;/code&gt; にかけてみます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.


**** DONE:  A-Normalization ****************************************************


**** DONE:  Extracted Core using GHC *******************************************


**** DONE:  Transformed Core ***************************************************

Working 100% [=================================================================]

**** DONE:  annotate ***********************************************************


**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RESULT: SAFE&lt;/code&gt; が表示されれば問題ありません！&lt;/p&gt;
&lt;h3 id="入力を自然数に限定させよう"&gt;入力を自然数に限定させよう&lt;/h3&gt;
&lt;p&gt;例えば &lt;code&gt;lower&lt;/code&gt; と &lt;code&gt;upper&lt;/code&gt; が自然数 (0含む) しか許容しないという仕様が与えられた時、どうしますか？&lt;/p&gt;
&lt;p&gt;よくある対応としては、コメントにその旨を書いたり、テストを作ったりという作業になるでしょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Liquid Haskell&lt;/code&gt; では上記の仕様を &lt;code&gt;事前条件&lt;/code&gt; として記述することができます。&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ adjustBound :: _ -&amp;gt; Nat -&amp;gt; Nat -&amp;gt; _ -&amp;gt; _ @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Nat&lt;/code&gt; は &lt;a href="https://github.com/ucsd-progsys/liquidhaskell/blob/develop/include/Prelude.spec"&gt;Prelude&lt;/a&gt; で以下のように定義されています。つまり、0以上の &lt;code&gt;Int&lt;/code&gt; のみを含むリファインメント型です。&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ type Nat = {v: Int | v &amp;gt;= 0 } @-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだけです。&lt;code&gt;LH&lt;/code&gt; で結果を確かめてみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
...

**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SAFE&lt;/code&gt; ですね！&lt;/p&gt;
&lt;p&gt;これでもう &lt;code&gt;adjustBound&lt;/code&gt; の &lt;code&gt;lower&lt;/code&gt; と &lt;code&gt;upper&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; 以上の自然数でしか呼び出されていないことが示されました。&lt;/p&gt;
&lt;h3 id="もう少し具体例"&gt;もう少し具体例&lt;/h3&gt;
&lt;p&gt;では、別のプログラマが &lt;code&gt;adjustBound&lt;/code&gt; を利用した関数を作ったとしましょう。この関数自体に意味はないですが、&lt;code&gt;LH&lt;/code&gt; を理解するためにはとても良い例だと思います。&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="ot"&gt;f ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;f &lt;span class="fu"&gt;=&lt;/span&gt; adjustBound &lt;span class="dt"&gt;Insert&lt;/span&gt; (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;) (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;50&lt;/span&gt;) (&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;70&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数 &lt;code&gt;f&lt;/code&gt; は、型が正しいため当然コンパイルできます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack repl -- LH.hs
&amp;gt; f
-49&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;けれども、僕らの仕様では &lt;code&gt;adjustBound&lt;/code&gt; の &lt;code&gt;lower&lt;/code&gt; と &lt;code&gt;upper&lt;/code&gt; には自然数しか適用してはいけないはずです。&lt;/p&gt;
&lt;p&gt;次に &lt;code&gt;LH&lt;/code&gt; を実行してみましょう。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
**** RESULT: UNSAFE ************************************************************


 LH.hs:18:25-28: Error: Liquid Type Mismatch

 18 | f = adjustBound Insert (-100) (-50) (-70)
                              ^^^^


   Inferred type
    VV : {v : Int | v == (-?a)
                    &amp;amp;&amp;amp; v == ?b}

  not a subtype of Required type
    VV : {VV : Int | VV &amp;gt;= 0}

  In Context
    ?b : {?b : Int | ?b == (-?a)}

    ?a : {?a : Int | ?a == (100 : int)}


 LH.hs:18:32-34: Error: Liquid Type Mismatch

 18 | f = adjustBound Insert (-100) (-50) (-70)
                                     ^^^


   Inferred type
    VV : {v : Int | v == (-?b)
                    &amp;amp;&amp;amp; v == ?a}

  not a subtype of Required type
    VV : {VV : Int | VV &amp;gt;= 0}

  In Context
    ?b : {?b : Int | ?b == (50 : int)}

    ?a : {?a : Int | ?a == (-?b)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;UNSAFE&lt;/code&gt; になりましたね。こういうことです。&lt;/p&gt;
&lt;p&gt;つまり、&lt;strong&gt;自分たちが使っている範囲&lt;/strong&gt;で &lt;code&gt;Liquid Haskell&lt;/code&gt; のリファインメント型について、正しく整合性が取れているのかということを判定しています。&lt;/p&gt;
&lt;h3 id="戻り値の型も厳しくしよう"&gt;戻り値の型も厳しくしよう！&lt;/h3&gt;
&lt;p&gt;先程、事前条件についてリファインメント型を書きました。&lt;/p&gt;
&lt;p&gt;次は事後条件についてリファインメントを書きましょう！&lt;/p&gt;
&lt;p&gt;同様に戻り値の型も自然数という仕様にします。&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ adjustBound :: _ -&amp;gt; Nat -&amp;gt; Nat -&amp;gt; _ -&amp;gt; Nat @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;リファインメント型 (Refinement type) は &lt;code&gt;篩 (ふるい) 型&lt;/code&gt; と訳されている本 (&lt;a href="https://taimen.jp/f/389"&gt;入門LiquidHaskell−篩型による静的コード解析−&lt;/a&gt;) もありますが、それは &lt;code&gt;Haskell&lt;/code&gt; の型の値が条件によって &lt;code&gt;ふるい&lt;/code&gt; 落とされて、新しい型 (リファインメント型) になっているというイメージから来ているのだと思います。(読んだこと無いので間違ってたらすみません・・・。)&lt;/p&gt;
&lt;p&gt;追記: チェシャ猫さんから &lt;code&gt;篩型&lt;/code&gt; について教えてもらいました！&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;
&lt;p lang="ja" dir="ltr"&gt;
&amp;gt; リファインメント型 (Refinement type) は 篩 (ふるい) 型 と訳されている本もありますが&lt;br&gt;&lt;br&gt;頒布したときに最も多かった質問は「これ何て読むんですか？」だった。ちなみに「篩型」はこの本で勝手に作った造語ではなく、論文タイトルなどにも使われています。&lt;a href="https://t.co/Du6mK1hqdD"&gt;https://t.co/Du6mK1hqdD&lt;/a&gt;
&lt;/p&gt;
— チェシャ猫 (&lt;span class="citation" data-cites="y_taka_23"&gt;@y_taka_23&lt;/span&gt;) &lt;a href="https://twitter.com/y_taka_23/status/969499842895495168?ref_src=twsrc%5Etfw"&gt;2018年3月2日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;
&lt;p lang="ja" dir="ltr"&gt;
五十嵐先生と末永先生が発案した訳語のようです。 &lt;a href="https://t.co/rcZuFuptl6"&gt;https://t.co/rcZuFuptl6&lt;/a&gt;
&lt;/p&gt;
— チェシャ猫 (&lt;span class="citation" data-cites="y_taka_23"&gt;@y_taka_23&lt;/span&gt;) &lt;a href="https://twitter.com/y_taka_23/status/969515905737621506?ref_src=twsrc%5Etfw"&gt;2018年3月2日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="もっと仕様を"&gt;もっと仕様を&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;adjustBound&lt;/code&gt; 関数はこれで十分なのでしょうか？人によっては十分だね。と答えるかもしれません。&lt;/p&gt;
&lt;p&gt;しかし、今回は次のような仕様を与えることにします。&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;code&gt;upper&lt;/code&gt; は &lt;code&gt;lower&lt;/code&gt; 以上の自然数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Insert&lt;/code&gt; の操作の場合の戻り値は &lt;code&gt;lower&lt;/code&gt; 〜 &lt;code&gt;upper + 1&lt;/code&gt; の間の自然数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Update&lt;/code&gt; の操作の場合の戻り値は &lt;code&gt;lower&lt;/code&gt; 〜 &lt;code&gt;lower `max` (n `min` upper)&lt;/code&gt; の間の自然数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここからが面白いところです。&lt;/p&gt;
&lt;p&gt;まずは前準備として &lt;code&gt;x 〜 y&lt;/code&gt; までの間の自然数を表すリファインメント型と述語を定義します。&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ type Btwn Lo Hi = {v:Int | Lo &amp;lt;= v &amp;amp;&amp;amp; v &amp;lt;= Hi} @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;span class="co"&gt;{-@ predicate BtwnP Lo Hi = Lo &amp;lt;= v &amp;amp;&amp;amp; v &amp;lt;= Hi @-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では、&lt;code&gt;仕様1&lt;/code&gt;を反映させてみましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ adjustBound :: _ -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u} -&amp;gt; _ -&amp;gt; Nat @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" data-line-number="4"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;では次に、&lt;code&gt;仕様2&lt;/code&gt; と &lt;code&gt;仕様3&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;リファインメント型は以下のようになります。&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;&lt;span class="co"&gt;{-@ adjustBound ::&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;&lt;span class="co"&gt;      op:Operation -&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" data-line-number="3"&gt;&lt;span class="co"&gt;      l:Nat -&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" data-line-number="4"&gt;&lt;span class="co"&gt;      {u:Nat | l &amp;lt;= u} -&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-5" data-line-number="5"&gt;&lt;span class="co"&gt;      _ -&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-6" data-line-number="6"&gt;&lt;span class="co"&gt;      {v:Nat | if (isInsert op) then (BtwnP l (u+1)) else BtwnP l u }&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-7" data-line-number="7"&gt;&lt;span class="co"&gt;@-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-8" data-line-number="8"&gt;&lt;span class="ot"&gt;adjustBound ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-9" data-line-number="9"&gt;adjustBound op lower upper n &lt;span class="fu"&gt;|&lt;/span&gt; isInsert op &lt;span class="fu"&gt;=&lt;/span&gt; upper &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-10" data-line-number="10"&gt;                             &lt;span class="fu"&gt;|&lt;/span&gt; otherwise   &lt;span class="fu"&gt;=&lt;/span&gt; lower &lt;span class="ot"&gt;`max`&lt;/span&gt; (n &lt;span class="ot"&gt;`min`&lt;/span&gt; upper)&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-12" data-line-number="12"&gt;&lt;span class="co"&gt;{-@ measure isInsert @-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-13" data-line-number="13"&gt;&lt;span class="ot"&gt;isInsert ::&lt;/span&gt; &lt;span class="dt"&gt;Operation&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-14" data-line-number="14"&gt;isInsert &lt;span class="dt"&gt;Insert&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-15" data-line-number="15"&gt;isInsert _      &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ liquid LH.hs
**** RESULT: SAFE **************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="はまったポイント"&gt;はまったポイント&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;if (isInsert op) then (BtwnP l (u+1)) else BtwnP l u&lt;/code&gt; の部分でかなりはまりました。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;if&lt;/code&gt; の括弧を外した場合は次のようなエラーになります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if isInsert op then (BtwnP l (u+1)) else BtwnP l u&lt;/code&gt;&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;**** RESULT: ERROR *************************************************************


 LH.hs:10:73: Error: Cannot parse specification:

 10 | {-@ adjustBound :: op:Operation -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; {v:Nat | if isInsert op then (BtwnP l (u+1)) else BtwnP l u } @-}
                                                                              ^

     unexpected &amp;quot;:&amp;quot;
     expecting operator, white space or &amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、同様に &lt;code&gt;then&lt;/code&gt; の括弧を外してもエラーになります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if (isInsert op) then BtwnP l (u+1) else BtwnP l u&lt;/code&gt;&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;**** RESULT: ERROR *************************************************************


 LH.hs:10:73: Error: Cannot parse specification:

 10 | {-@ adjustBound :: op:Operation -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; {v:Nat | if (isInsert op) then BtwnP l (u+1) else BtwnP l u } @-}
                                                                              ^

     unexpected &amp;quot;:&amp;quot;
     expecting operator, white space or &amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;else&lt;/code&gt; については括弧があっても無くても &lt;code&gt;SAFE&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;この挙動が本当にわからなくてつらかったです・・・。&lt;/p&gt;
&lt;p&gt;ちなみに、以下のような場合も同様にはまるので、ご注意ください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- UNSAFE
{-@ adjustBound :: _ -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; Btwn l (u+1) @-}
{-@ adjustBound :: _ -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; Btwn l {u+1} @-}

-- SAFE
{-@ adjustBound :: _ -&amp;gt; l:Nat -&amp;gt; {u:Nat | l &amp;lt;= u}  -&amp;gt; _ -&amp;gt; Btwn {l} {u+1} @-}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt; を使う場合は多めに括弧を付けておいた方が良さそう。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; で囲むと上手くいく場合もある&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LiquidHaskell&lt;/code&gt; はすごい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この良くわからない挙動について一緒に考えてくれた友人の tkg さんありがとうございました。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/02-26-Announcing-the-debug-package.html</id><title type="text">debug パッケージのアナウンス (翻訳)</title><updated>2018-02-26T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/02-26-Announcing-the-debug-package.html"/><summary type="html">&lt;h2 id="debug-パッケージのアナウンス-翻訳"&gt;debug パッケージのアナウンス (翻訳)&lt;/h2&gt;
&lt;p&gt;Original post: &lt;a href="http://neilmitchell.blogspot.jp/2017/12/announcing-debug-package.html"&gt;Announcing the ‘debug’ package&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Haskell は素晴らしい言語ですが、Haskell のデバッグは間違いなく弱い部分です。この問題をどうにかするために、&lt;a href="https://hackage.haskell.org/package/debug"&gt;debug ライブラリ&lt;/a&gt; をリリースしました。このライブラリは全てのことを解決するのではなく、一般的なデバッグのタスクに対してシンプルで簡単に使えるような設計を目指しました。デバッグをするにあたって、みなさんが興味を持ってくれるような関数を例に取って見てみましょう。&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;QuickSort&lt;/span&gt;(quicksort) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.List&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;span class="ot"&gt;quicksort ::&lt;/span&gt; &lt;span class="dt"&gt;Ord&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;quicksort [] &lt;span class="fu"&gt;=&lt;/span&gt; []&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;quicksort (x&lt;span class="fu"&gt;:&lt;/span&gt;xs) &lt;span class="fu"&gt;=&lt;/span&gt; quicksort lt &lt;span class="fu"&gt;++&lt;/span&gt; [x] &lt;span class="fu"&gt;++&lt;/span&gt; quicksort gt&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;    &lt;span class="kw"&gt;where&lt;/span&gt; (lt, gt) &lt;span class="fu"&gt;=&lt;/span&gt; partition (&lt;span class="fu"&gt;&amp;lt;=&lt;/span&gt; x) xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt; と &lt;code&gt;ViewPatterns&lt;/code&gt; を有効にしてから、&lt;code&gt;Debug&lt;/code&gt; をインポートし、コードをインデントして &lt;code&gt;debug&lt;/code&gt; の引数に渡してやりましょう。&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TemplateHaskell, ViewPatterns #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;QuickSort&lt;/span&gt;(quicksort) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.List&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Debug&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;debug [d|&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;   quicksort :: Ord a =&amp;gt; [a] -&amp;gt; [a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;   quicksort [] = []&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;   quicksort (x:xs) = quicksort lt ++ [x] ++ quicksort gt&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;       where (lt, gt) = partition (&amp;lt;= x) xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;   |]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでデバッガを走らせることができます。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ ghci QuickSort.hs
GHCi, version 8.2.1: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling QuickSort        ( QuickSort.hs, interpreted )
Ok, 1 module loaded.
*QuickSort&amp;gt; quicksort &amp;quot;haskell&amp;quot;
&amp;quot;aehklls&amp;quot;
*QuickSort&amp;gt; debugView&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;debugView&lt;/code&gt; を呼ぶと Webブラウザが起動して、記録されたデバッグの結果を見ることができます。こんな感じです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://cdn.rawgit.com/ndmitchell/debug/f6e8dbc9/debug.png" alt="debugView の実行結果" /&gt;&lt;figcaption&gt;debugView の実行結果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ここから、計算の経過をクリックしつつ探すことができます。&lt;/p&gt;
&lt;p&gt;私は &lt;code&gt;debug&lt;/code&gt; を使った感想や、これを改善できるようなアイディアを求めています。そのため、フィードバックや&lt;a href="https://github.com/ndmitchell/debug/issues"&gt;バグトラッカー&lt;/a&gt;経由のお手伝いなどをお待ちしています。&lt;/p&gt;
&lt;p&gt;また別の Haskell のデバッガに興味があるのなら、&lt;a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#the-ghci-debugger"&gt;GHCi デバッガ&lt;/a&gt;や &lt;a href="https://hackage.haskell.org/package/Hoed"&gt;Hood/Hoed&lt;/a&gt; などを試してみるべきでしょう。&lt;/p&gt;</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8'エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options " </summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/02-25-SLURP.html</id><title type="text">SLURP (翻訳)</title><updated>2018-02-25T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/02-25-SLURP.html"/><summary type="html">&lt;h2 id="slurp"&gt;SLURP&lt;/h2&gt;
&lt;p&gt;Great original post: &lt;a href="https://www.snoyman.com/blog/2018/01/slurp"&gt;SLURP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;すでにコミュニティの多くの人々が SLURP の提案を見ていると思います。何人かの人たちに私の意見を聞かれたり、私が議論に参加しないことについて、まぁいろいろな意見をもらいました。この議題を私が避けてきた理由を今ここで書かせてください。作者はその提案をリリース前に教えてくれましたが、その時はサポートしないことを伝えました。私はまた、失礼にならないような形で SLURP へのコメントを控えていることも伝えました。残念ながら、その結果2つのことが起こりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人によっては、とても良くない影響を与えてしまいました。&lt;/li&gt;
&lt;li&gt;“fork” という用語の使い方の誤解、そして残念ながら作者はその間違いを訂正していません。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;つまりまとめると: 提案は私のものではなく、変更を頼んだわけでも、誰かの頭に銃を向けているわけでもありません。この説明は間違っています。他に出すことができるコメントはいくらでもありますが、正直価値はないでしょう。&lt;/p&gt;
&lt;p&gt;間違ってはいないことは、私は日常的に多くの人や Haskell のコミュニティやエコシステムマネジメントチームと直面している問題についてコミュニケーションを取っています。仕事で幅広いユーザーと交流し、不満を聞けばそれを誰かに伝えます。私も不満を持つことがあって、それを誰かに聞いてもらいます。この不満の中には、全てが同じようなものを指しているものもあります。&lt;/p&gt;
&lt;p&gt;私が公開できる情報というのは限られています。なぜなら、私に寄せられるかなり多くのコメントが、公にされることを嫌うようなプライベートなメールで書かれているからです。そして経験上、私のことを嘘つきだと誹謗中傷する人たちがいることも分かっています。この絶え間ない誹謗中傷を理由に発言を避けてきましたが、私はここに残しておくべきだと決断しました。わかったのは次の2つのことです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私のやること成すこと全てが悪だと信じている人は、私が何か根拠を持っていてもそれを見ようとはしません。&lt;/li&gt;
&lt;li&gt;私が悪魔ではないという可能性を否定しない人は、もしかしたら私の声明をその通りに受け取ってくれるかもしれないということです。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前の私は、アーキテクチャとエコシステム開発についてオープンに議論していました。これはオープンソースコミュニティを作る唯一無二の方法だと私は信じています。Stack 対 cabal の時代の緊張が最も高まったときに、多くの人がオープンな議論に異論を唱えたため、私はより静かなコミュニケーションのチャネルに移ることにしました。これはとても残念なことだったと感じています。私はエコシステムの計画についてもっとオープンに、声高に議論をしたいと思っています。他の人たちが簡単に情報にたどり着けるようにしたいと思っています。私は閉じた扉の裏側で全てを議論することを強く反対します。オープンな議論が再開できるかどうかはいずれわかることでしょう。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="fork-ってなに"&gt;“fork” ってなに?&lt;/h2&gt;
&lt;p&gt;SLURP に関する議論の大部分が SLURP そのものとはなんの関係もないことは明らかですが、fork に関するコメントは関係があります。作者がドキュメントの中で fork という言葉を使うつもりだったのなら、まずは fork についてしっかりと説明することが望ましかったのではないでしょうか。これから Stackage と Stack の世界で使われている fork という言葉の意味について、私が知っていることをお話しようと思います。この話が本当に作者たちの意図を反映しているのかどうか、それは作者たちの発言を待って確認するしかありません。&lt;/p&gt;
&lt;p&gt;ここでいう “fork” という用語は、「何かソフトウェアのプロジェクトを取ってきて、ソースコードを他の場所にホストして、別名で開発を続ける」といった文字通りの意味で使われているわけではありません (私の定義ですが)。この用語は、より一般的なものです。例えば、Stack はコードなんて何も共有していないのに、多くの人に cabal-install の fork だと言われています (もちろん、Cabal のようなベースとなるライブラリは共有していますが)。&lt;/p&gt;
&lt;p&gt;誰もが固執していることについて、明確に言及しておきましょう。誰もが考えるような Hackage の直接の競争相手を作ろうとするやりとりには、全く関わっていません。私が知っている人で、こういうことをしたい人はいませんし、私もしたくありません。なぜなら、今日の Stackage と Stack は Hackage あってこそのものだからです。そして私の知人で、この構図を変えたい人は誰一人としていません。Hackage をコントロールしたいなどと考えている人はいないのです。&lt;/p&gt;
&lt;p&gt;Hackage の “fork” というと、論理的にそういう結論に至るかもしれませんが、そうではないのです。&lt;/p&gt;
&lt;p&gt;次に、この “fork” に関する具体的な頭痛のタネについてお話しましょう。&lt;/p&gt;
&lt;h2 id="hackage-のリビジョン"&gt;Hackage のリビジョン&lt;/h2&gt;
&lt;p&gt;多くの人が Hackage のリビジョンについて嫌悪感を示しています。私も Hackage リビジョンは嫌いです。そして、他の誰よりも嫌悪感を抱く理由を持っています。私は数週間から数ヶ月ほどの自分の人生を使って、いくつかのツールにリビジョンをサポートさせたことがあります。この凄惨な歴史を辿ることもできますが、プログラマの戦記になるだけで価値はないでしょう。それよりも今に向き合うことにします。&lt;/p&gt;
&lt;p&gt;私はついに Stack 1.6 で、リビジョンの指定 (pinning) を完全にサポートしました。Stackage は既に長い間リビジョンの指定をサポートし続けています。Stackage にはいくつかのパッケージのリビジョンを無視しているものとしてリストアップする機能があります。&lt;/p&gt;
&lt;p&gt;もし仮に、今聞かれたら私はリビジョンが悪いアイディアで、無効にすべきだと答えるでしょう。そして、依存関係の解決に関する問題について、より良い解決方法があると依然として答えるでしょう (これらについては、過去に長々と議論したことがあります)。同時に、そのコストは下がっています。ユーザーが extra-deps に特定のリビジョンを付けていないこと、そして Hackage におけるリビジョンのルールが緩すぎることについては実際、いまだに心配です。これについて懸念を抱いていることは確かですが、私の中の最優先事項ではありません。&lt;/p&gt;
&lt;p&gt;ところが他の人は違う考えを持っているようです。私は Hackage Truestee が強制的に cabalファイルを編集することについて腹を立てている多くの人を知っています。彼らに反対することはありませんが、この話題に情熱を持っているわけでもありません。コミュニティのリーダーとの会話の中で、私はこの区別を明確に強調しました (少なくともそうしようとはしました)。&lt;/p&gt;
&lt;p&gt;リビジョンに関する最大の懸念は、それの持つ社会的な影響です。すなわち、誰か別のものが自分のビルドの安定性を担うということです。これまでに何度も言及してきましたが、社会的緊張の原因の最たるものに、ビルドがいきなり止まったので上流の開発者に文句を言う、というものがあります。これは大惨事への第一歩で、PVP (Package Versioning Policy) + 依存解決という手法が持つ原理的な欠陥でした。そのため、固定ビルドプランに焦点を当てたツールが必要となるのです。私はこれを何年も主張してきましたが、結局は上流を説得することができなかったので Stack を大々的に作りました。&lt;/p&gt;
&lt;p&gt;以上のことから、リビジョンとはフォークのような何かなのでしょうか? 違います。&lt;/p&gt;
&lt;h2 id="キュレーション"&gt;キュレーション&lt;/h2&gt;
&lt;p&gt;数週間前、私はこんなツイートをしました。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;
&lt;p lang="en" dir="ltr"&gt;
I did that initially. When collaborating on GPS Haskell, I removed that functionality as a requirement of the Hackage, Cabal, and Haskell Platform teams. Then GPS died and we're stuck unable to work around upstream breakage like this.
&lt;/p&gt;
— Michael Snoyman (&lt;span class="citation" data-cites="snoyberg"&gt;@snoyberg&lt;/span&gt;) &lt;a href="https://twitter.com/snoyberg/status/949385673982730240?ref_src=twsrc%5Etfw"&gt;January 5, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;Stackage のオリジナルデザインは、標準的な Linux ディストリビューションモデルに準拠していました。Hackage は私たちの上流でしたが、バージョンの境界が大きく壊れるのを防ぐために一連のパッチを整備し、あまりありませんでしたが時折 (たとえそうでも、正直覚えていませんが)、バグを修正するためにソースを編集したりしました。&lt;/p&gt;
&lt;p&gt;2014年に Stackage を cabal と Haskell のプラットフォームに組み込む計画 (GPS Haskell のコードネームで開発していました。それが地面から飛び立つことは一度もありませんでしたが) について議論をしたとき、cabal, Hackage, そして Haskell Platform のメンテナに、ローカルの変更を Stackage が整備しないことを要求されました。なので私はその機能を削除したのですが、それは私たちが今までいた世界の話です。&lt;/p&gt;
&lt;p&gt;この機能を復活させるかどうかは再検討中です。その理由を簡潔に説明しますと、これはフォークと捉えることができます。ソフトフォークと呼ぶ人もいるかもしれません。正直なところ、一連のパッチを整備するのは重労働なので Stackage に追加し直したい機能ではありません。しかし、多くのコミュニティがこの作業を必要としています。私がこのことを理解しているように、Nix も理解しています。もしもこれをフォークと言うのなら、私たちのエコシステムに広く浸透しているフォークなんでしょう。&lt;/p&gt;
&lt;p&gt;このキュレーションで扱う理由としては、新しい依存バージョンへの更新が遅いパッケージを避けるため、というものがあります。Stackage のパッケージメンテナにとって、誰か他の人がその上限に満足しないからといって、自分のパッケージのバージョンを下げるのはかなりイライラするものがあるでしょう。キュレーションはこの辺の問題を何とかできるかもしれません。私はこれをおまけの特典のように考えていますが、必要なものではないです。&lt;/p&gt;
&lt;p&gt;しかし、キュレーションには cabal-install 界隈では問題になっていないものの、Stackage や Stack 界隈で問題を引き起こしているパッケージをどうにかする、というもっと重要な理由があります。ここ数ヶ月の間に何回も問題が起こるまで、私は本当の問題だとは認識していませんでした。&lt;a href="https://github.com/haskell-hvr/cassava/pull/155"&gt;例えばこんな例があります&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;私はこの記事で、作者の誰かに何かを要求するつもりはありません。でも私は結局、これらの類の問題に多くの自分の時間を費やして対処してきています。これが現実です。私の友達や同僚は、緊急のリリースポイントを切ったり、様々な持ち越し作業に巻き込まれています。Cabal のライブラリの仕様に明記されているべきだが文書化されていないような何かのために、多くの時間を割いて Stack を変更しなければならないような現状に私の人生を浪費したくはありません。&lt;/p&gt;
&lt;p&gt;Hackage は cabal-install を壊さないために、既に大きな苦労をしています。多くの人が、 &lt;code&gt;^&amp;gt;=&lt;/code&gt; 演算子の導入がどのように Stack 1.5 を破壊したか聞いたことがあるのではないでしょうか。しかし、実はこの演算子の導入は cabal-install 1.24 も壊していたのです。この事実を知っている人がいないのは、&lt;a href="https://github.com/haskell/cabal/issues/4624"&gt;Hackage がこれらのファイルを古いバージョンの cabal-install から隠すような措置を導入した&lt;/a&gt;からです。このキュレーションのアイディアは Stack の破壊に対応する術を Stackage に対して提供するものです。Hackage も同じ方法で cabal-install へのダメージに対処するでしょう。&lt;/p&gt;
&lt;p&gt;そして、私は同じ類の処置を、Hackage から Stack へしてもらえないかとお願いしました。このお願いは、優先的な処置を求める声に後押しされています。この記事の読者は、各々の判断で自分がどう感じるか考えてください。&lt;/p&gt;
&lt;p&gt;まとめると: 私は Stackage に上流のパッケージのパッチを当てられるようにしようとしています。他の人はフォークという言葉を使うかもしれませんが、私はこれをフォークではなくキュレーションだと考えています。&lt;/p&gt;
&lt;h2 id="hackage-へのアップロードを避ける"&gt;Hackage へのアップロードを避ける&lt;/h2&gt;
&lt;p&gt;まず、これは私の好みですが、私のパッケージは Hackage に上げ続けたいと考えています。conduit や yesod, その他鋭意 Hackage でメンテ中の 80 を超えるパッケージの更新をやめるつもりも、そうしたいという願望もありません。そうは言っても、全員が全員同じように感じているわけではありません。&lt;/p&gt;
&lt;p&gt;現在 Stackage は Hackage の下流になっています。最初にパッケージが Hackage にアップロードされない限り、そのパッケージを Stackage に入れることはできません。しかし、この状況は終わりを告げようとしています。およそ、現状を変えようとしているグループは以下の 3 パターンに分けられるでしょう。&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;少なくとも一部の PVP 支持者は、PVP に従わないパッケージ作成者に対して、そのパッケージを Hackage にアップロードしないように要請 (要求) しています。これは私が幾度となく指摘してきたように、Hackage 公式のガイドラインと完全に矛盾しているにも関わらず、彼らはしつこく同じ趣旨の発言を続けています。&lt;/li&gt;
&lt;li&gt;PVP に反対する人の中には、基本的に (1) の理由で、Hackage にアップロードしたくない、という人もいます。PVP の遵守という観点で、たくさんの張りつめた議論がありました。これを避けるための最も簡単な方法は Hackage にアップロードしない、というものでした。私はこういった事情があって Hackage や Stackage にコードをリリースしない人たちを知っています。しぶしぶこうしている人もいますが、その全員が同じ理由で Hackage を避けたがっています。&lt;/li&gt;
&lt;li&gt;技術的に見て、中央リポジトリに手作業で tarball をアップロードするようなモデルは、時代遅れになってきていると感じる人もいます。そういった人たちは、タグやリリースブランチを使って自動化された、Git ベースのリリースに基づいたワークフローを考えています。これによる社会的な影響は何もなく、どちらかと言うと Hackage が現在サポートしていない、技術的に違うものを探してみたいという願望です。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol type="1"&gt;
&lt;li&gt;番目の状況は、私の大きな頭痛の種でした。私は Hackage Trustee のガイドラインと Hackage のルールを変更して、彼らの言動 (Hackage にアップロードしないように私的なメールで要求したり、個人や企業に対して PVP に従っていないことを公に批判したり) について明確に禁止するように要望を出していました。実際、私が思うに、この要望は究極的には SLURP に結びつくものです。私は変更しなければフォークするぞと脅したりしたでしょうか? あー、そう思いたいならそれでもいいでしょう。私は Hackage を使うのをやめようと言い続けてきました。完全にです。私はこのような Hackage の使い方が許可されるように、公式のポリシーに対して変更を求めました。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現状を見たらわかりますが、Hackage のポリシーにそんな変更はされませんでした。私は (2) と (3) のグループに対して何を思うのか、言及していませんでしたね。しかし (3) の主張からもわかるように、Hackage とは別の代替パッケージリポジトリをホストしたりするのは全くもって意味がありません。なので、私はまたここで保証します。最も文字通りの Hackage の fork は、私も私が話しかけているあなたも誰も望んでいないものになるでしょう。&lt;/p&gt;
&lt;p&gt;また他の選択肢は Stackage に Hackage に加え、Git リポジトリから直接パッケージをプルできるようにする、というものです。これは先に挙げた 問題 (1) に対するワークアラウンドとして議論されています。あることを主張して、一度離れてもう一度それを主張するようになる… なんてことはありません。私はむしろ、Hackage が全員からパッケージのアップロードを受け付けることを明確にすることを望んでいますし、それと比べれば Stackage を別のソースに対して解放するような要求は少なくなります (3 番目のグループは純粋に技術的な観点から実験したいと思っているようですが)。&lt;/p&gt;
&lt;p&gt;私は銃で誰かの頭を狙っているでしょうか? それはあなたが決めることです。これが私が知る限りの本当の物語です。&lt;/p&gt;
&lt;p&gt;まとめると、これは潜在的な fork に最も近いもので、Git リポジトリが Hackage の代替のソースとして許可されたらこうなります。&lt;/p&gt;
&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;私は上記の問題を解決するための努力をするにあたって、複数の人と長く非公開な議論をしてきました。先ほども話したように、私はいつも公の場で行われる議論が好きです。SLURP の提案がどうなったかを鑑み、私はやはり公の議論はより良いという立場を取ろうと思います。“fork” という言葉を使って、とても多くの人を怖がらせてしまったことは申し訳なく思っています。本当に怖がっていた人に対して、私は鬼のようなことをしてしまっていたようです。説明に 2 日間待たせてしまい、申し訳ありませんでした。&lt;/p&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2018/02-23-stack-build-failure.html</id><title type="text">stack でどうしてもビルドできないとき</title><updated>2018-02-23T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2018/02-23-stack-build-failure.html"/><summary type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;僕は &lt;code&gt;stack&lt;/code&gt;, &lt;code&gt;hlint&lt;/code&gt;, &lt;code&gt;liquidhaskell&lt;/code&gt; などのパッケージを毎日なんとなくビルドしてインストールしているのですが、ある時 &lt;code&gt;stack&lt;/code&gt; のビルドで &lt;code&gt;GHC panic&lt;/code&gt; が発生し、ビルドができなくなってしまいました。&lt;/p&gt;
&lt;p&gt;数日放置していたのですが、直らず・・・。そればかりか別のPCでは問題なくビルドができているため &lt;code&gt;stack&lt;/code&gt; の問題だな！と意気揚々と &lt;a href="https://github.com/commercialhaskell/stack/issues/3876"&gt;issue&lt;/a&gt; を作ったのですが、結局は自分の環境の問題でした・・・。&lt;/p&gt;
&lt;p&gt;僕は英語が得意ではありませんが、こういった時に批判だけするのは良くないと思っているので、頑張って &lt;code&gt;issue&lt;/code&gt; や &lt;code&gt;PR&lt;/code&gt; を投げるようにしています。Google 翻訳とかもありますし、誰か助けてくれますよ、きっと。 (放置されたり却下されることもありますが、気にせずコツコツ続けると楽しいです)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="stack-のビルドがどうしてもできない時"&gt;Stack のビルドがどうしてもできない時&lt;/h2&gt;
&lt;p&gt;ちゃんと &lt;code&gt;stack clean --full&lt;/code&gt; を行った上でビルドコマンドを叩いたら、以下のような &lt;code&gt;ghc panic&lt;/code&gt; エラーになりました。&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack build
...

ghc: panic! (the &amp;#39;impossible&amp;#39; happened)
      (GHC version 8.2.2 for x86_64-apple-darwin):
    	Loading temp shared object failed: dlopen(/var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib, 5): Symbol not found: _hackagezmsecurityzm0zi5zi2zi2zm9BfzzLHvNB6mEIMD9YTAK2zz_HackageziSecurityziUtilziChecked_zdwthrowChecked_closure
      Referenced from: /var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib
      Expected in: flat namespace
     in /var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib

    Please report this as a GHC bug:  http://www.haskell.org/ghc/reportabug&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ghc panic&lt;/code&gt; は、言語拡張とか最新の機能とかを触っていれば良く見るエラーですが、なぜこれが起きたのか全くわかりません・・・。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;issue&lt;/code&gt; のアドバイス通り &lt;code&gt;stack exec -- ghc-pkg unregister hackage-security&lt;/code&gt; も試してみたのですがダメでした。&lt;/p&gt;
&lt;p&gt;なので最終手段の &lt;code&gt;~/.stack&lt;/code&gt; を削除することになったんですが、今までどのフォルダを削除したら良いのかイマイチわかっていませんでした。&lt;/p&gt;
&lt;p&gt;しかし &lt;code&gt;stack&lt;/code&gt; の中の人は違います！ &lt;code&gt;precompiled&lt;/code&gt;, &lt;code&gt;snapshots&lt;/code&gt; を削除しなよ！と優しく教えてくれたので、指示通りこんな感じで削除したところ、無事にビルドが通るようになりました！&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ stack path --stack-root
~/.stack

$ rm -rf $(stack path --stack-root)/precompiled
$ rm -rf $(stack path --stack-root)/snapshots&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もう知ってるよ・・・。という話かもしれませんが、どうしてもビルドできない人は試してみてはいかがでしょうか。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html</id><title type="text">拡張可能タングルでDo記法レスプログラミング♪ (Haskell)</title><updated>2018-02-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;拡張可能タングルでDo記法レスプログラミング♪ (Haskell)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-02-22" itemprop="datePublished"&gt;
        Feb 22, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/extensible-package.html"&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;「&lt;a href="https://hackage.haskell.org/package/extensible"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; パッケージの楽しみ その３」です．&lt;/p&gt;
&lt;p&gt;拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; について，割とドキュメントには無い(？)ネタを書いておくシリーズ第三弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．&lt;/p&gt;
&lt;p&gt;また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="/posts/2017-11-28-fun-of-extensible-1.html"&gt;前々回&lt;/a&gt;は拡張可能レコードの拡縮の話を，&lt;a href="/posts/2018-01-31-fun-of-extensible-2.html"&gt;前回&lt;/a&gt;は拡張可能直和型(バリアント)を引数に取る関数の話を書きました．&lt;/p&gt;
&lt;p&gt;今回は &lt;strong&gt;拡張可能タングル&lt;/strong&gt; で遊んでみます． 今回の Haskell コードは基本的に&lt;a href="https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96"&gt;コレ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="拡張可能タングル"&gt;拡張可能タングル&lt;/h2&gt;
&lt;p&gt;作者さんの拡張可能タングルについての記事があり，非常に分かりやすいです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"&gt;波打たせるものの正体(エクステンシブル・タングル) - モナドとわたしとコモナド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拡張可能タングルを用いれば，文脈付き(&lt;code&gt;IO&lt;/code&gt; などの &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス)で拡張可能レコードを生成し，更にフィールド間で依存関係を持つ際に，型クラスを用いて各フィールドごとに振る舞いを記述できるようになる． まぁこのヒトコトでは伝わらないですよね．&lt;/p&gt;
&lt;p&gt;百聞は一見に如かず．例えば&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Rec&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;    &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;     , &lt;span class="st"&gt;&amp;quot;hoge2&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;     , &lt;span class="st"&gt;&amp;quot;hoge3&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;&lt;span class="ot"&gt;makeRec ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Rec&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;makeRec &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;  hoge1 &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;  hoge3 &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; randomRIO (&lt;span class="dv"&gt;0&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="fu"&gt;*&lt;/span&gt; length hoge1)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;  pure&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;     &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge1 &lt;span class="fu"&gt;@=&lt;/span&gt; hoge1&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;    &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge2 &lt;span class="fu"&gt;@=&lt;/span&gt; (length hoge1 &lt;span class="fu"&gt;&amp;lt;=&lt;/span&gt; hoge3)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;    &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;hoge3 &lt;span class="fu"&gt;@=&lt;/span&gt; hoge3&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;    &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というような関数があったとする． これを拡張可能タングルを使って書き直すと次のようになります．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="ot"&gt;makeRec ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Rec&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;makeRec &lt;span class="fu"&gt;=&lt;/span&gt; runTangles tangles (wrench emptyRecord)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;&lt;span class="ot"&gt;tangles ::&lt;/span&gt; &lt;span class="dt"&gt;Comp&lt;/span&gt; (&lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt;) &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="fu"&gt;:*&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;tangles &lt;span class="fu"&gt;=&lt;/span&gt; htabulateFor (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt;) &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;  \m &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Comp&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt; pure &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; make m&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt; kv &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;&lt;span class="ot"&gt;  make ::&lt;/span&gt; proxy kv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;Fields&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" data-line-number="13"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;hoge1&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" data-line-number="14"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; lift getLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" data-line-number="16"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;hoge2&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" data-line-number="17"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; (&lt;span class="fu"&gt;&amp;lt;=&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (length &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;hoge1) &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;hoge3&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-18" data-line-number="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-19" data-line-number="19"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeRec&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;hoge3&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-20" data-line-number="20"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-21" data-line-number="21"&gt;    ml &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; length &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;hoge1&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-22" data-line-number="22"&gt;    lift &lt;span class="fu"&gt;$&lt;/span&gt; randomRIO (&lt;span class="dv"&gt;0&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="fu"&gt;*&lt;/span&gt; ml)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コード量そのものは倍近くなっている． しかし，フィールドの構築方法ごとにインスタンスメソッドとして切り分けることが出来ている． しかも，&lt;strong&gt;摩訶不思議な &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Tangle.html#v:lasso"&gt;&lt;code&gt;lasso&lt;/code&gt;&lt;/a&gt; 関数により依存関係も勝手に解決してくれる&lt;/strong&gt; ． もちろん，フィールドのインスタンスが足りないときは，足りないというコンパイルエラーになるよ．&lt;/p&gt;
&lt;h2 id="do記法レスプログラミング"&gt;Do記法レスプログラミング&lt;/h2&gt;
&lt;p&gt;Haskell はなんらかの作用付きの振る舞いは次のように &lt;code&gt;Monad&lt;/code&gt; と &lt;code&gt;do&lt;/code&gt; 記法を用いて書くのが一般的だ． しかし，便利な Do 記法に甘えて無駄に長い，数十行もある Do 式を書いたことは無いだろうか？ たしかに(関数合成だけで記述するより)読みやすいが，なんかこう…ちがうじゃないですか！？&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;そこで，先述した拡張可能タングルを用いて長いDo式をフィールドごとに切り分けてみよう． 例題として次のようなログ(っぽいなにか)を読み込む関数を考える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Log&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="dt"&gt;LogFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;LogFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;    &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;path&amp;quot;    &amp;gt;: FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;     , &lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Time&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;     , &lt;span class="st"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;     , &lt;span class="st"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Time&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;LogCsv&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="dt"&gt;CsvFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;CsvFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;    &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;time&amp;quot;    &amp;gt;: Time&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;     , &lt;span class="st"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" data-line-number="16"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" data-line-number="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" data-line-number="18"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" data-line-number="19"&gt;    &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;code&amp;quot;    &amp;gt;: Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-20" data-line-number="20"&gt;     , &lt;span class="st"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-21" data-line-number="21"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-22" data-line-number="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-23" data-line-number="23"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Eff&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-24" data-line-number="24"&gt;    &lt;span class="ch"&gt;&amp;#39;[ EitherDef String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-25" data-line-number="25"&gt;     , &lt;span class="st"&gt;&amp;quot;IO&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-26" data-line-number="26"&gt;     ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-27" data-line-number="27"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-28" data-line-number="28"&gt;&lt;span class="ot"&gt;runEIO ::&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; (&lt;span class="dt"&gt;Either&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; a)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-29" data-line-number="29"&gt;runEIO &lt;span class="fu"&gt;=&lt;/span&gt; retractEff &lt;span class="fu"&gt;.&lt;/span&gt; runEitherDef&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-30" data-line-number="30"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-31" data-line-number="31"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-32" data-line-number="32"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-33" data-line-number="33"&gt;  result &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; runEIO &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-34" data-line-number="34"&gt;    (path&lt;span class="fu"&gt;:&lt;/span&gt;_) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; liftIO getArgs&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-35" data-line-number="35"&gt;    file &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt;  liftIO (LB.readFile path)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-36" data-line-number="36"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-37" data-line-number="37"&gt;      csv &lt;span class="fu"&gt;=&lt;/span&gt; mconcat [header, &lt;span class="st"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;, file]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-38" data-line-number="38"&gt;    (_, logs) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; either throwError pure (decodeByName csv)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; (&lt;span class="dt"&gt;Header&lt;/span&gt;, &lt;span class="dt"&gt;LogCsv&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-39" data-line-number="39"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-40" data-line-number="40"&gt;      log&amp;#39; &lt;span class="fu"&gt;=&lt;/span&gt; V.head logs&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-41" data-line-number="41"&gt;    info &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; either throwError pure (eitherDecode &lt;span class="fu"&gt;$&lt;/span&gt; log&amp;#39; &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;info)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-42" data-line-number="42"&gt;    pure &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-43" data-line-number="43"&gt;      &lt;span class="fu"&gt;#&lt;/span&gt;path &lt;span class="fu"&gt;@=&lt;/span&gt; path &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;time &lt;span class="fu"&gt;@=&lt;/span&gt; (log&amp;#39; &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;time) &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; info&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-44" data-line-number="44"&gt;  either error print result&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-45" data-line-number="45"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-46" data-line-number="46"&gt;&lt;span class="ot"&gt;header ::&lt;/span&gt; &lt;span class="dt"&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-47" data-line-number="47"&gt;header &lt;span class="fu"&gt;=&lt;/span&gt; LB.intercalate &lt;span class="st"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt; fmap fromString &lt;span class="fu"&gt;$&lt;/span&gt; henumerateFor&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-48" data-line-number="48"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;Show&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-49" data-line-number="49"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;CsvFields&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-50" data-line-number="50"&gt;  ((&lt;span class="fu"&gt;:&lt;/span&gt;) &lt;span class="fu"&gt;.&lt;/span&gt; symbolVal &lt;span class="fu"&gt;.&lt;/span&gt; proxyAssocKey)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-51" data-line-number="51"&gt;  []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このメイン関数は次のような CSV をログデータとして読み込んで，2行目の JSON もパースしたうえで，ひとつの拡張可能レコードとして吐き出す．&lt;/p&gt;
&lt;pre class="csv"&gt;&lt;code&gt;2018-02-23T03:10:00,&amp;quot;{&amp;quot;&amp;quot;code&amp;quot;&amp;quot;:123,&amp;quot;&amp;quot;message&amp;quot;&amp;quot;:&amp;quot;&amp;quot;hello&amp;quot;&amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正直，この例だと大した長さではないので切り分けるメリットはなーーんにもないんですけど．&lt;/p&gt;
&lt;h3 id="stack-script-とカスタムスナップショット"&gt;&lt;code&gt;stack script&lt;/code&gt; とカスタムスナップショット&lt;/h3&gt;
&lt;p&gt;その前に，このメイン関数をどうやって実行するか． この程度のモノをいちいち stack プロジェクトにしていてはスペースの無駄なので，&lt;code&gt;stack script&lt;/code&gt; を使う．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack script&lt;/code&gt; コマンド知っていますか？ &lt;code&gt;stack runghc&lt;/code&gt; と基本的には一緒なのだが，違いは2点(たぶん)．&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;resolver の指定が必須 (たしか &lt;code&gt;runghc&lt;/code&gt; は指定しなければプロジェクトのを使うはず)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;パッケージを引数で指定する必要が無い&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(2)がすごいよね． &lt;code&gt;runghc&lt;/code&gt; の場合，使ってるパッケージを &lt;code&gt;--package hoge&lt;/code&gt; と一つずつ指定しなければならない(今回は&lt;a href="https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96#file-fun-of-tangle-hs-L13"&gt;使ってるパッケージが多い&lt;/a&gt;ので尚更大変)が，&lt;code&gt;script&lt;/code&gt; なら指定した resolver から自動で解決してくれる．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;ただ問題がひとつ． 今回は &lt;a href="https://hackage.haskell.org/package/aeson"&gt;&lt;code&gt;aeson&lt;/code&gt;&lt;/a&gt; や &lt;a href="https://hackage.haskell.org/package/cassava"&gt;&lt;code&gt;cassava&lt;/code&gt;&lt;/a&gt; の型クラスのインスタンスを拡張可能レコードで使いたいので，Stackage に登録していない &lt;a href="https://github.com/matsubara0507/extensible-instances"&gt;&lt;code&gt;matsubara0507/extensible-instances&lt;/code&gt;&lt;/a&gt; にも依存したい． そこで，カスタムスナップショットだ． 日本語で詳しくは下記のサイトにまとまっていた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.e-bigmoon.com/posts/2017-12-23-stack161.html"&gt;カスタムスナップショットの紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここには書いてないが，カスタムスナップショットは &lt;code&gt;stack script&lt;/code&gt; にも使える． 例えば今回は次のようなカスタムスナップショットを作った．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="fu"&gt;resolver:&lt;/span&gt;&lt;span class="at"&gt; lts-10.6&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="fu"&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;git:&lt;/span&gt;&lt;span class="at"&gt; https://github.com/matsubara0507/extensible-instances.git&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;commit:&lt;/span&gt;&lt;span class="at"&gt; 8dabe7a3dd9cf162e2d81e4ca16dbe73b98a3809&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;snapshot.yaml&lt;/code&gt; とし，例題のコードを &lt;code&gt;fun-of-tangle.hs&lt;/code&gt; とすると次のように実行できる&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;$ &lt;span class="fu"&gt;cat&lt;/span&gt; sampleLog.csv&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="ex"&gt;2018-02-23T03&lt;/span&gt;:10:00,&lt;span class="st"&gt;&amp;quot;{&amp;quot;&amp;quot;code&amp;quot;&amp;quot;:123,&amp;quot;&amp;quot;message&amp;quot;&amp;quot;:&amp;quot;&amp;quot;hello&amp;quot;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;$ &lt;span class="ex"&gt;stack&lt;/span&gt; script --resolver ./snapshot.yaml -- fun-of-tangle.hs sampleLog.csv&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;&lt;span class="ex"&gt;Using&lt;/span&gt; resolver: custom: ./snapshot.yaml specified on command line&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;&lt;span class="ex"&gt;path&lt;/span&gt; @= &lt;span class="st"&gt;&amp;quot;sampleLog.csv&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;: time @= &lt;span class="st"&gt;&amp;quot;2018-02-23T03:10:00&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;: code @= 123 &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;: message @= &lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;: nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ヘッダの生成"&gt;ヘッダの生成&lt;/h3&gt;
&lt;p&gt;CSV の読み込みには &lt;code&gt;cassava&lt;/code&gt; というパッケージを使っている． このパッケージには &lt;code&gt;FromRecord&lt;/code&gt; と &lt;code&gt;FromNamedRecord&lt;/code&gt; 型クラスがある． 前者は前から順に勝手に取っていくのに対し，後者はフィールド名と CSV の列名を対応させて取ってきてくれる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cassava&lt;/code&gt; 系の拡張可能レコードのインスタンスを書いてるときは &lt;code&gt;extensible&lt;/code&gt; 力がまだ低く，フィールドからインデックスをとっていくる方法が分からなかった． そのため &lt;code&gt;FromRecord&lt;/code&gt; 型クラスのインスタンスが &lt;code&gt;extensible-instances&lt;/code&gt; にはない(何故かついこの前，&lt;a href="https://github.com/fumieval/extensible/commit/074210e76ed5bd35f62d452f66c940a40d821534"&gt;本家へコミット&lt;/a&gt;されたけど)．&lt;/p&gt;
&lt;p&gt;なので，型から列名のヘッダーを生成してしまおう，というのが &lt;code&gt;header&lt;/code&gt; 関数．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="ot"&gt;header ::&lt;/span&gt; &lt;span class="dt"&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;header &lt;span class="fu"&gt;=&lt;/span&gt; LB.intercalate &lt;span class="st"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt; fmap fromString &lt;span class="fu"&gt;$&lt;/span&gt; henumerateFor&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;Show&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;CsvFields&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;  ((&lt;span class="fu"&gt;:&lt;/span&gt;) &lt;span class="fu"&gt;.&lt;/span&gt; symbolVal &lt;span class="fu"&gt;.&lt;/span&gt; proxyAssocKey)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;  []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Proxy (KeyValue KnownSymbol Show)&lt;/code&gt; ってのが悲しいですよね…(&lt;code&gt;Show&lt;/code&gt; は全く無意味)． キー側だけ型クラスを指定する方法は無いような気がしたんだよなぁ．&lt;/p&gt;
&lt;h2 id="分割しましょう"&gt;分割しましょう&lt;/h2&gt;
&lt;p&gt;では本題．&lt;/p&gt;
&lt;p&gt;まずは型クラスを考えよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; kv &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  make ::&lt;/span&gt; proxy kv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;LogFields&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; (&lt;span class="dt"&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに，&lt;code&gt;&amp;quot;path&amp;quot; &amp;gt;: FilePath&lt;/code&gt; のインスタンスを書いてみる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;path&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; FilePath) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; lift &lt;span class="fu"&gt;$&lt;/span&gt; liftIO getArgs &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;    (path &lt;span class="fu"&gt;:&lt;/span&gt; _) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; pure path&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;    _          &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; throwError &lt;span class="st"&gt;&amp;quot;please path.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他のはできるだろうか？ 元のメイン関数を見ればわかると思うが，たぶん無理だと思う． 他のフィールドは &lt;code&gt;log'&lt;/code&gt; 変数に保存した中間状態を共有するからだ．&lt;/p&gt;
&lt;h3 id="中間状態をどうするか"&gt;中間状態をどうするか&lt;/h3&gt;
&lt;p&gt;他にもっといい手はあるかもしれないが，今回は &lt;strong&gt;レコードを中間状態も加えて拡張する&lt;/strong&gt; ことにする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;MidFields&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[&amp;quot;log&amp;quot; &amp;gt;: LogCsv &amp;#39;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;info&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;] &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="dt"&gt;LogFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; kv &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="ot"&gt;  make ::&lt;/span&gt; proxy kv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;MidFields&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; (&lt;span class="dt"&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Product.html#t:-43--43-"&gt;&lt;code&gt;(++)&lt;/code&gt;&lt;/a&gt; は型レベルリストの連結演算子だ． &lt;code&gt;'[&amp;quot;log&amp;quot; &amp;gt;: LogCsv ': &amp;quot;info&amp;quot; &amp;gt;: Info]&lt;/code&gt; が追加する中間状態にあたる． これを最後にどうやって外すかと言うと，実は簡単で &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:shrink"&gt;&lt;code&gt;shrink&lt;/code&gt;&lt;/a&gt; 関数で縮小してやればよい．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="ot"&gt;makeLog ::&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt; &lt;span class="dt"&gt;Log&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;makeLog &lt;span class="fu"&gt;=&lt;/span&gt; shrink &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; runTangles tangles (wrench emptyRecord)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;&lt;span class="ot"&gt;tangles ::&lt;/span&gt; &lt;span class="dt"&gt;Comp&lt;/span&gt; (&lt;span class="dt"&gt;TangleT&lt;/span&gt; &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="dt"&gt;MidFields&lt;/span&gt; &lt;span class="dt"&gt;EIO&lt;/span&gt;) &lt;span class="dt"&gt;FieldI&lt;/span&gt; &lt;span class="fu"&gt;:*&lt;/span&gt; &lt;span class="dt"&gt;MidFields&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;tangles &lt;span class="fu"&gt;=&lt;/span&gt; htabulateFor (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt;) &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;  \m &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Comp&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt; pure &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; make m&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;中間状態のインスタンス定義してしまう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;log&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;LogCsv&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;    file &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class="fu"&gt;.&lt;/span&gt; liftIO &lt;span class="fu"&gt;.&lt;/span&gt; LB.readFile &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;path&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;    (_, log&amp;#39;) &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;      either throwError pure (decodeByName &lt;span class="fu"&gt;$&lt;/span&gt; mconcat [header, &lt;span class="st"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;, file])&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;    pure &lt;span class="fu"&gt;$&lt;/span&gt; V.head log&amp;#39;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;info&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" data-line-number="9"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" data-line-number="10"&gt;    log&amp;#39; &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;log&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" data-line-number="11"&gt;    lift &lt;span class="fu"&gt;$&lt;/span&gt; either throwError pure (eitherDecode &lt;span class="fu"&gt;$&lt;/span&gt; log&amp;#39; &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;info)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;うん…まぁ…読みやすさのためにね，多少は &lt;code&gt;do&lt;/code&gt; を残しましたよ(タイトル詐欺)．&lt;/p&gt;
&lt;h3 id="残りは簡単"&gt;残りは簡単&lt;/h3&gt;
&lt;p&gt;あとは，フィールドを取り出すだけなので簡単．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Time&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; view &lt;span class="fu"&gt;#&lt;/span&gt;time &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;log&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; view &lt;span class="fu"&gt;#&lt;/span&gt;code &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;info&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;MakeLog&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-8" data-line-number="8"&gt;  make _ &lt;span class="fu"&gt;=&lt;/span&gt; view &lt;span class="fu"&gt;#&lt;/span&gt;message &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class="fu"&gt;#&lt;/span&gt;info&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;メイン関数はこんな感じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; either error print &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; runEIO makeLog&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;わぁすっきり(メイン関数は)．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;これぐらいの規模だとメリットが皆無なんですが，もっと CSV の列数が多くなったらどうでしょう？ うーーーん，あんまり変わらないかも(笑) まぁ，少なくとも面白い(不思議な)プログラミングが出来るのは確かです．&lt;/p&gt;
&lt;p&gt;僕は試しにこの方法で，&lt;a href="https://github.com/matsubara0507/source-gh-pages/blob/tangle/app/Rules.hs"&gt;このサイトの Hakyll コード&lt;/a&gt;を切り刻んでみました．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-21-add-feats-mysite-2018.html</id><title type="text">このサイトに機能を追加 2018</title><updated>2018-02-21T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-21-add-feats-mysite-2018.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;このサイトに機能を追加 2018&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-02-21" itemprop="datePublished"&gt;
        Feb 21, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/site.html"&gt;site&lt;/a&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;このサイトは Haskell の静的サイトジェネレーター &lt;a href="https://jaspervdj.be/hakyll/"&gt;Hakyll&lt;/a&gt; を使っています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2016-07-07-started-github-pages.html"&gt;GitHub Pages はじめました - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定期的に自分のサイトをいじってるんだけど，久々に本腰入れて改良した． このサイトを作り始めたころと違い「Haskell力」が段違いなのでサクサクできたぜ．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;追加したのは以下の7つ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リンクチェッカー&lt;/li&gt;
&lt;li&gt;LTS 10 に対応&lt;/li&gt;
&lt;li&gt;可変なキーバリューストアを aeson で&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post/&lt;/code&gt; 以下のマークダウン置き場を変更&lt;/li&gt;
&lt;li&gt;フィードの生成&lt;/li&gt;
&lt;li&gt;ページネーションの追加&lt;/li&gt;
&lt;li&gt;タグの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初のリンクチェッカーは &lt;code&gt;stack test&lt;/code&gt; で行うのだが，追加したのは実は結構前． 記事にしてなかったので書き足しておく．&lt;/p&gt;
&lt;h2 id="リンクチェッカー"&gt;リンクチェッカー&lt;/h2&gt;
&lt;p&gt;記事内にあるリンクを実際に ping して，リンクが有効かを検査するテストを作った． もちろん Haskell で書いて &lt;code&gt;stack test&lt;/code&gt; で実行できるようにした． コードはこんな感じ&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Main&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Prelude&lt;/span&gt;                   &lt;span class="kw"&gt;hiding&lt;/span&gt; (&lt;span class="dt"&gt;FilePath&lt;/span&gt;, null)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.List&lt;/span&gt;                 (nub, sort)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Maybe&lt;/span&gt;                (fromMaybe)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Text&lt;/span&gt;                 (&lt;span class="dt"&gt;Text&lt;/span&gt;, isPrefixOf, null, unpack)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Traversable&lt;/span&gt;          (traverse)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Network.HTTP.Client&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Network.HTTP.Client.TLS&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Network.HTTP.Types.Status&lt;/span&gt; (&lt;span class="dt"&gt;Status&lt;/span&gt;, ok200)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Shelly&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Test.Hspec&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Text.HTML.Scalpel.Core&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" data-line-number="17"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" data-line-number="18"&gt;  urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fmap mconcat &lt;span class="fu"&gt;.&lt;/span&gt; shelly &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" data-line-number="19"&gt;    run_ &lt;span class="st"&gt;&amp;quot;stack&amp;quot;&lt;/span&gt; [&lt;span class="st"&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;site&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" data-line-number="20"&gt;    files &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; ls &lt;span class="st"&gt;&amp;quot;_site/posts&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" data-line-number="21"&gt;    traverse (fmap scrapeLinks &lt;span class="fu"&gt;.&lt;/span&gt; readfile) files&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" data-line-number="22"&gt;  hspec &lt;span class="fu"&gt;.&lt;/span&gt; mapM_ spec &lt;span class="fu"&gt;.&lt;/span&gt; nub &lt;span class="fu"&gt;.&lt;/span&gt; sort &lt;span class="fu"&gt;$&lt;/span&gt; filter check urls&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-23" data-line-number="23"&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-24" data-line-number="24"&gt;  check url &lt;span class="fu"&gt;=&lt;/span&gt; not &lt;span class="fu"&gt;.&lt;/span&gt; or &lt;span class="fu"&gt;.&lt;/span&gt; (&lt;span class="fu"&gt;:&lt;/span&gt;) (null url) &lt;span class="fu"&gt;$&lt;/span&gt; fmap&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-25" data-line-number="25"&gt;    (&lt;span class="ot"&gt;`isPrefixOf`&lt;/span&gt; url)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-26" data-line-number="26"&gt;    [&lt;span class="st"&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;../&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-27" data-line-number="27"&gt;  spec url &lt;span class="fu"&gt;=&lt;/span&gt; it (unpack url) &lt;span class="fu"&gt;$&lt;/span&gt; linkStatus url &lt;span class="ot"&gt;`shouldReturn`&lt;/span&gt; ok200&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-28" data-line-number="28"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-29" data-line-number="29"&gt;&lt;span class="ot"&gt;scrapeLinks ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-30" data-line-number="30"&gt;scrapeLinks txt &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe [] &lt;span class="fu"&gt;$&lt;/span&gt; scrapeStringLike txt scraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-31" data-line-number="31"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt; scraper &lt;span class="fu"&gt;=&lt;/span&gt; attrs &lt;span class="st"&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-32" data-line-number="32"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-33" data-line-number="33"&gt;&lt;span class="ot"&gt;linkStatus ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Status&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-34" data-line-number="34"&gt;linkStatus url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-35" data-line-number="35"&gt;  manager &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; newManager tlsManagerSettings&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-36" data-line-number="36"&gt;  request &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; parseRequest &lt;span class="fu"&gt;$&lt;/span&gt; unpack url&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-37" data-line-number="37"&gt;  responseStatus&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-38" data-line-number="38"&gt;    &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; httpNoBody (request { requestHeaders &lt;span class="fu"&gt;=&lt;/span&gt; [(&lt;span class="st"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)] }) manager&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTTPクライアントには &lt;a href="https://hackage.haskell.org/package/http-client"&gt;&lt;code&gt;http-client&lt;/code&gt;&lt;/a&gt; を，スクレイピングには &lt;a href="https://hackage.haskell.org/package/scalpel"&gt;&lt;code&gt;scalpel&lt;/code&gt;&lt;/a&gt; を使っている． &lt;a href="https://hackage.haskell.org/package/shelly"&gt;&lt;code&gt;shelly&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;ls&lt;/code&gt; 関数を使って記事の一覧を取得してきている(これが Windows でも動くからうれしい)． 表示をそれっぽくするために &lt;a href="https://hackage.haskell.org/package/hspec"&gt;&lt;code&gt;hspec&lt;/code&gt;&lt;/a&gt; を使っている． &lt;code&gt;check&lt;/code&gt; 補助関数で自分のページや空文字を排除している．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;これでリンク切れや単純にタイポなんかを検出できるようになったんだが，直すのがめんどくさくて結局放置していること(オイ)．&lt;/p&gt;
&lt;h2 id="lts-10-に対応"&gt;LTS 10 に対応&lt;/h2&gt;
&lt;p&gt;リンクチェッカを回すために TravisCI を使い始めたが，なぜか GHC8 系の LTS だと OUT OF MEMORY してしまう…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--  While building custom Setup.hs for package Cabal-2.0.1.1 using:
      /home/travis/.stack/setup-exe-cache/x86_64-linux/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-linux/Cabal-2.0.1.0 build --ghc-options &amp;quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&amp;quot;
    Process exited with code: ExitFailure (-9) (THIS MAY INDICATE OUT OF MEMORY)
    Logs have been written to: /home/travis/build/matsubara0507/source-gh-pages/.stack-work/logs/Cabal-2.0.1.1.log
    Configuring Cabal-2.0.1.1...
    Preprocessing library for Cabal-2.0.1.1..
    Building library for Cabal-2.0.1.1..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;かなーーり古い LTS だとうまくいくので，仕方なくそれを使っていたのだが直すことにした． というか知り合いが直し方を記事にしてくれてたのでやってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.e-bigmoon.com/posts/2017-12-31-travis-out-of-memory.html"&gt;travis-ci の初回ビルドで OUT OF MEMORY が出た時の対処法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;戦犯は &lt;code&gt;Cabal&lt;/code&gt; パッケージなので，こいつだけ先に &lt;code&gt;-j 1&lt;/code&gt; オプション(メモリを節約するが速度が遅い)でビルドしてしまうという戦略． この記事のサイトの &lt;a href="https://github.com/e-bigmoon/haskell-blog/blob/a229f118f121e0ad843faae1412e938e3e4f3a6b/.travis.yml"&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; を &lt;del&gt;コピペ&lt;/del&gt; 参考にして次のようにした&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="fu"&gt;install:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; mkdir -p ~/.local/bin&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;export PATH=$HOME/.local/bin:&lt;/span&gt;&lt;span class="at"&gt;$PATH&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;travis_retry curl -L https:&lt;/span&gt;&lt;span class="at"&gt;//www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &amp;#39;*/stack&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="fu"&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;  &lt;span class="fu"&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; install cabal&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; stack --no-terminal build -j 1 Cabal&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; install pandoc&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; travis_wait 30 stack --no-terminal build pandoc&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; install deprndences&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; stack --no-terminal test --only-dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; stack test&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;      &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;span class="at"&gt; stack --no-terminal test --no-run-benchmarks --no-haddock-deps&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hakyll-4.10-が落ちる"&gt;hakyll-4.10 が落ちる&lt;/h3&gt;
&lt;p&gt;OUT OF MEMORY は突破したが…&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;    &lt;span class="fu"&gt;/&lt;/span&gt;tmp&lt;span class="fu"&gt;/&lt;/span&gt;stack3402&lt;span class="fu"&gt;/&lt;/span&gt;hakyll&lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="fl"&gt;4.10&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;&lt;span class="fl"&gt;0.0&lt;/span&gt;&lt;span class="fu"&gt;/&lt;/span&gt;rts&lt;span class="fu"&gt;/&lt;/span&gt;posix&lt;span class="fu"&gt;/&lt;/span&gt;OSThreads.c&lt;span class="fu"&gt;:&lt;/span&gt;&lt;span class="dv"&gt;137&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt;&lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; error&lt;span class="fu"&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;         error&lt;span class="fu"&gt;:&lt;/span&gt; undefined reference to &lt;span class="ch"&gt;&amp;#39;pthread_create&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なぜだ… 最新の &lt;a href="https://github.com/jaspervdj/hakyll/commit/480da307d22aff8ab3817d1586710c5f4ff6d779"&gt;&lt;code&gt;hakyll-4.11&lt;/code&gt; では直ってるみたい&lt;/a&gt;なので，&lt;code&gt;stack.yaml&lt;/code&gt; に追加したら上手くいった．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="fu"&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; hakyll-4.11.0.0&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; pandoc-citeproc-0.13.0.1&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="シンタックスハイライトが"&gt;シンタックスハイライトが…&lt;/h3&gt;
&lt;p&gt;おかしくなった． 理由は簡単で，Hakyll というか Pandoc がシンタックスハイライトにもともと使っていた &lt;a href="https://hackage.haskell.org/package/highlighting-kate"&gt;&lt;code&gt;highlighting-kate&lt;/code&gt;&lt;/a&gt; をやめて &lt;a href="https://hackage.haskell.org/package/skylighting"&gt;&lt;code&gt;skylighting&lt;/code&gt;&lt;/a&gt; に対応したからみたいだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fixpt.de/blog/2017-12-03-hakyll-highlighting-themes.html"&gt;fixpt - Hakyll Code Highlighting Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので，パッケージを変えたら元に戻った．&lt;/p&gt;
&lt;h2 id="可変なキーバリューストアを-aeson-で"&gt;可変なキーバリューストアを aeson で&lt;/h2&gt;
&lt;p&gt;テンプレートの方だけで出てくる変数(e.g. &lt;code&gt;$github$&lt;/code&gt; とか)は &lt;code&gt;site.hs&lt;/code&gt; の実装に依存したくなくて，Hakyll をビルドせずとも &lt;code&gt;config.yaml&lt;/code&gt; に好きに追加できるようにしたかった． &lt;a href="https://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; パッケージ(というか &lt;a href="https://hackage.haskell.org/package/aeson"&gt;&lt;code&gt;aeson&lt;/code&gt;&lt;/a&gt;)ではそういうのを出来ないと &lt;strong&gt;思い込んでいたが &lt;code&gt;Map k v&lt;/code&gt; 型を使えばできる&lt;/strong&gt; と最近分かった(インスタンスのリストを眺めてたら気づいた)． なので，今まで使ってた &lt;a href="https://hackage.haskell.org/package/yaml-light"&gt;&lt;code&gt;yaml-light&lt;/code&gt;&lt;/a&gt; パッケージを捨てて &lt;code&gt;yaml&lt;/code&gt; パッケージで次のように実装した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Yaml&lt;/span&gt;   (decodeFileEither)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Map&lt;/span&gt;    (&lt;span class="dt"&gt;Map&lt;/span&gt;, foldMapWithKey)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Hakyll&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;  configYaml &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; either (error &lt;span class="fu"&gt;.&lt;/span&gt; show) id &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; decodeFileEither &lt;span class="st"&gt;&amp;quot;config.yaml&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;    siteCtx &lt;span class="fu"&gt;=&lt;/span&gt; mkSiteCtx configYaml&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;  hakyllWith config &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-11" data-line-number="11"&gt;    &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-13" data-line-number="13"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-15" data-line-number="15"&gt;&lt;span class="ot"&gt;mkSiteCtx ::&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-16" data-line-number="16"&gt;mkSiteCtx &lt;span class="fu"&gt;=&lt;/span&gt; foldMapWithKey constField&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こういう &lt;code&gt;config.yaml&lt;/code&gt; を書いておくと，全てテンプレートの中で参照できる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="fu"&gt;site_title:&lt;/span&gt;&lt;span class="at"&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;自分用のメモ書きだったり，イロイロといじって遊ぶようだったり&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;&lt;span class="fu"&gt;baseurl:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;&lt;span class="fu"&gt;github:&lt;/span&gt;&lt;span class="at"&gt;  matsubara0507&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="post-以下のマークダウン置き場を変更"&gt;&lt;code&gt;post/&lt;/code&gt; 以下のマークダウン置き場を変更&lt;/h2&gt;
&lt;p&gt;記事のマークダウンは全て &lt;code&gt;posts/&lt;/code&gt; 以下に置いていたのだが，各年ごとにディレクトリを切りたいなぁと思った． 例えば &lt;code&gt;posts/2018/02-21-add-feats-mysite-2018.md&lt;/code&gt; といった具合に． しかし，出力は今まで通り &lt;code&gt;posts/2018-02-21-add-feats-mysite-2018.html&lt;/code&gt; としたい(リンクが変わっちゃうからね)． まんま&lt;a href="http://daimatz.net/text/2014/0126-hakyll.html"&gt;同じことをしてくれている記事&lt;/a&gt;があったので，参考にして次のように書き換えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;  match &lt;span class="st"&gt;&amp;quot;posts/*/*&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;    route &lt;span class="fu"&gt;$&lt;/span&gt; composeRoutes (gsubRoute &lt;span class="st"&gt;&amp;quot;/[0-9]{4}/&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; (&lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;.&lt;/span&gt; init)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;                          (setExtension &lt;span class="st"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;    compile&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;      &lt;span class="fu"&gt;$&lt;/span&gt;   pandocCompiler&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;      &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; loadAndApplyTemplate &lt;span class="st"&gt;&amp;quot;templates/post.html&amp;quot;&lt;/span&gt; postCtx&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;      &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; loadAndApplyTemplate &lt;span class="st"&gt;&amp;quot;templates/default.html&amp;quot;&lt;/span&gt; (postCtx &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; siteCtx)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;      &lt;span class="fu"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; relativizeUrls&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;gsubRoute&lt;/code&gt; 関数を使うことで，ファイル名を特有のパターン記法(？)でマッチさせ置換できる． &lt;code&gt;gsubRoute &amp;quot;/[0-9]{4}/&amp;quot; $ (++ &amp;quot;-&amp;quot;) . init&lt;/code&gt; の場合，&lt;code&gt;/2018/&lt;/code&gt; をマッチさせ &lt;code&gt;init&lt;/code&gt; して &lt;code&gt;/2018&lt;/code&gt; となり，末尾に &lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt; を追加している．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;さて実はもう一つ問題があって，Hakyll は日時を表すテンプレート変数(&lt;code&gt;$date$&lt;/code&gt; とか)を次のように取得する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="ot"&gt;postCtx ::&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;postCtx &lt;span class="fu"&gt;=&lt;/span&gt; mconcat&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;  [ dateField &lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;  , dateField &lt;span class="st"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%b %-d, %Y&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;  , defaultContext&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dateField&lt;/code&gt; 関数が記事のファイル名(&lt;code&gt;yyyy-mm-dd-*.md&lt;/code&gt; の部分)かマークダウンのメタ変数から取得している． つまり，&lt;code&gt;posts/2018/02-21-add-feats-mysite-2018.md&lt;/code&gt; というファイル名じゃ日時の変数を取得できない． しょうがないので Hakyll のソースコードを読んで無理やり書き換えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Time&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;System.FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="ot"&gt;dateField&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;dateField&amp;#39; key format &lt;span class="fu"&gt;=&lt;/span&gt; field key &lt;span class="fu"&gt;$&lt;/span&gt; \item &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;  time &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getItemUTC&amp;#39; defaultTimeLocale &lt;span class="fu"&gt;$&lt;/span&gt; itemIdentifier item&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; formatTime defaultTimeLocale format time&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;&lt;span class="ot"&gt;getItemUTC&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;MonadMetadata&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TimeLocale&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Identifier&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m &lt;span class="dt"&gt;UTCTime&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-10" data-line-number="10"&gt;getItemUTC&amp;#39; locale ident &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-11" data-line-number="11"&gt;  pure &lt;span class="fu"&gt;$&lt;/span&gt; parseTimeOrError &lt;span class="dt"&gt;True&lt;/span&gt; locale &lt;span class="st"&gt;&amp;quot;%Y%m-%d&amp;quot;&lt;/span&gt; (yyyy &lt;span class="fu"&gt;++&lt;/span&gt; mmdd)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-12" data-line-number="12"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-13" data-line-number="13"&gt;    path &lt;span class="fu"&gt;=&lt;/span&gt; toFilePath ident&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-14" data-line-number="14"&gt;    yyyy &lt;span class="fu"&gt;=&lt;/span&gt; takeFileName &lt;span class="fu"&gt;$&lt;/span&gt; takeDirectory path&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-15" data-line-number="15"&gt;    mmdd &lt;span class="fu"&gt;=&lt;/span&gt; take &lt;span class="dv"&gt;5&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; takeBaseName path&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さっきの &lt;code&gt;dateField&lt;/code&gt; の部分を &lt;code&gt;dateField'&lt;/code&gt; にすれば記事のビルドが出来る！&lt;/p&gt;
&lt;h3 id="vs-recentfirst-関数"&gt;vs &lt;code&gt;recentFirst&lt;/code&gt; 関数&lt;/h3&gt;
&lt;p&gt;記事を日時順に並び変えてくれる &lt;code&gt;recentFirst&lt;/code&gt; 関数もファイル名に依存してる． しょうがないので力技で書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.List&lt;/span&gt;       (sortBy)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Ord&lt;/span&gt;        (comparing)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;&lt;span class="ot"&gt;recentFirst&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;MonadMetadata&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Item&lt;/span&gt; a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class="dt"&gt;Item&lt;/span&gt; a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;recentFirst&amp;#39; &lt;span class="fu"&gt;=&lt;/span&gt; fmap reverse &lt;span class="fu"&gt;.&lt;/span&gt; chronological&amp;#39;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;&lt;span class="ot"&gt;chronological&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;MonadMetadata&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Item&lt;/span&gt; a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class="dt"&gt;Item&lt;/span&gt; a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" data-line-number="8"&gt;chronological&amp;#39; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" data-line-number="9"&gt;  sortByM &lt;span class="fu"&gt;$&lt;/span&gt; getItemUTC&amp;#39; defaultTimeLocale &lt;span class="fu"&gt;.&lt;/span&gt; itemIdentifier&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" data-line-number="11"&gt;&lt;span class="ot"&gt;sortByM ::&lt;/span&gt; (&lt;span class="dt"&gt;Monad&lt;/span&gt; m, &lt;span class="dt"&gt;Ord&lt;/span&gt; k) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m k) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m [a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-12" data-line-number="12"&gt;sortByM f &lt;span class="fu"&gt;=&lt;/span&gt; fmap (map fst &lt;span class="fu"&gt;.&lt;/span&gt; sortBy (comparing snd)) &lt;span class="fu"&gt;.&lt;/span&gt; mapM (fmap &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (,) &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; f)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;sortByM&lt;/code&gt; 関数は &lt;code&gt;sortBy&lt;/code&gt; の &lt;code&gt;Monad&lt;/code&gt; 版． &lt;code&gt;[a]&lt;/code&gt; を &lt;code&gt;[(a, m k)]&lt;/code&gt; とし &lt;code&gt;[m (a, k)]&lt;/code&gt; にして &lt;code&gt;m [(a, k)]&lt;/code&gt; にしてから &lt;code&gt;k&lt;/code&gt; でソートし最後に &lt;code&gt;a&lt;/code&gt; だけ取り出している． ちなみに，&lt;code&gt;fmap &amp;lt;$&amp;gt; (,) &amp;lt;*&amp;gt; f&lt;/code&gt; の部分は分かりますか？ &lt;code&gt;\x -&amp;gt; (,) x &amp;lt;$&amp;gt; f x&lt;/code&gt; をしてるだけですよ．&lt;/p&gt;
&lt;h2 id="フィードページネーションタグ"&gt;フィード・ページネーション・タグ&lt;/h2&gt;
&lt;p&gt;実はフィード生成・ページネーション・タグは，もとから Hakyll で提供されている機能だ． どれもこの記事に日本語で書いてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part2.html"&gt;Hakyllでブログを作る(実践編2) - Wake up! Good night*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part3.html"&gt;Hakyllでブログを作る(実践編3) - Wake up! Good night*&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だが躓きポイントはいくつかあった(だいたい日時のやつだけど…)．&lt;/p&gt;
&lt;h3 id="フィードを生成"&gt;フィードを生成&lt;/h3&gt;
&lt;p&gt;記事の通りに作っても &lt;code&gt;$published$&lt;/code&gt; 変数が無いと怒られる． &lt;code&gt;renderAtom&lt;/code&gt; 関数の中で &lt;code&gt;dateField&lt;/code&gt; 関数を使っているからだ． さすがに書き換えるのはめんどいので，自分で取ってくることにした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="ot"&gt;postCtx ::&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;postCtx &lt;span class="fu"&gt;=&lt;/span&gt; mconcat&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;  [ dateField &lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;  , dateField &lt;span class="st"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%b %-d, %Y&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;  , dateField&amp;#39; &lt;span class="st"&gt;&amp;quot;published&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;  , dateField&amp;#39; &lt;span class="st"&gt;&amp;quot;updated&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;  , defaultContext&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あと，&lt;a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Feed.html#t:FeedConfiguration"&gt;フィードに渡す変数&lt;/a&gt;は &lt;code&gt;config.yaml&lt;/code&gt; に書くことにした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="fu"&gt;site_title:&lt;/span&gt;&lt;span class="at"&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;span class="fu"&gt;author:&lt;/span&gt;&lt;span class="at"&gt; MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;span class="fu"&gt;email:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;&lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;自分用のメモ書きだったり，イロイロといじって遊ぶようだったり&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;&lt;span class="fu"&gt;baseurl:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;&lt;span class="fu"&gt;val:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;  &lt;span class="fu"&gt;github:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;Config&lt;/code&gt; 型という拡張可能レコードにマッピングし，そのあとに &lt;code&gt;FeedConfiguration&lt;/code&gt; 型に変換する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Control.Lens&lt;/span&gt; ((^.))&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;site_title&amp;quot; &amp;gt;: String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;   , &lt;span class="st"&gt;&amp;quot;author&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;   , &lt;span class="st"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;   , &lt;span class="st"&gt;&amp;quot;baseurl&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;   , &lt;span class="st"&gt;&amp;quot;val&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;&lt;span class="ot"&gt;mkFeedConfig ::&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;FeedConfiguration&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;mkFeedConfig conf &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;FeedConfiguration&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;  { feedTitle       &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;site_title&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" data-line-number="16"&gt;  , feedDescription &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;description&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" data-line-number="17"&gt;  , feedAuthorName  &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;author&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" data-line-number="18"&gt;  , feedAuthorEmail &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;email&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" data-line-number="19"&gt;  , feedRoot        &lt;span class="fu"&gt;=&lt;/span&gt; conf &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;baseurl&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-20" data-line-number="20"&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん，&lt;code&gt;siteCtx&lt;/code&gt; も書き換える必要がある．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="ot"&gt;mkSiteCtx ::&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;mkSiteCtx &lt;span class="fu"&gt;=&lt;/span&gt; hfoldMapFor&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;  (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;  (toContext &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; symbolVal &lt;span class="fu"&gt;.&lt;/span&gt; proxyAssocKey &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; getField)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;&lt;span class="ot"&gt;  toContext ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;  toContext _ &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; mempty&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;  toContext k v  &lt;span class="fu"&gt;=&lt;/span&gt; constField k v&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; (&lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-14" data-line-number="14"&gt;  toContext _ &lt;span class="fu"&gt;=&lt;/span&gt; foldMapWithKey toContext&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-16" data-line-number="16"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ToContext&lt;/span&gt; (&lt;span class="dt"&gt;Identity&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-17" data-line-number="17"&gt;  toContext k &lt;span class="fu"&gt;=&lt;/span&gt; toContext k &lt;span class="fu"&gt;.&lt;/span&gt; runIdentity&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコード最高です．&lt;/p&gt;
&lt;h3 id="ページネーションを追加"&gt;ページネーションを追加&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part2.html#%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%8D%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3"&gt;参考記事&lt;/a&gt;の中で使われている &lt;code&gt;sortRecentFirst&lt;/code&gt; も日時を取得しているので書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="ot"&gt;sortRecentFirst&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;MonadMetadata&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Identifier&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class="dt"&gt;Identifier&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;sortRecentFirst&amp;#39; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;  fmap (fmap itemIdentifier) &lt;span class="fu"&gt;.&lt;/span&gt; recentFirst&amp;#39; &lt;span class="fu"&gt;.&lt;/span&gt; fmap (flip &lt;span class="dt"&gt;Item&lt;/span&gt; ())&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="タグを追加"&gt;タグを追加&lt;/h3&gt;
&lt;p&gt;躓きと言うかデザインの問題なのだが，タグのテンプレート変数を生成する &lt;a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Tags.html#v:tagsField"&gt;&lt;code&gt;tagsField&lt;/code&gt;&lt;/a&gt; 関数が，タグをカンマ区切りの文字列にしちゃうのがあった． 個人的には空白区切りにして欲しいので書き換えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.List&lt;/span&gt;                   (intersperse)&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Text.Blaze.Html&lt;/span&gt;             (toHtml, toValue, (!))&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Text.Blaze.Html5&lt;/span&gt;            &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;H&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Text.Blaze.Html5.Attributes&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-6" data-line-number="6"&gt;&lt;span class="ot"&gt;tagsFieldWithSep ::&lt;/span&gt; &lt;span class="dt"&gt;H.Html&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Tags&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-7" data-line-number="7"&gt;tagsFieldWithSep sep &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-8" data-line-number="8"&gt;  tagsFieldWith getTags simpleRenderLink (mconcat &lt;span class="fu"&gt;.&lt;/span&gt; intersperse sep)&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-10" data-line-number="10"&gt;&lt;span class="ot"&gt;simpleRenderLink ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; FilePath &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;H.Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-11" data-line-number="11"&gt;simpleRenderLink tag &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-12" data-line-number="12"&gt;  fmap (\path &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; H.a &lt;span class="fu"&gt;!&lt;/span&gt; A.href (toValue &lt;span class="fu"&gt;$&lt;/span&gt; toUrl path) &lt;span class="fu"&gt;$&lt;/span&gt; toHtml tag)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tagsFieldWithSep &amp;quot; &amp;quot;&lt;/code&gt; とすれば空白区切りになる．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ずーーとやろうやろうと思ってたことをいっきに片したぜ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html</id><title type="text">自己紹介ページを生成する whoami CLI を作った (Haskell)</title><updated>2018-02-19T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;自己紹介ページを生成する whoami CLI を作った (Haskell)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-02-19" itemprop="datePublished"&gt;
        Feb 19, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt; &lt;a href="/tags/extensible-package.html"&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://github.com/matsubara0507/whoami"&gt;whoami&lt;/a&gt; という CLI を作りました． こんな感じの Yaml ファイルから&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="fu"&gt;account:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;github:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;  &lt;span class="fu"&gt;qiita:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="fu"&gt;site:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;    &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://matsubara0507.github.io&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;    &lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; メモ書きブログ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;&lt;span class="fu"&gt;post:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;  &lt;span class="fu"&gt;latest:&lt;/span&gt;&lt;span class="at"&gt; 10&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;  &lt;span class="fu"&gt;posts:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://haskell.jp/blog/posts/2017/advent-calendar-2017.html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;      &lt;span class="fu"&gt;date:&lt;/span&gt;&lt;span class="at"&gt; 2017-12-31&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://iggg.github.io/2017/06/01/make-tweet-slack-bot&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;&lt;span class="fu"&gt;library:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; chatwork&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" data-line-number="17"&gt;    &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://hackage.haskell.org/package/chatwork&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" data-line-number="18"&gt;    &lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; The ChatWork API in Haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" data-line-number="19"&gt;    &lt;span class="fu"&gt;language:&lt;/span&gt;&lt;span class="at"&gt; haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" data-line-number="20"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; thank_you_stars&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" data-line-number="21"&gt;    &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://hex.pm/packages/thank_you_stars&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" data-line-number="22"&gt;    &lt;span class="fu"&gt;language:&lt;/span&gt;&lt;span class="at"&gt; elixir&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-23" data-line-number="23"&gt;&lt;span class="fu"&gt;qiita:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-24" data-line-number="24"&gt;  &lt;span class="fu"&gt;posts:&lt;/span&gt;&lt;span class="at"&gt; true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-25" data-line-number="25"&gt;&lt;span class="fu"&gt;app:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-26" data-line-number="26"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; AnaQRam&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-27" data-line-number="27"&gt;    &lt;span class="fu"&gt;url:&lt;/span&gt;&lt;span class="at"&gt; http://github.com/matsubara0507/AnaQRam&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-28" data-line-number="28"&gt;    &lt;span class="fu"&gt;description:&lt;/span&gt;&lt;span class="at"&gt; QRコードを利用したアナグラム(並び替えパズル)&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じの Markdown を生成する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode markdown"&gt;&lt;code class="sourceCode markdown"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="fu"&gt;# MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;- &lt;span class="ot"&gt;[GitHub](https://github.com/matsubara0507)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[Qiita](https://qiita.com/matsubara0507)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;&lt;span class="fu"&gt;## My Sites&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;- &lt;span class="ot"&gt;[ひげメモ](http://matsubara0507.github.io)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;&lt;span class="fl"&gt;    - メモ書きブログ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;&lt;span class="fu"&gt;## My Posts&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;- &lt;span class="ot"&gt;[Haskell Advent Calendar 2017 まとめ - Haskell-jp](http://haskell.jp/blog/posts/2017/advent-calendar-2017.html)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;&lt;span class="fl"&gt;    - posted on 2017-12-31&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" data-line-number="12"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[LINE の Echo Bot を Google Cloud Functions に作る](https://qiita.com/matsubara0507/items/04ab3c2197aa5f68e499)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" data-line-number="13"&gt;&lt;span class="fl"&gt;    - posted on 2017-11-21&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" data-line-number="14"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[GitHub にチャット機能のようなものが追加された (team discussions)](https://qiita.com/matsubara0507/items/47d2e2545553e415f969)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" data-line-number="15"&gt;&lt;span class="fl"&gt;    - posted on 2017-11-21&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" data-line-number="16"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[GitHub Project に自動でカードのカラム遷移をする機能が追加された](https://qiita.com/matsubara0507/items/f384991b4854aa28745a)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" data-line-number="17"&gt;&lt;span class="fl"&gt;    - posted on 2017-10-31&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-18" data-line-number="18"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[Slack から特定のアカウントでツイートする Bot を作った｜群馬大学電子計算機研究会 IGGG](http://iggg.github.io/2017/06/01/make-tweet-slack-bot)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-19" data-line-number="19"&gt;&lt;span class="fl"&gt;    - posted on 2017-06-01&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-20" data-line-number="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-21" data-line-number="21"&gt;&lt;span class="fu"&gt;## Applications&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-22" data-line-number="22"&gt;- &lt;span class="ot"&gt;[AnaQRam](http://github.com/matsubara0507/AnaQRam)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-23" data-line-number="23"&gt;&lt;span class="fl"&gt;    - QRコードを利用したアナグラム(並び替えパズル)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-24" data-line-number="24"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-25" data-line-number="25"&gt;&lt;span class="fu"&gt;## Libraries&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-26" data-line-number="26"&gt;- &lt;span class="ot"&gt;[chatwork](http://hackage.haskell.org/package/chatwork)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-27" data-line-number="27"&gt;&lt;span class="fl"&gt;    - The ChatWork API in Haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-28" data-line-number="28"&gt;&lt;span class="fl"&gt;- &lt;/span&gt;&lt;span class="ot"&gt;[thank_you_stars](http://hex.pm/packages/thank_you_stars)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-29" data-line-number="29"&gt;&lt;span class="fl"&gt;    - A tool for starring GitHub repositories.&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yaml ファイルでは足りない情報をスクレイピングや各種 Web サービスの API で拾ってくる． なんか自分のアクティビティを紹介するページを SNS にリンクしてる人が多いと思うんだけど，そのページをできるだけ楽して生成したいなぁというのがモチベーション．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;ホントはバイト先で作ってる Haskell 製の社内用 CLI ツールを公開したくて，内容を公開できるようにしたツールです． こんな感じのデータ処理をするツールを，バイト先では Haskell で作ってた．&lt;/p&gt;
&lt;h2 id="extensible"&gt;extensible&lt;/h2&gt;
&lt;p&gt;このツールの(まぁまぁ)面白いところは，&lt;a href="https://hackage.haskell.org/package/extensible"&gt;extensible&lt;/a&gt; というパッケージの機能をふんだんに使っている． 拡張可能レコード，バリアント，作用を使い，ついでに &lt;a href="https://hackage.haskell.org/package/extensible/docs/Data-Extensible-GetOpt.html"&gt;GetOpt&lt;/a&gt; も使ってみた． 軽く補足しておく(&lt;strong&gt;但し，作者ではないので間違っている部分はあるかも&lt;/strong&gt;)．&lt;/p&gt;
&lt;h3 id="拡張可能レコード"&gt;拡張可能レコード&lt;/h3&gt;
&lt;p&gt;Haskell のレコード構文&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; {&lt;span class="ot"&gt; hoge1 ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="ot"&gt; hoge2 ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を，型レベル辞書を用いて次のように書ける．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: Int, &amp;quot;hoge2&amp;quot; &amp;gt;: Text ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt; 言語拡張と組み合わせて，名前衝突の無いフィールド名を扱えたり，&lt;code&gt;lens&lt;/code&gt; を用いた OOP のような参照(e.g. &lt;code&gt;hoge ^. #hoge1&lt;/code&gt;)が出来る． また，&lt;a href="/posts/2017-11-28-fun-of-extensible-1.html"&gt;レコードの拡縮もできる&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id="拡張可能バリアント"&gt;拡張可能バリアント&lt;/h3&gt;
&lt;p&gt;次のような直和型&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Hoge1&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Hoge2&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を，型レベル辞書を用いて，バリアント型のように書ける．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: Int, &amp;quot;hoge2&amp;quot; &amp;gt;: Text ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(正直あんまり利点が分かってないけど)拡縮はもちろん，&lt;a href="/posts/2018-01-31-fun-of-extensible-2.html"&gt;バリアントの操作関数をファイル分割して実装&lt;/a&gt;もできる．&lt;/p&gt;
&lt;h3 id="拡張可能作用"&gt;拡張可能作用&lt;/h3&gt;
&lt;p&gt;型レベル辞書によってモナドスタックを表現する． 今回は次のようなモナドを定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Eff&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ ReaderDef Config&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;   , &lt;span class="dt"&gt;EitherDef&lt;/span&gt; &lt;span class="dt"&gt;ServiceException&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;   , &lt;span class="dt"&gt;LoggerDef&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;   , &lt;span class="st"&gt;&amp;quot;IO&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本的に&lt;a href="/posts/2017-12-09-extensible-effects-step-by-step.html"&gt;普通のモナドトランスフォーマーのように扱える&lt;/a&gt;． じゃぁ素直にモナドトランスフォーマー使えよって感じかもしれないけど気にしないで．&lt;/p&gt;
&lt;h3 id="getopt-ラッパー"&gt;&lt;code&gt;GetOpt&lt;/code&gt; ラッパー&lt;/h3&gt;
&lt;p&gt;GHCには標準で &lt;code&gt;--output hoge&lt;/code&gt; みたいな CLI のオプション引数をパースしてくれるモジュール &lt;a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/System-Console-GetOpt.html"&gt;&lt;code&gt;GetOpt&lt;/code&gt;&lt;/a&gt; がある(ぼくは初めて使った)． extensible では，パース結果を拡張可能レコードにマッピングするための補助関数が&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-GetOpt.html"&gt;提供されている&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;キモになるのは &lt;code&gt;withGetOpt&lt;/code&gt; 関数である．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;withGetOpt&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  ::&lt;/span&gt; &lt;span class="dt"&gt;MonadIO&lt;/span&gt; m&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;  &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;RecordOf&lt;/span&gt; (&lt;span class="dt"&gt;OptionDescr&lt;/span&gt; h) xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;RecordOf&lt;/span&gt; h xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;String&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一引数目の文字列はパース失敗したとき(要するにオプションが間違ってるとき)に表示する「使い方」に使われる． 例えば，whoami だと&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;whoami [options] [input-file]
  -o FILE               --output=FILE                Write output to FILE instead of stdout.
  -t FORMAT, -w FORMAT  --to=FORMAT, --write=FORMAT  Specify output format. default is `markdown`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;の &lt;code&gt;[options] [input-file]&lt;/code&gt; が一引数目だ． 二引数目はオプションのパーサー(？)の定義を拡張可能レコードで与えており，三引数目がパース結果の拡張可能レコードと残りの(空白区切りの)文字列を受け取ってどうするかの振る舞いを与える．&lt;/p&gt;
&lt;p&gt;まぁ詳しくは&lt;a href="https://www.schoolofhaskell.com/user/fumieval/extensible/getopt-and-extensible-records"&gt;作者さんの記事&lt;/a&gt;で紹介されている(英語だけど，あと一引数目の文字列はこの記事以降に追加された機能らしく，サンプルコードにはない)．&lt;/p&gt;
&lt;h3 id="extensible-instances"&gt;extensible-instances&lt;/h3&gt;
&lt;p&gt;拡張可能レコードは全て &lt;code&gt;Record '[...]&lt;/code&gt; の型エイリアスで定義する． つまり，拡張可能レコードの何らかの型クラスのインスタンスは &lt;code&gt;Record '[...]&lt;/code&gt; に適用しておけば全部で使える(逆に影響力がでかいともいえる)．&lt;/p&gt;
&lt;p&gt;いくつかの自作アプリーケーションでインスタンスを作っていて，ダブってたのでひとつのリポジトリにまとめた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/extensible-instances"&gt;matsubara0507/extensible-instances - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(なんか作者本人じゃないから気が引けて) Hackage にはあげてないがパッケージの体はしてるので，&lt;a href="https://docs.haskellstack.org/en/stable/yaml_configuration/#git-and-mercurial-repos"&gt;&lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;extra-deps&lt;/code&gt; に記述&lt;/a&gt;することで使えるはず．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;注意点として &lt;a href="https://github.com/fumieval/extensible"&gt;fumieval/extensible&lt;/a&gt; の&lt;a href="https://github.com/fumieval/extensible/blob/master/examples/aeson.hs"&gt;例にある &lt;code&gt;FromJSON&lt;/code&gt; のインスタンス&lt;/a&gt;とは微妙に実装が違う． 作者さんのは &lt;code&gt;Maybe a&lt;/code&gt; にしてもキーが存在しないといけないのだが，&lt;code&gt;aeson&lt;/code&gt; の &lt;code&gt;Generics&lt;/code&gt; は &lt;code&gt;Maybe a&lt;/code&gt; ならキーが無くても良いので，そっちに合わせた．&lt;/p&gt;
&lt;h2 id="仕組み"&gt;仕組み&lt;/h2&gt;
&lt;p&gt;コード自体は&lt;a href="https://github.com/matsubara0507/whoami"&gt;このリポジトリ&lt;/a&gt;にある．&lt;/p&gt;
&lt;h3 id="基本的な部分"&gt;基本的な部分&lt;/h3&gt;
&lt;p&gt;基本的に Yaml ファイルにはサイト・記事・ライブラリ・アプリケーションを列挙してもらう． それらは次のような型になっている(型の値として取り出せる)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot;    &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;   , &lt;span class="st"&gt;&amp;quot;account&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Accounts&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;   , &lt;span class="st"&gt;&amp;quot;site&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; [&lt;span class="dt"&gt;SiteConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;   , &lt;span class="st"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;    &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;latest&amp;quot; &amp;gt;: Maybe Int, &amp;quot;posts&amp;quot; &amp;gt;: [PostConfig]]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;   , &lt;span class="st"&gt;&amp;quot;library&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; [&lt;span class="dt"&gt;LibConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;   , &lt;span class="st"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;     &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; [&lt;span class="dt"&gt;AppConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;   , &lt;span class="st"&gt;&amp;quot;qiita&amp;quot;&lt;/span&gt;   &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;QiitaConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-11" data-line-number="11"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Accounts&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-12" data-line-number="12"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-13" data-line-number="13"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-15" data-line-number="15"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;SiteConfig&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-16" data-line-number="16"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-17" data-line-number="17"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-18" data-line-number="18"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-19" data-line-number="19"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-20" data-line-number="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-21" data-line-number="21"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;PostConfig&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-22" data-line-number="22"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Maybe Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-23" data-line-number="23"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-24" data-line-number="24"&gt;   , &lt;span class="st"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-25" data-line-number="25"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-26" data-line-number="26"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-27" data-line-number="27"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;LibConfig&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-28" data-line-number="28"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-29" data-line-number="29"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-30" data-line-number="30"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-31" data-line-number="31"&gt;   , &lt;span class="st"&gt;&amp;quot;language&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-32" data-line-number="32"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-33" data-line-number="33"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-34" data-line-number="34"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;AppConfig&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-35" data-line-number="35"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-36" data-line-number="36"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-37" data-line-number="37"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-38" data-line-number="38"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt;パッケージを使って，Yaml ファイルから &lt;code&gt;Config&lt;/code&gt; 型にデコードしてもらう． &lt;code&gt;Maybe a&lt;/code&gt; になっているところは書いてあっても無くても良い項目だ．&lt;/p&gt;
&lt;p&gt;そしてサイト・記事・ライブラリ・アプリケーション固有の &lt;code&gt;Config&lt;/code&gt; 型を共通のフォーマットである &lt;code&gt;Info&lt;/code&gt; 型に変換する手続きを型クラスを用いて定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;   , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;   , &lt;span class="st"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;   , &lt;span class="st"&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;ServiceType&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" data-line-number="8"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;ServiceType&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" data-line-number="9"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;post&amp;quot; &amp;gt;: Post&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" data-line-number="10"&gt;   , &lt;span class="st"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" data-line-number="11"&gt;   , &lt;span class="st"&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;  &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Library&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-12" data-line-number="12"&gt;   , &lt;span class="st"&gt;&amp;quot;site&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Site&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-13" data-line-number="13"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-15" data-line-number="15"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Uniform&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-16" data-line-number="16"&gt;&lt;span class="ot"&gt;  fetch ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; &lt;span class="dt"&gt;Data&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-17" data-line-number="17"&gt;&lt;span class="ot"&gt;  fill ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Data&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-18" data-line-number="18"&gt;&lt;span class="ot"&gt;  uniform ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-20" data-line-number="20"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Data&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-22" data-line-number="22"&gt;&lt;span class="ot"&gt;toInfo ::&lt;/span&gt; &lt;span class="dt"&gt;Uniform&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; &lt;span class="dt"&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-23" data-line-number="23"&gt;toInfo conf &lt;span class="fu"&gt;=&lt;/span&gt; uniform &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; fill conf &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; fetch conf&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Uniform&lt;/code&gt; 型クラスに3つの関数は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fill&lt;/code&gt; 関数は共通のフォーマットにするための足りない情報(&lt;code&gt;Maybe a&lt;/code&gt; で &lt;code&gt;Nothing&lt;/code&gt; だったところ)をスクレイピングなどで補完&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt; 関数はスクレイピングするための HTML などを取ってくる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform&lt;/code&gt; 関数は実際に共通フォーマットに変換する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった具合だ(正直分けなくてもいい)．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;他にも GitHub・BitBacket・GitLab なんかを全部一緒に取り扱う &lt;code&gt;Repo&lt;/code&gt; とかも作ってもいいかもしれない． 問題は，自分が GitHub 以外に使ってないのでテストできない点だ．&lt;/p&gt;
&lt;h3 id="qiita-とか"&gt;Qiita とか&lt;/h3&gt;
&lt;p&gt;Qiita とかは RESTful API を叩いて記事を集めてる． そもそも記事自体を集めるところと，&lt;code&gt;Uniform&lt;/code&gt; 型クラスのインスタンスを共通化するのに &lt;code&gt;Service&lt;/code&gt; 型クラスを作った(名前が微妙)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Service&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  genInfo ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ServiceM&lt;/span&gt; [&lt;span class="dt"&gt;Info&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Proxy a&lt;/code&gt; なのはしょうがない． お好きなサービス(自分のサイトとかでも)を &lt;code&gt;Service&lt;/code&gt; 型クラスのインスタンスにして，&lt;code&gt;Whoami&lt;/code&gt; 型のインスタンスを書き換えれば，いろんなサイトを共通の形式で扱える．&lt;/p&gt;
&lt;h2 id="on-github-pages"&gt;on GitHub Pages&lt;/h2&gt;
&lt;p&gt;GitHub Pages で簡単に使えるようにした． サンプルのリポジトリを作ったので，これをフォークして Travis CI と GitHub Pages を設定するだけで使えるはずだ(もちろん &lt;code&gt;whoami.yaml&lt;/code&gt; を書き換えて)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/whoami-example"&gt;matsubara0507/whoami-example - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stackage (というか Hackage)に置いていないツールを &lt;code&gt;stack install&lt;/code&gt; するために，&lt;code&gt;package.yaml&lt;/code&gt; と &lt;code&gt;stack.yaml&lt;/code&gt; と &lt;code&gt;.gitignore&lt;/code&gt; を置いてるけど気にしないで． Travis CI の定期実行を設定しておけば定期的に Qita の記事とかを更新してくれる．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;そーいえば，UNIX 系には &lt;code&gt;whoami&lt;/code&gt; というコマンドがあるんでしたね(Windowsユーザー)． 紛らわしい名前にしてしまった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20180214/1518587871</id><title type="text">[TLS][Haskell]TLS 1.3 開発日記 その25 picotls</title><updated>2018-02-14T05:57:51Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20180214/1518587871"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;kazuho さんが実装を進めている picotls を使う方法のまとめ。picotls は TLS 1.3 のみを実装している。またデフォルトで利用できる ECDHE は P256 のみである。&lt;/p&gt;
&lt;h4&gt; インストール&lt;/h4&gt;
&lt;p&gt;cmakeが必要なので、あらかじめインストールしておく。master ブランチが draft 23。&lt;/p&gt;
&lt;pre&gt;
% git clone https://github.com/h2o/picotls
% cd picotls
% git submodule init
% git submodule update
% cmake .
% make
&lt;/pre&gt;

&lt;p&gt;これで、トップディレクトリに "cli" というコマンドができる。"cli" は、サーバにもクライアントにもなる。&lt;/p&gt;
&lt;h4&gt; picotls サーバ&lt;/h4&gt;
&lt;pre&gt;
% ./cli -k $SOMEWHERE/key.pem -c $SOMEWHERE/certificate.pem 127.0.0.1 13443
&lt;/pre&gt;

&lt;h4&gt; picotls クライアント&lt;/h4&gt;
&lt;p&gt;Full:&lt;/p&gt;
&lt;pre&gt;
% ./cli 127.0.0.1 443
&lt;/pre&gt;

&lt;p&gt;HRR: &lt;/p&gt;
&lt;p&gt;最初はkey_shareを空にして送るという裏技を使う&lt;/p&gt;
&lt;pre&gt;
% ./cli -n 127.0.0.1 443
&lt;/pre&gt;

&lt;p&gt;PSK:&lt;/p&gt;
&lt;p&gt;最初の -s オプションでチケットを保存し、次の -s オプションでチケットを読み込む。&lt;/p&gt;
&lt;pre&gt;
% rm ticket
% cli -s ticket 127.0.0.1 443
% cli -s ticket 127.0.0.1 443
&lt;/pre&gt;

&lt;p&gt;0RTT:&lt;/p&gt;
&lt;pre&gt;
% rm ticket
% cli -s ticket 127.0.0.1 443
% cat early-data.txt - | cli -s ticket 127.0.0.1 443
&lt;/pre&gt;

&lt;/div&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html</id><title type="text">「積み木の水槽」問題の Haskell での回答を読み解く</title><updated>2018-02-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;「積み木の水槽」問題の Haskell での回答を読み解く&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-02-04" itemprop="datePublished"&gt;
        Feb 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;今朝，バイト先で&lt;a href="http://nabetani.sakura.ne.jp/hena/ord13blocktup/"&gt;「積み木の水槽」問題&lt;/a&gt;の &lt;a href="https://rosettacode.org/wiki/Water_collected_between_towers#Haskell"&gt;Haskell での回答&lt;/a&gt;について話題になりました． リンク先の解答を見ると，恐ろしいことに，一行で書けてしまいます(正しくは，この解答では &lt;code&gt;nabetani&lt;/code&gt; さんの問題は解けませんが…)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- 2 == solve [1,5,3,7,2]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;solve &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; filter (&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;) &lt;span class="fu"&gt;.&lt;/span&gt; (zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;普通の Haskeller であれば，これぐらい目コンパイルして振る舞いを読み解くのは朝飯前でしょうが，Haskell 初学者のために簡単な解説を残しておこうかなと思います．&lt;/p&gt;
&lt;h2 id="手直し"&gt;手直し&lt;/h2&gt;
&lt;p&gt;前述したとおり，そもそもこれでは &lt;code&gt;nabetani&lt;/code&gt; さんの問題は解けないので，解けるように手直しします． もちろん &lt;strong&gt;1行で&lt;/strong&gt; ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;solve &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; fmap (sum &lt;span class="fu"&gt;.&lt;/span&gt; (zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)) &lt;span class="fu"&gt;.&lt;/span&gt; fmap (read &lt;span class="fu"&gt;.&lt;/span&gt; (&lt;span class="fu"&gt;:&lt;/span&gt; []))) &lt;span class="fu"&gt;.&lt;/span&gt; words &lt;span class="fu"&gt;.&lt;/span&gt; fmap (bool &lt;span class="ch"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class="fu"&gt;/=&lt;/span&gt;) &lt;span class="ch"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Data.List&lt;/code&gt; と &lt;code&gt;Data.Bool&lt;/code&gt; を &lt;code&gt;import&lt;/code&gt; してる前提だが，一応一行で書けた． 雑に直したのでもう少し短くできるような気もしますが，まぁそもそも本質的なところでないので勘弁してください．&lt;/p&gt;
&lt;p&gt;ちなみに，そもそもなんで元のコードでは解けないのかというと，&lt;code&gt;nabetani&lt;/code&gt; さんの問題には &lt;code&gt;0&lt;/code&gt; が含むからだ． しかし，&lt;code&gt;0&lt;/code&gt; で水槽を切り分けてあげて，元の解答を &lt;code&gt;map&lt;/code&gt; してあげれば良いだけなのでコアのところはそのまんま(&lt;code&gt;filter (&amp;gt; 0)&lt;/code&gt; は要らない気がしたので消したけど)．&lt;/p&gt;
&lt;h2 id="読み解く"&gt;読み解く&lt;/h2&gt;
&lt;p&gt;手直しした最終的なコードはテストコードと共に&lt;a href="https://gist.github.com/matsubara0507/10a44fb2a9676bde9658c3eeec456676"&gt;ココ&lt;/a&gt;にあげた．&lt;/p&gt;
&lt;h3 id="トップダウンに"&gt;トップダウンに&lt;/h3&gt;
&lt;p&gt;順に読み解く． Haskell でプログラミングするとき(というか関数型プログラミング)はトップダウンに書いていくのが基本なので，読み解くときも上から順に切り分けてく．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="ot"&gt;solve ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;solve &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; fmap countWater &lt;span class="fu"&gt;.&lt;/span&gt; splitTank&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;span class="ot"&gt;splitTank ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;String&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;splitTank &lt;span class="fu"&gt;=&lt;/span&gt;  words &lt;span class="fu"&gt;.&lt;/span&gt; fmap (bool &lt;span class="ch"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class="fu"&gt;/=&lt;/span&gt;) &lt;span class="ch"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;&lt;span class="ot"&gt;countWater ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;countWater &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; (zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)) &lt;span class="fu"&gt;.&lt;/span&gt; fmap (read &lt;span class="fu"&gt;.&lt;/span&gt; (&lt;span class="fu"&gt;:&lt;/span&gt; []))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;splitTank&lt;/code&gt; 関数は &lt;code&gt;0&lt;/code&gt; を区切り文字として文字列を切り分けてるだけだ． 悲しいことに，Haskell (というか GHC)の標準モジュールには「任意の文字で文字列を切り分ける」関数がない． なので，&lt;code&gt;0&lt;/code&gt; だけを空白 &lt;code&gt;' '&lt;/code&gt; に置換してから，&lt;code&gt;words&lt;/code&gt; で切り分けている(空白で切り分ける関数 &lt;code&gt;words&lt;/code&gt; は何故か標準にある)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;countWater&lt;/code&gt; 関数が各水槽の水の数を数え上げており，それを最後に総和 &lt;code&gt;sum&lt;/code&gt; しているだけだ．&lt;/p&gt;
&lt;h3 id="fmap-はわかるよね"&gt;&lt;code&gt;fmap&lt;/code&gt; はわかるよね？&lt;/h3&gt;
&lt;p&gt;ちなみに，さっきから出てきている &lt;code&gt;fmap&lt;/code&gt; という関数はわかりますよね？ 多くの言語でも導入されている，リストや配列の各要素に関数を適用する関数(あるいはメソッド) &lt;code&gt;map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt; をより一般化したものだ． 今回はリストにしか使わないので &lt;code&gt;map&lt;/code&gt; と同義だと考えてくれていい(hlint で注意されるので，&lt;code&gt;fmap&lt;/code&gt; と書く癖がついた)．&lt;/p&gt;
&lt;h3 id="コアの部分"&gt;コアの部分&lt;/h3&gt;
&lt;p&gt;さて，本題でもある &lt;code&gt;countWater&lt;/code&gt; 関数を読み解く． まずは切り分けよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="ot"&gt;countWater ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;countWater &lt;span class="fu"&gt;=&lt;/span&gt; sum &lt;span class="fu"&gt;.&lt;/span&gt; toWaterLine &lt;span class="fu"&gt;.&lt;/span&gt; toInts&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="ot"&gt;toInts ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;toInts &lt;span class="fu"&gt;=&lt;/span&gt; fmap (read &lt;span class="fu"&gt;.&lt;/span&gt; (&lt;span class="fu"&gt;:&lt;/span&gt; []))&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt;&lt;span class="ot"&gt;toWaterLine ::&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt;toWaterLine &lt;span class="fu"&gt;=&lt;/span&gt; zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) &lt;span class="fu"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toInts&lt;/code&gt; 関数は数列の文字列から数値のリストに変換している． Haskell で文字列を任意の型に変換するには &lt;code&gt;read :: String -&amp;gt; a&lt;/code&gt; 関数を使う． Haskell において &lt;code&gt;String = [Char]&lt;/code&gt; なので，&lt;code&gt;fmap (: [])&lt;/code&gt; をして &lt;code&gt;String&lt;/code&gt; のリストに変換し，各文字列を &lt;code&gt;read&lt;/code&gt; をしているというわけだ(&lt;code&gt;singleton&lt;/code&gt; みたいな関数が標準にあればいいのに)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;toWaterLine&lt;/code&gt; 関数が水槽の各列の水の量を計算し，&lt;code&gt;sum&lt;/code&gt; で総和している． なので，重要なのは &lt;code&gt;toWaterLine&lt;/code&gt; 関数だ． &lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; 演算子や &lt;code&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt; 演算子などがあって意味不明かもしれないが，この辺りはポイントフリーにするためのツールみたいなもので，アルゴリズムの本質的な部分ではないよ．&lt;/p&gt;
&lt;h3 id="関数も-monad-型クラスのインスタンス"&gt;関数も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; 演算子や &lt;code&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt; 演算子が何をしているかと言うのは &lt;strong&gt;関数型 &lt;code&gt;(-&amp;gt;) a&lt;/code&gt; も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス&lt;/strong&gt; だという事実を知っていれば簡単に読めますね． Haskell 界隈では常識(要出典)なので，説明しなくても良いかもしれないが，初学者のために念のためしておく．&lt;/p&gt;
&lt;p&gt;それぞれの演算子の型は以下の通り(めんどいので &lt;code&gt;Monad&lt;/code&gt; で統一)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="ot"&gt;(&amp;lt;*&amp;gt;) ::&lt;/span&gt; &lt;span class="dt"&gt;Monad&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; m (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m b&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;span class="ot"&gt;(=&amp;lt;&amp;lt;) ::&lt;/span&gt; &lt;span class="dt"&gt;Monad&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，前述したとおり，関数型 &lt;code&gt;(c -&amp;gt;)&lt;/code&gt; も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンスなので，&lt;code&gt;m = (c -&amp;gt;)&lt;/code&gt; と置き換えれる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="ot"&gt;(&amp;lt;*&amp;gt;) ::&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="ot"&gt;(=&amp;lt;&amp;lt;) ::&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;便利そうなコンビネーターになった． なので，&lt;code&gt;toWaterLine&lt;/code&gt; 関数のこれらの演算子を同様のラムダ式で置き換えてあげよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="ot"&gt;toWaterLine ::&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;toWaterLine&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) ((\ys &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (zipWith min &lt;span class="fu"&gt;.&lt;/span&gt; scanl1 max &lt;span class="fu"&gt;$&lt;/span&gt; ys) (scanr1 max ys)) xs) xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) ((\ys &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; zipWith min (scanl1 max ys) (scanr1 max ys)) xs) xs&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class="fu"&gt;-&lt;/span&gt;) (zipWith min (scanl1 max xs) (scanr1 max xs)) xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ついでに，他の言語の人では分かりにくい演算子も置き換えたので，これでどの言語の人でも読めるはずだ．&lt;/p&gt;
&lt;h3 id="アルゴリズム"&gt;アルゴリズム&lt;/h3&gt;
&lt;p&gt;ここからは Haskell 関係ない． ひとつひとつ見ていこう．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scanl :: (b -&amp;gt; a -&amp;gt; b) -&amp;gt; b -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt; 関数は左畳み込み関数 &lt;code&gt;foldl :: (b -&amp;gt; a -&amp;gt; b) -&amp;gt; b -&amp;gt; [a] -&amp;gt; b&lt;/code&gt; の途中経過もリストで残したような関数だ． つまり &lt;code&gt;foldl f x xs = last $ scanl f x xs&lt;/code&gt; が成り立つ． &lt;code&gt;scanl1 :: (a -&amp;gt; a -&amp;gt; a) -&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt; 関数は初期値を無くしたバージョンだ． &lt;code&gt;scanr1&lt;/code&gt; は &lt;code&gt;scanl1&lt;/code&gt; の右畳み込みバージョン．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scanl max xs&lt;/code&gt; は左から順に，水槽の高さを比較して高い方を残しているので，各列の最も高い左側が残る． &lt;code&gt;scanr1 max xs&lt;/code&gt; は各列の最も高い右側が残る．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/water-towers-hs/water1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;そして，それらの低い方を残して，もとの高さを引く．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/water-towers-hs/water2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;すごいできた！&lt;/p&gt;
&lt;h2 id="試しに"&gt;試しに&lt;/h2&gt;
&lt;p&gt;次のテストコードを走らせてみた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- WalterTowers.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; print &lt;span class="fu"&gt;$&lt;/span&gt; all ((&lt;span class="fu"&gt;==&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; snd &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (show &lt;span class="fu"&gt;.&lt;/span&gt; solve &lt;span class="fu"&gt;.&lt;/span&gt; fst)) testSet&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;solve &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;&lt;span class="ot"&gt;testSet ::&lt;/span&gt; [(&lt;span class="dt"&gt;String&lt;/span&gt;, &lt;span class="dt"&gt;String&lt;/span&gt;)]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;testSet &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;  [ (&lt;span class="st"&gt;&amp;quot;83141310145169154671122&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;24&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;  , (&lt;span class="st"&gt;&amp;quot;923111128&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;45&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;  , (&lt;span class="st"&gt;&amp;quot;923101128&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" data-line-number="12"&gt;  , (&lt;span class="st"&gt;&amp;quot;903111128&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;9&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" data-line-number="13"&gt;  , (&lt;span class="st"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-14" data-line-number="14"&gt;  , (&lt;span class="st"&gt;&amp;quot;31&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-15" data-line-number="15"&gt;  , (&lt;span class="st"&gt;&amp;quot;412&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-16" data-line-number="16"&gt;  , (&lt;span class="st"&gt;&amp;quot;3124&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-17" data-line-number="17"&gt;  , (&lt;span class="st"&gt;&amp;quot;11111&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-18" data-line-number="18"&gt;  , (&lt;span class="st"&gt;&amp;quot;222111&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-19" data-line-number="19"&gt;  , (&lt;span class="st"&gt;&amp;quot;335544&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-20" data-line-number="20"&gt;  , (&lt;span class="st"&gt;&amp;quot;1223455321&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-21" data-line-number="21"&gt;  , (&lt;span class="st"&gt;&amp;quot;000&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-22" data-line-number="22"&gt;  , (&lt;span class="st"&gt;&amp;quot;000100020003121&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-23" data-line-number="23"&gt;  , (&lt;span class="st"&gt;&amp;quot;1213141516171819181716151413121&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;56&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-24" data-line-number="24"&gt;  , (&lt;span class="st"&gt;&amp;quot;712131415161718191817161514131216&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;117&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-25" data-line-number="25"&gt;  , (&lt;span class="st"&gt;&amp;quot;712131405161718191817161514031216&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;64&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-26" data-line-number="26"&gt;  , (&lt;span class="st"&gt;&amp;quot;03205301204342100&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-27" data-line-number="27"&gt;  , (&lt;span class="st"&gt;&amp;quot;0912830485711120342&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;18&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-28" data-line-number="28"&gt;  , (&lt;span class="st"&gt;&amp;quot;1113241120998943327631001&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;20&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-29" data-line-number="29"&gt;  , (&lt;span class="st"&gt;&amp;quot;7688167781598943035023813337019904732&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;41&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-30" data-line-number="30"&gt;  , (&lt;span class="st"&gt;&amp;quot;2032075902729233234129146823006063388&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;79&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-31" data-line-number="31"&gt;  , (&lt;span class="st"&gt;&amp;quot;8323636570846582397534533&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;44&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-32" data-line-number="32"&gt;  , (&lt;span class="st"&gt;&amp;quot;2142555257761672319599209190604843&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;41&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-33" data-line-number="33"&gt;  , (&lt;span class="st"&gt;&amp;quot;06424633785085474133925235&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;51&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-34" data-line-number="34"&gt;  , (&lt;span class="st"&gt;&amp;quot;503144400846933212134&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;21&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-35" data-line-number="35"&gt;  , (&lt;span class="st"&gt;&amp;quot;1204706243676306476295999864&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;21&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-36" data-line-number="36"&gt;  , (&lt;span class="st"&gt;&amp;quot;050527640248767717738306306596466224&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;29&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-37" data-line-number="37"&gt;  , (&lt;span class="st"&gt;&amp;quot;5926294098216193922825&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;65&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-38" data-line-number="38"&gt;  , (&lt;span class="st"&gt;&amp;quot;655589141599534035&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;29&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-39" data-line-number="39"&gt;  , (&lt;span class="st"&gt;&amp;quot;7411279689677738&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;34&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-40" data-line-number="40"&gt;  , (&lt;span class="st"&gt;&amp;quot;268131111165754619136819109839402&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;102&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-41" data-line-number="41"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stack runghc&lt;/code&gt; で走らせると．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack runghc WalterTowers.hs
True&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;こういうのを自分で思いつけるようになりたいね…&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html</id><title type="text">拡張可能直和型を引数に取る関数の定義 (Haskell)</title><updated>2018-01-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;拡張可能直和型を引数に取る関数の定義 (Haskell)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-01-31" itemprop="datePublished"&gt;
        Jan 31, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/extensible-package.html"&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;「&lt;a href="https://hackage.haskell.org/package/extensible"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; パッケージの楽しみ その２」です．&lt;/p&gt;
&lt;p&gt;拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1"&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; について，割とドキュメントには無い(？)ネタを書いておくシリーズ第二弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．&lt;/p&gt;
&lt;p&gt;また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="/posts/2017-11-28-fun-of-extensible-1.html"&gt;前回&lt;/a&gt;は拡張可能レコードの拡縮の話を書きました． その最後の方に，おまけとして拡張可能直和型の話を書きました． 実際に自分のプログラムで，この拡張可能直和型を使おうとしてみたんですが，パターンマッチが分からず分岐が出来なかったので調べました，ってのが今回のハナシ．&lt;/p&gt;
&lt;p&gt;今回の Haskell コードは基本的に&lt;a href="https://github.com/matsubara0507/test-extensible/blob/master/src/Sample/Variant.hs"&gt;コレ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="拡張可能直和型"&gt;拡張可能直和型&lt;/h2&gt;
&lt;p&gt;ここでは，Haskell の代数的データ型において&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;RGB&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;CMYK&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように複数の値コンストラクタをとり得る型を直和型ということにします(あんまり一般的ではない？)． このようなデータ型を extensible を使って書くと次のようになる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;rgb&amp;quot;  &amp;gt;: (Int,Int,Int)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;   , &lt;span class="st"&gt;&amp;quot;cmyk&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="dt"&gt;Int&lt;/span&gt;,&lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが拡張可能直和型である(と呼んでいる)． 例えば次のような，&lt;code&gt;Color&lt;/code&gt; 型の構造的に部分型である &lt;code&gt;RGB&lt;/code&gt; 型の値を &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:spread"&gt;&lt;code&gt;spread&lt;/code&gt;&lt;/a&gt; という関数を使って持ち上げることが出来る．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;RGB&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;rgb&amp;quot; &amp;gt;: (Int,Int,Int) ]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; color1 &lt;span class="fu"&gt;=&lt;/span&gt; embedAssoc &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;rgb &lt;span class="fu"&gt;@=&lt;/span&gt; (&lt;span class="dv"&gt;0&lt;/span&gt;,&lt;span class="dv"&gt;0&lt;/span&gt;,&lt;span class="dv"&gt;0&lt;/span&gt;)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;RGB&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; color2 &lt;span class="fu"&gt;=&lt;/span&gt; spread&lt;span class="ot"&gt; color1 ::&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに「拡張可能直和型」って単語は，ほぼほぼ造語です(すいません)． 作者さんは &lt;strong&gt;Extensible Variants&lt;/strong&gt; と書いているので，正確には拡張可能バリアント型ですかね． ML 系では「バリアント型」って単語は良く使われてますが，Haskell では馴染みが無いので「直和型」って単語を用います．&lt;/p&gt;
&lt;h2 id="パターンマッチ"&gt;パターンマッチ&lt;/h2&gt;
&lt;p&gt;ここからが本題． 例として次のような図形の型を用いる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; (&lt;span class="dt"&gt;Double&lt;/span&gt;, &lt;span class="dt"&gt;Double&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Circle&lt;/code&gt; が円で中心点の座標と半径を持ち，&lt;code&gt;Rect&lt;/code&gt; が矩形で左下と右上の座標を持つ． 例えば，図形の面積を求める関数 &lt;code&gt;area&lt;/code&gt; を書くときはパターンマッチを用いて次のように書きますよね．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="ot"&gt;area ::&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;area (&lt;span class="dt"&gt;Circle&lt;/span&gt; _ r) &lt;span class="fu"&gt;=&lt;/span&gt; pi &lt;span class="fu"&gt;*&lt;/span&gt; (r &lt;span class="fu"&gt;^&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;area (&lt;span class="dt"&gt;Rect&lt;/span&gt; (x1,y1) (x2,y2)) &lt;span class="fu"&gt;=&lt;/span&gt; abs (x2 &lt;span class="fu"&gt;-&lt;/span&gt; x1) &lt;span class="fu"&gt;*&lt;/span&gt; abs (y2 &lt;span class="fu"&gt;-&lt;/span&gt; y1)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では，この &lt;code&gt;Shape&lt;/code&gt; 型を拡張可能直和型で書いてみる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;circle&amp;quot; &amp;gt;: Circle&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;   , &lt;span class="st"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;   &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;   ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Point&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;x&amp;quot; &amp;gt;: Double, &amp;quot;y&amp;quot; &amp;gt;: Double ]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;  &lt;span class="dt"&gt;Circle&lt;/span&gt; (&lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;mid&amp;quot; &amp;gt;: Point, &amp;quot;r&amp;quot; &amp;gt;: Double ]) deriving (Show, Eq)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;  &lt;span class="dt"&gt;Rect&lt;/span&gt; (&lt;span class="dt"&gt;Record&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;ll&amp;quot; &amp;gt;: Point, &amp;quot;ur&amp;quot; &amp;gt;: Point ]) deriving (Show, Eq)&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Record&lt;/code&gt; は拡張可能レコードだ． 後の話の流れのために &lt;code&gt;newtype&lt;/code&gt; で &lt;code&gt;Circle&lt;/code&gt; 型と &lt;code&gt;Rect&lt;/code&gt; 型を定義したが，別に型エイリアスでもいい．&lt;/p&gt;
&lt;p&gt;問題はココからで，どうやって &lt;code&gt;area&lt;/code&gt; 関数を定義するか． (作者さんに聞いてしまえば早いんだけど)パッケージを漁ってたらそれらしい関数 &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Match.html#v:match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; があった． イロイロ試した結果，&lt;code&gt;match&lt;/code&gt; よりも &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Field.html#v:matchField"&gt;&lt;code&gt;matchField&lt;/code&gt;&lt;/a&gt; の方が使いやすかったので，こっちを使って次のように書ける．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="ot"&gt;area ::&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;area &lt;span class="fu"&gt;=&lt;/span&gt; matchField&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;circle &lt;span class="fu"&gt;@=&lt;/span&gt; (\(&lt;span class="dt"&gt;Circle&lt;/span&gt; s) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; pi &lt;span class="fu"&gt;*&lt;/span&gt; (s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;r) &lt;span class="fu"&gt;^&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;rect   &lt;span class="fu"&gt;@=&lt;/span&gt; ((&lt;span class="fu"&gt;*&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; width &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; height)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" data-line-number="7"&gt;width,&lt;span class="ot"&gt; height ::&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" data-line-number="8"&gt;width  (&lt;span class="dt"&gt;Rect&lt;/span&gt; s) &lt;span class="fu"&gt;=&lt;/span&gt; abs &lt;span class="fu"&gt;$&lt;/span&gt; s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;ur &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x &lt;span class="fu"&gt;-&lt;/span&gt; s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;ll &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" data-line-number="9"&gt;height (&lt;span class="dt"&gt;Rect&lt;/span&gt; s) &lt;span class="fu"&gt;=&lt;/span&gt; abs &lt;span class="fu"&gt;$&lt;/span&gt; s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;ur &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y &lt;span class="fu"&gt;-&lt;/span&gt; s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;ll &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;意外と簡単にできた！&lt;/p&gt;
&lt;p&gt;(なんでこれでうまくいくかを説明しようと思ったけど，ぼくには説明するのが難しすぎてやめた．) (ちなみに，すごい簡潔に書けるのは &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Wrapper.html#t:Wrapper"&gt;&lt;code&gt;Wrapper&lt;/code&gt;&lt;/a&gt; 型クラスのおかげだと思う．)&lt;/p&gt;
&lt;h2 id="型クラスを使う"&gt;型クラスを使う&lt;/h2&gt;
&lt;p&gt;ここからが拡張可能直和型のすごいところ(パターンマッチしかできないなら普通の直和型でもいいもんね…)． 型クラスを用いて次のようにも &lt;code&gt;area&lt;/code&gt; 関数を定義できる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  area ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;  area (&lt;span class="dt"&gt;Circle&lt;/span&gt; s) &lt;span class="fu"&gt;=&lt;/span&gt; pi &lt;span class="fu"&gt;*&lt;/span&gt; (s &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;r) &lt;span class="fu"&gt;^&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;  area &lt;span class="fu"&gt;=&lt;/span&gt; (&lt;span class="fu"&gt;*&lt;/span&gt;) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; width &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; height&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Forall&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt;) xs &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; (&lt;span class="dt"&gt;Variant&lt;/span&gt; xs) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;  area &lt;span class="fu"&gt;=&lt;/span&gt; matchField &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" data-line-number="12"&gt;    htabulateFor (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;KeyValue&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt;)) &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" data-line-number="13"&gt;      \_ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Field&lt;/span&gt; (&lt;span class="dt"&gt;Match&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; area &lt;span class="fu"&gt;.&lt;/span&gt; runIdentity)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Forall (KeyValue KnownSymbol Area) xs&lt;/code&gt; という型制約の直観的な解釈は，型レベルリスト &lt;code&gt;xs&lt;/code&gt; の全ての要素 &lt;code&gt;k &amp;gt;: v&lt;/code&gt; が &lt;code&gt;KnownSymbol k&lt;/code&gt; と &lt;code&gt;Area v&lt;/code&gt; を満たす，という意味だ． 即ち，拡張可能直和型の全ての要素が &lt;code&gt;Area&lt;/code&gt; 型クラスのインスタンスであれば，その拡張可能直和型は &lt;code&gt;Area&lt;/code&gt; 型クラスのインスタンスになり得るのだ． ちゃんと次のように動作する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; shape1&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;&lt;span class="dt"&gt;EmbedAt&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;(mkMembership &lt;span class="dv"&gt;0&lt;/span&gt;) (circle &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; (mid &lt;span class="fu"&gt;@=&lt;/span&gt; (x &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="fl"&gt;1.0&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; y &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="fl"&gt;2.0&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil) &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; r &lt;span class="fu"&gt;@=&lt;/span&gt; &lt;span class="fl"&gt;2.0&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil))&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;t shape1&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;&lt;span class="ot"&gt;shape1 ::&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;ghci&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; area shape1&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;&lt;span class="fl"&gt;12.566370614359172&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これの何がすごいかと言うと，例えば次のように &lt;code&gt;Shape&lt;/code&gt; 型を拡張しよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Triangle&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;  &lt;span class="dt"&gt;Triangle&lt;/span&gt; (&lt;span class="dt"&gt;Point&lt;/span&gt;, &lt;span class="dt"&gt;Point&lt;/span&gt;, &lt;span class="dt"&gt;Point&lt;/span&gt;) &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Show&lt;/span&gt;, &lt;span class="dt"&gt;Eq&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;  &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;circle&amp;quot; &amp;gt;: Circle&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;   , &lt;span class="st"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Rect&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;   , &lt;span class="st"&gt;&amp;quot;triangle&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Triangle&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般的な直和型の場合は，&lt;code&gt;Shape&lt;/code&gt; 型のパターンマッチしている部分を全て増やさないといけない． しかし，型クラスを用いた拡張可能直和型の関数であれば，次のようにインスタンスを増やすだけで良い．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Area&lt;/span&gt; &lt;span class="dt"&gt;Triangle&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;  area (&lt;span class="dt"&gt;Triangle&lt;/span&gt; (p1, p2, p3)) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;    abs ((p1 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x &lt;span class="fu"&gt;-&lt;/span&gt; p3 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x) &lt;span class="fu"&gt;*&lt;/span&gt; (p2 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y &lt;span class="fu"&gt;-&lt;/span&gt; p3 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y) &lt;span class="fu"&gt;-&lt;/span&gt; (p2 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x &lt;span class="fu"&gt;-&lt;/span&gt; p3 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;x) &lt;span class="fu"&gt;*&lt;/span&gt; (p1 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y &lt;span class="fu"&gt;-&lt;/span&gt; p3 &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;y)) &lt;span class="fu"&gt;/&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;書き込んでる行数は大差ないかもしれないが，例えばファイルを分けたりなど，より柔軟に関数を定義できる！&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;code&gt;area&lt;/code&gt; 関数は &lt;code&gt;a -&amp;gt; Double&lt;/code&gt; で返り値の型が &lt;code&gt;Double&lt;/code&gt; だったから楽だった． これが，例えば座標移動をする &lt;code&gt;nudge :: a -&amp;gt; Point -&amp;gt; a&lt;/code&gt; のように，返り値が &lt;code&gt;a&lt;/code&gt; なものは &lt;code&gt;Variant&lt;/code&gt; のインスタンスを定義するのが大変(&lt;a href="https://github.com/matsubara0507/test-extensible/blob/d5e58f59ad4b1a2f4809bbecd79eeffbe04eec51/src/Sample/Variant.hs#L94"&gt;頑張った&lt;/a&gt;)．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html</id><title type="text">AdC の Haskell 記事を Haskell で集めた</title><updated>2018-01-30T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;AdC の Haskell 記事を Haskell で集めた&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-01-30" itemprop="datePublished"&gt;
        Jan 30, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt; &lt;a href="/tags/scraping.html"&gt;scraping&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;昨年最後に，Haskell-jp へ以下の記事を寄稿しました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.jp/blog/posts/2017/advent-calendar-2017.html"&gt;Haskell Advent Calendar 2017 まとめ - Haskell-jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2017年のアドベントカレンダーに投稿された Haskell 記事を分類して紹介してるだけです． &lt;a href="https://scrapbox.io/miyamoen/Elm_Advent_Calendar_2017_まとめ"&gt;Elm のやつ&lt;/a&gt;を見かけて &lt;del&gt;パクリ&lt;/del&gt; オマージュしました．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;分類は温もりのある手作業ですが，Haskell 記事は機械的にあ集めました． 本記事はそのために作った Haskell プログラムに関するメモ書きです．&lt;/p&gt;
&lt;p&gt;全てのコードは以下のリポジトリにあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar"&gt;matsubara0507/haskell-advent-calendar - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に本質的な意味は無いんですが CLI として作っています．&lt;/p&gt;
&lt;h2 id="作る"&gt;作る&lt;/h2&gt;
&lt;p&gt;ゴールとしては，&lt;strong&gt;年を指定すると Qiita と ADVENTAR の全てのカレンダーをスクレイピングして，結果(Haskell 記事のリスト)を JSON ファイルに書き出す&lt;/strong&gt; プログラムを作る． Haskell に関する記事かどうかは，単純にカレンダーか記事のタイトルに “Haskell” という単語か含まれているかどうかで判断する．&lt;/p&gt;
&lt;h3 id="パッケージ"&gt;パッケージ&lt;/h3&gt;
&lt;p&gt;お世話になった主要なパッケージ達を先に示しておく(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/master/package.yaml"&gt;package.yaml&lt;/a&gt; を見れば十分なんだけどね)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/extensible"&gt;extensible&lt;/a&gt; : フィールド数の多いレコード型は拡張可能レコードにしちゃえ
&lt;ul&gt;
&lt;li&gt;フィールドへのアクセスには &lt;a href="https://hackage.haskell.org/package/lens"&gt;lens&lt;/a&gt; を用いる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/aeson"&gt;aeson&lt;/a&gt; : JSON の読み書きパッケージの金字塔
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/aeson-pretty"&gt;aeson-pretty&lt;/a&gt; : JSON を綺麗にインデントしてくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/scalpel-core"&gt;scalpel-core&lt;/a&gt; : スクレイパーパッケージ(core じゃなくて &lt;a href="https://hackage.haskell.org/package/scalpel"&gt;scalpel&lt;/a&gt; は Windows だとビルドめんどい)
&lt;ul&gt;
&lt;li&gt;Qiita の HTML の取得には &lt;a href="https://hackage.haskell.org/package/wreq"&gt;wreq&lt;/a&gt; を使った(操作が簡単なので)&lt;/li&gt;
&lt;li&gt;ADVENTAR は React 製なので &lt;a href="https://hackage.haskell.org/package/webdriver"&gt;webdriver&lt;/a&gt; で Selenium を使う&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/shelly"&gt;shelly&lt;/a&gt; : スクレイピングが攻撃にならんよう1秒スリープ(OSに依存せずに書ける)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/conduit-combinators"&gt;conduit-combinators&lt;/a&gt; : ストリーミングパッケージの金字塔
&lt;ul&gt;
&lt;li&gt;コッチの方が &lt;a href="https://hackage.haskell.org/package/conduit"&gt;conduit&lt;/a&gt; より名前の衝突なく関数が使えるので(大本は同じ)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/optparse-applicative"&gt;optparse-applicative&lt;/a&gt; : CLI の引数をいい感じに処理してくれる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回の主目的ではないが，このプログラムは extensible の拡張可能レコードを用いた optparse-applicative のサンプルコードにもなっていると思う．&lt;/p&gt;
&lt;h3 id="記事の型を考える"&gt;記事の型を考える&lt;/h3&gt;
&lt;p&gt;最低限必要なのは，記事のタイトルと URL である． 他に，記事の著者と記事が投稿されたカレンダー・日付があった方が，あとで列挙するときに映えるだろう． ということで，以下の型を考えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="ot"&gt;{-# LANGUAGE DataKinds         #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;&lt;span class="ot"&gt;{-# LANGUAGE TypeOperators     #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (&lt;span class="dt"&gt;Text&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;   &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;    , &lt;span class="st"&gt;&amp;quot;auther&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;    , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" data-line-number="11"&gt;    , &lt;span class="st"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" data-line-number="12"&gt;    , &lt;span class="st"&gt;&amp;quot;calendar&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Calendar&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" data-line-number="13"&gt;    , &lt;span class="st"&gt;&amp;quot;category&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" data-line-number="14"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" data-line-number="16"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" data-line-number="17"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" data-line-number="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" data-line-number="19"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Calendar&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" data-line-number="20"&gt;   &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" data-line-number="21"&gt;    , &lt;span class="st"&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" data-line-number="22"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;category&amp;quot;&lt;/code&gt; は後の(手作業による)分類で用いる． extensible による拡張可能レコードな型だが，何となく読めるだろう(分からなかったググって)．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;インターフェースを揃えるために，&lt;code&gt;Qiita&lt;/code&gt; や &lt;code&gt;ADVENTAR&lt;/code&gt; って感じの型から 記事のリスト &lt;code&gt;[Post]&lt;/code&gt; を返す型クラスを定義しておく(正直あんまり意味はない)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;&lt;span class="ot"&gt;  getPosts ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;順にインスタンスを定義していく．&lt;/p&gt;
&lt;h3 id="adventar"&gt;ADVENTAR&lt;/h3&gt;
&lt;p&gt;&lt;a href="/posts/2017-12-02-re-adventar-slack-bot-part1.html"&gt;ADVENTAR は昔集めた&lt;/a&gt;ので簡単だ．&lt;/p&gt;
&lt;h4 id="カレンダーの記事を集める"&gt;カレンダーの記事を集める&lt;/h4&gt;
&lt;p&gt;まずは，カレンダーの URL を与えたら記事のリストを返す関数を書く．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Data.Text.IO&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;TIO&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Shelly&lt;/span&gt; (shelly, sleep)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Test.WebDriver&lt;/span&gt; (&lt;span class="dt"&gt;WDConfig&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Text.HTML.Scalpel.Core&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;  getPosts (&lt;span class="dt"&gt;Adventar&lt;/span&gt; url conf) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;    html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtmlWith conf url&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;    posts &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe [] &lt;span class="fu"&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;  TIO.putStrLn &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;  shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;  return posts&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" data-line-number="17"&gt;&lt;span class="ot"&gt;scrapeHtml ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" data-line-number="18"&gt;scrapeHtml &lt;span class="fu"&gt;=&lt;/span&gt; flip scrapeStringLike&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-20" data-line-number="20"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-22" data-line-number="22"&gt;&lt;span class="ot"&gt;fetchHtmlWith ::&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-23" data-line-number="23"&gt;fetchHtmlWith &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-24" data-line-number="24"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-25" data-line-number="25"&gt;&lt;span class="ot"&gt;postsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-26" data-line-number="26"&gt;postsScraper &lt;span class="fu"&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ADVENTAR のカレンダーのページは React 製(?)かなんからしく，静的な HTML からでは記事を参照することが出来ない そのために，Selenium などのヘッドレスブラウザを使ってアクセスする． &lt;code&gt;WDConfig&lt;/code&gt; は Haskell から Selenium などを操作するための Web Driver の設定値の型である．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shelly $ sleep 1&lt;/code&gt; はDOS攻撃にならないように，ここで処理を1秒止めるために書いている．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fetchHtmlWith&lt;/code&gt; と &lt;code&gt;postsScraper&lt;/code&gt; はこんな感じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="ot"&gt;fetchHtmlWith ::&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;fetchHtmlWith config url &lt;span class="fu"&gt;=&lt;/span&gt; runSession config &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;  openPage (unpack url)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;  html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getSource&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;  closeSession&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;  return html&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Default&lt;/span&gt; (def)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="ot"&gt;postsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;postsScraper &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;  chroots (&lt;span class="st"&gt;&amp;quot;table&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;mod-entryList&amp;quot;&lt;/span&gt;] &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;) entryScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;&lt;span class="ot"&gt;entryScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;entryScraper &lt;span class="fu"&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title    &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; titleScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;auther   &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; autherScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url      &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; urlScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;date     &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; dateScraper&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;calendar &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; pure def&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-14" data-line-number="14"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;category &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; pure &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-15" data-line-number="15"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-17" data-line-number="17"&gt;&lt;span class="ot"&gt;autherScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-18" data-line-number="18"&gt;autherScraper &lt;span class="fu"&gt;=&lt;/span&gt; text &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;td&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;mod-entryList-user&amp;quot;&lt;/span&gt;] &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;span&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-20" data-line-number="20"&gt;&lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;xxxScraper&lt;/code&gt; を全部書いてると長くなるので割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Adventar/Scraper.hs"&gt;ココ&lt;/a&gt;に全部ある)．&lt;/p&gt;
&lt;h4 id="脱線-拡張可能レコードの-etc.."&gt;脱線 : 拡張可能レコードの etc..&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-60--64--61--62-"&gt;&lt;code&gt;(&amp;lt;@=&amp;gt;)&lt;/code&gt;&lt;/a&gt; 演算子は拡張可能レコードの値を設定する演算子 &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-64--61-"&gt;&lt;code&gt;(@=)&lt;/code&gt;&lt;/a&gt; のモナディック版(正確には &lt;code&gt;Functor&lt;/code&gt;)というイメージだ． &lt;strong&gt;かなり&lt;/strong&gt; 直感的に型を書くと次のようになる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="ot"&gt;(@=) ::&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; v &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (k &lt;span class="fu"&gt;:&amp;gt;&lt;/span&gt; v)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;span class="ot"&gt;(&amp;lt;@=&amp;gt;) ::&lt;/span&gt; &lt;span class="dt"&gt;Functor&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f v &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f (k &lt;span class="fu"&gt;:&amp;gt;&lt;/span&gt; v)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコードはフィールド名とフィールドの値の型レベル辞書みたいなモノであり，&lt;code&gt;k :&amp;gt; v&lt;/code&gt; が辞書のイチ要素というイメージだ． &lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:-60-:"&gt;&lt;code&gt;(&amp;lt;:)&lt;/code&gt;&lt;/a&gt; で &lt;code&gt;[kv1, kv2, ... kvn]&lt;/code&gt; のような辞書を構築する(&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:nil"&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/a&gt; が空リスト)．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:hsequence"&gt;&lt;code&gt;hsequence&lt;/code&gt;&lt;/a&gt; 関数で &lt;code&gt;[f (k1 :&amp;gt; v1), ..., f (kn :&amp;gt; vn)] -&amp;gt; f [(k1 :&amp;gt; v1), ... (kn :&amp;gt; vn)]&lt;/code&gt; という型の変換をしているイメージだ(あくまでイメージね)．&lt;/p&gt;
&lt;h2 id="section-3"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;def&lt;/code&gt; は &lt;a href="https://hackage.haskell.org/package/data-default"&gt;data-default&lt;/a&gt; パッケージの値で，&lt;a href="https://hackage.haskell.org/package/data-default-0.7.1.1/docs/Data-Default.html#t:Default"&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; 型クラスのインスタンスにしないと使えない． 拡張可能レコードのインスタンス化の説明はめんどくさいので割愛する． &lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Default.hs"&gt;ココ&lt;/a&gt;に書いてあるので参照してください．&lt;/p&gt;
&lt;h4 id="カレンダーを加える"&gt;カレンダーを加える&lt;/h4&gt;
&lt;p&gt;このままだとカレンダーが &lt;code&gt;def&lt;/code&gt; のまま(URL もカレンダー名も &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;)なので，スクレイピングしたカレンダーの情報を加えよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Control.Lens&lt;/span&gt; (set)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (strip)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;getPosts (&lt;span class="dt"&gt;Adventar&lt;/span&gt; url conf) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;  html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtmlWith conf url&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" data-line-number="7"&gt;    posts &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe [] &lt;span class="fu"&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" data-line-number="8"&gt;    calendar&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" data-line-number="9"&gt;        &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title &lt;span class="fu"&gt;@=&lt;/span&gt; fromMaybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; (scrapeHtml headerTitleScraper html)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-10" data-line-number="10"&gt;       &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url   &lt;span class="fu"&gt;@=&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-11" data-line-number="11"&gt;       &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-12" data-line-number="12"&gt;  TIO.putStrLn &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-13" data-line-number="13"&gt;  shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-14" data-line-number="14"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; fmap (set &lt;span class="fu"&gt;#&lt;/span&gt;calendar calendar) posts&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-15" data-line-number="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-16" data-line-number="16"&gt;&lt;span class="ot"&gt;headerTitleScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-17" data-line-number="17"&gt;headerTitleScraper &lt;span class="fu"&gt;=&lt;/span&gt; strip &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; text (&lt;span class="st"&gt;&amp;quot;head&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;strip&lt;/code&gt; は文字列の前後の空白などを排除してくれる．&lt;/p&gt;
&lt;h4 id="カレンダーを集める"&gt;カレンダーを集める&lt;/h4&gt;
&lt;p&gt;カレンダーから記事を集めるだとまだ半分． カレンダー自体を集めないと全ての記事を確認できない．&lt;/p&gt;
&lt;p&gt;ADVENTAR の場合は，&lt;code&gt;&amp;quot;https://adventar.org/calendars?year=2017&lt;/code&gt; という URL で任意の年のカレンダーの一覧を取得できる． この URL からカレンダーの URL のリストを返す関数を定義する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="ot"&gt;getUrls ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;getUrls url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;  html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtml url&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; fromMaybe [] (scrapeHtml calendarUrlsScraper html)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" data-line-number="6"&gt;&lt;span class="ot"&gt;fetchHtml ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" data-line-number="7"&gt;fetchHtml url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" data-line-number="8"&gt;  response &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; get &lt;span class="fu"&gt;$&lt;/span&gt; unpack url&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" data-line-number="9"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; fromMaybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; (decodeConvertText &lt;span class="fu"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;UTF8&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; response &lt;span class="fu"&gt;^.&lt;/span&gt; responseBody)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" data-line-number="11"&gt;&lt;span class="ot"&gt;calendarUrlsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" data-line-number="12"&gt;calendarUrlsScraper &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" data-line-number="13"&gt;  chroots (&lt;span class="st"&gt;&amp;quot;div&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;mod-calendarList&amp;quot;&lt;/span&gt;] &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ul&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;li&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-14" data-line-number="14"&gt;    url &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; attr &lt;span class="st"&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-15" data-line-number="15"&gt;      (&lt;span class="st"&gt;&amp;quot;div&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;mod-calendarList-title&amp;quot;&lt;/span&gt;]) &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-16" data-line-number="16"&gt;    return &lt;span class="fu"&gt;$&lt;/span&gt; append &lt;span class="st"&gt;&amp;quot;http://adventar.org&amp;quot;&lt;/span&gt; url&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こっちは静的な HTML で動作するのでヘッドレスブラウザは使わない． ただ単に HTML の文字列さへ手に入ればいいので，扱うのが簡単な wreq を今回は使った． &lt;code&gt;get&lt;/code&gt; という関数に URL を適用するだけで，HTML (型は &lt;code&gt;ByteString&lt;/code&gt;) を返してくれる．&lt;/p&gt;
&lt;h5 id="vs.文字コード"&gt;vs. 文字コード&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;ByteString&lt;/code&gt; から &lt;code&gt;Text&lt;/code&gt; への変換はかなりめんどくさい． というのも，文字コード回りで簡単に例外を投げるからだ．&lt;/p&gt;
&lt;p&gt;例えば，記事のリンク先が PDF のようなバイナリファイルだと UTF-8 の &lt;code&gt;Text&lt;/code&gt; に変換できなくて例外を投げてくる． もちろん，カレンダーの URL を集める場合は，そんな心配は無いんだけど，Qiita のところで困る…&lt;/p&gt;
&lt;h2 id="section-4"&gt;&lt;/h2&gt;
&lt;p&gt;ちゃんとやるなら例外に合わせて処理を分けるべきだが，めんどくさいので例外を返す場合は &lt;code&gt;Nothing&lt;/code&gt; が返ってくる &lt;a href="https://hackage.haskell.org/package/text-conversions"&gt;text-conversions&lt;/a&gt; パッケージを文字列変換に用いた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; decodeConvertText (&lt;span class="dt"&gt;UTF8&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt;))&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; decodeConvertText (&lt;span class="dt"&gt;UTF8&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;\xc3\x28&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt;))&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;&lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="インスタンスの更新"&gt;インスタンスの更新&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;getUrls&lt;/code&gt; を使ってインスタンスを書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;  getPosts (&lt;span class="dt"&gt;Adventar&lt;/span&gt; url conf) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;    urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getUrls url&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;    mconcat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mapM (getPosts&amp;#39; conf) urls&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;&lt;span class="ot"&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;getPosts&amp;#39; conf url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;  &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getPosts'&lt;/code&gt; は，もともとの &lt;code&gt;getPosts&lt;/code&gt; 関数と同じ実装である． 扱うのが楽になるように，スマートコンストラクタを定義しておく．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="ot"&gt;adventar ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;adventar year &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;  &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;https://adventar.org/calendars?year=&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; year&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;&lt;span class="ot"&gt;mkDriver ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;WDConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;mkDriver host port &lt;span class="fu"&gt;=&lt;/span&gt; useBrowser chrome &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;  defaultConfig { wdHost &lt;span class="fu"&gt;=&lt;/span&gt; T.unpack host, wdPort &lt;span class="fu"&gt;=&lt;/span&gt; port }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="haskell-の記事か否か"&gt;Haskell の記事か否か&lt;/h4&gt;
&lt;p&gt;分類はカレンダーか記事のタイトルに「Haskell」という単語か含まれるか否かで判断する． 雑だけど，自然言語処理とか良く分からないので勘弁して．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="ot"&gt;isHaskellPost ::&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;isHaskellPost post &lt;span class="fu"&gt;=&lt;/span&gt; any (&lt;span class="st"&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`isInfixOf`&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;  [ post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;  , post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;calendar &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数を使って &lt;code&gt;filter&lt;/code&gt; すれば良い．&lt;/p&gt;
&lt;h4 id="実行"&gt;実行&lt;/h4&gt;
&lt;p&gt;Selenium を &lt;code&gt;localhost:4444&lt;/code&gt; として何らかの方法で起動しておく．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;&lt;span class="fu"&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;set &lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dt"&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; fmap (filter isHaskellPost) &lt;span class="fu"&gt;.&lt;/span&gt; getPosts &lt;span class="fu"&gt;$&lt;/span&gt; adventar &lt;span class="st"&gt;&amp;quot;2017&amp;quot;&lt;/span&gt; (mkDriver &lt;span class="st"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt; &lt;span class="dv"&gt;4444&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;get posts on http&lt;span class="fu"&gt;://&lt;/span&gt;adventar&lt;span class="fu"&gt;.&lt;/span&gt;org&lt;span class="fu"&gt;/&lt;/span&gt;&lt;span class="dv"&gt;1111&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;&lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すっごい時間かかるよ(笑)&lt;/p&gt;
&lt;h3 id="qiita"&gt;Qiita&lt;/h3&gt;
&lt;p&gt;やることは基本同じなのでサクッと．&lt;/p&gt;
&lt;h4 id="カレンダーの-url-を集める"&gt;カレンダーの URL を集める&lt;/h4&gt;
&lt;p&gt;Qiita の場合，カレンダーの一覧は複数ページに分かれている(URL は &lt;code&gt;https://qiita.com/advent-calendar/2017/calendars?page=1&lt;/code&gt; って感じ)． 無限リストで試しにカレンダーの一覧を取得し，ひとつも取得できなければ止めるようにする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="ot"&gt;getUrls ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;getUrls _ [] &lt;span class="fu"&gt;=&lt;/span&gt; pure []&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;getUrls url (n&lt;span class="fu"&gt;:&lt;/span&gt;ns) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;  result &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; func n&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; result &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;    [] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; pure result&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;    _  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; mappend result &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getUrls url ns&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;    func index &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;      html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtml &lt;span class="fu"&gt;$&lt;/span&gt; calendarsUrl url index&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;      shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;      return &lt;span class="fu"&gt;$&lt;/span&gt; fromMaybe [] (scrapeHtml calendarUrlsScraper html)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;&lt;span class="ot"&gt;calendarsUrl ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;calendarsUrl url index &lt;span class="fu"&gt;=&lt;/span&gt; mconcat [url, &lt;span class="st"&gt;&amp;quot;?page=&amp;quot;&lt;/span&gt;, pack &lt;span class="fu"&gt;$&lt;/span&gt; show index]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" data-line-number="17"&gt;&lt;span class="ot"&gt;calendarUrlsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" data-line-number="18"&gt;calendarUrlsScraper &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" data-line-number="19"&gt;  chroots (&lt;span class="st"&gt;&amp;quot;table&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;adventCalendarList&amp;quot;&lt;/span&gt;] &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;tbody&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-20" data-line-number="20"&gt;    url &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; attr &lt;span class="st"&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-21" data-line-number="21"&gt;      (&lt;span class="st"&gt;&amp;quot;td&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;@:&lt;/span&gt; [hasClass &lt;span class="st"&gt;&amp;quot;adventCalendarList_calendarTitle&amp;quot;&lt;/span&gt;]) &lt;span class="fu"&gt;//&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-22" data-line-number="22"&gt;    return &lt;span class="fu"&gt;$&lt;/span&gt; append &lt;span class="st"&gt;&amp;quot;http://qiita.com&amp;quot;&lt;/span&gt; url&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんかもっといい方法ありそう．&lt;/p&gt;
&lt;h4 id="カレンダーを集める-1"&gt;カレンダーを集める&lt;/h4&gt;
&lt;p&gt;インスタンスを定義しよう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;  getPosts (&lt;span class="dt"&gt;Qiita&lt;/span&gt; url) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;    urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; getUrls url [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="fu"&gt;..&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;    mconcat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mapM getPosts&amp;#39; urls&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;&lt;span class="ot"&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;getPosts&amp;#39; url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;  html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtml url&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;  &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;    posts &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe [] &lt;span class="fu"&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;    calendar&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-14" data-line-number="14"&gt;        &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title &lt;span class="fu"&gt;@=&lt;/span&gt; fromMaybe &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; (scrapeHtml headerTitleScraper html)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-15" data-line-number="15"&gt;       &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url   &lt;span class="fu"&gt;@=&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-16" data-line-number="16"&gt;       &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-17" data-line-number="17"&gt;  TIO.putStrLn &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-18" data-line-number="18"&gt;  shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-19" data-line-number="19"&gt;  return &lt;span class="fu"&gt;$&lt;/span&gt; fmap (set &lt;span class="fu"&gt;#&lt;/span&gt;calendar calendar) posts&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-20" data-line-number="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-21" data-line-number="21"&gt;&lt;span class="ot"&gt;postsScraper ::&lt;/span&gt; &lt;span class="dt"&gt;Scraper&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-22" data-line-number="22"&gt;postsScraper &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;長いのでスクレイパーは割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Qiita/Scraper.hs"&gt;ココ&lt;/a&gt;にある)． &lt;code&gt;fetchHtml&lt;/code&gt; 関数は ADVENTAR のと同じ．&lt;/p&gt;
&lt;h4 id="記事のタイトルを取得"&gt;記事のタイトルを取得&lt;/h4&gt;
&lt;p&gt;ADVENTAR と違い，Qiita のカレンダーには各記事のタイトルが書いてない． さすがに「なんか書く」で Haskell 記事か否かを判断するのもなぁと思い，どーーーー考えても時間がかかるけど，記事をひとつひとつスクレイピングしてタイトルを取ってくることにした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="ot"&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;URL&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; [&lt;span class="dt"&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;getPosts&amp;#39; url &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" data-line-number="4"&gt;  TIO.putStrLn &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-5" data-line-number="5"&gt;  shelly &lt;span class="fu"&gt;$&lt;/span&gt; sleep &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-6" data-line-number="6"&gt;  mapM updatePostTitle&amp;#39; &lt;span class="fu"&gt;$&lt;/span&gt; set &lt;span class="fu"&gt;#&lt;/span&gt;calendar calendar &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; posts&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-8" data-line-number="8"&gt;&lt;span class="ot"&gt;updatePostTitle ::&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-9" data-line-number="9"&gt;updatePostTitle post &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-10" data-line-number="10"&gt;html &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; fetchHtml&amp;#39; &lt;span class="fu"&gt;$&lt;/span&gt; post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-11" data-line-number="11"&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-12" data-line-number="12"&gt;  title &lt;span class="fu"&gt;=&lt;/span&gt; fromMaybe (post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title) &lt;span class="fu"&gt;$&lt;/span&gt; scrapeHtml headerTitleScraper html&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-13" data-line-number="13"&gt;return &lt;span class="fu"&gt;$&lt;/span&gt; post &lt;span class="fu"&gt;&amp;amp;&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title &lt;span class="fu"&gt;.~&lt;/span&gt; title&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-15" data-line-number="15"&gt;&lt;span class="ot"&gt;updatePostTitle&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-16" data-line-number="16"&gt;updatePostTitle&amp;#39; post &lt;span class="fu"&gt;=&lt;/span&gt; shelly (sleep &lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; updatePostTitle post&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;updatePostTitle'&lt;/code&gt; 関数で(1秒だけスリープしつつ)タイトルをスクレイピングして更新している．&lt;/p&gt;
&lt;h4 id="実行してみる"&gt;実行してみる&lt;/h4&gt;
&lt;p&gt;スマートコンストラクタを作って．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="ot"&gt;qiita ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;qiita year &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;  &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="fu"&gt;$&lt;/span&gt; mconcat [&lt;span class="st"&gt;&amp;quot;https://qiita.com/advent-calendar/&amp;quot;&lt;/span&gt;, year, &lt;span class="st"&gt;&amp;quot;/calendars&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;&lt;span class="fu"&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;set &lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dt"&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; fmap (filter isHaskellPost) &lt;span class="fu"&gt;.&lt;/span&gt; getPosts &lt;span class="fu"&gt;$&lt;/span&gt; qiita &lt;span class="st"&gt;&amp;quot;2017&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" data-line-number="4"&gt;&lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;悲しいことに，鬼のように時間がかかるのに…メモリダンプします… まぁわかってたけどね！&lt;/p&gt;
&lt;h3 id="ストリーミング"&gt;ストリーミング&lt;/h3&gt;
&lt;p&gt;こういうパフォーマンス的なことは自分は詳しくない． しかしこういうのはたぶん，要らないデータ(&lt;code&gt;filter&lt;/code&gt; して捨てるデータ)をいつ迄も保持してるのが悪いので(たぶん)，ストリーミングパッケージを使って効率よくリソース管理してもらおう．&lt;/p&gt;
&lt;p&gt;今回は Conduit を使う． 最初は Pipes を使ってみたけど，よくわからなくてやめた．&lt;/p&gt;
&lt;h2 id="section-5"&gt;&lt;/h2&gt;
&lt;p&gt;まずはインターフェースの型クラスを書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb19-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Conduit&lt;/span&gt; (&lt;span class="dt"&gt;Source&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-3" data-line-number="3"&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-4" data-line-number="4"&gt;&lt;span class="ot"&gt;  getPosts ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはそれぞれのインスタンスを書き換えるだけ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb20-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Adventar&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-2" data-line-number="2"&gt;  getPosts (&lt;span class="dt"&gt;Adventar&lt;/span&gt; url conf) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-3" data-line-number="3"&gt;    urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class="fu"&gt;$&lt;/span&gt; getUrls url&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-4" data-line-number="4"&gt;    yieldMany urls &lt;span class="fu"&gt;=$=&lt;/span&gt; concatMapMC (getPosts&amp;#39; conf)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb21-1" data-line-number="1"&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;ToPosts&lt;/span&gt; &lt;span class="dt"&gt;Qiita&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-2" data-line-number="2"&gt;  getPosts (&lt;span class="dt"&gt;Qiita&lt;/span&gt; url) &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-3" data-line-number="3"&gt;    urls &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class="fu"&gt;$&lt;/span&gt; getUrls url [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="fu"&gt;..&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-4" data-line-number="4"&gt;    yieldMany urls &lt;span class="fu"&gt;=$=&lt;/span&gt; concatMapMC getPosts&amp;#39;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使うときは以下のようにすればよい．&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb22-1" data-line-number="1"&gt;&lt;span class="fu"&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-2" data-line-number="2"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt;set &lt;span class="fu"&gt;-&lt;/span&gt;&lt;span class="dt"&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-3" data-line-number="3"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Conduit&lt;/span&gt; (($$), (=$=), sinkList)&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-4" data-line-number="4"&gt;&lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; getPosts (qiita &lt;span class="st"&gt;&amp;quot;2017&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;$=&lt;/span&gt; filterC isHaskellPost &lt;span class="fu"&gt;$$&lt;/span&gt; sinkList&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="json-に書き出す"&gt;JSON に書き出す&lt;/h3&gt;
&lt;p&gt;前にやったものをそのままコピペした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb23"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb23-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Aeson.Encode.Pretty&lt;/span&gt; (encodePrettyToTextBuilder)&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-2" data-line-number="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text&lt;/span&gt; (&lt;span class="dt"&gt;Text&lt;/span&gt;, unpack)&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-3" data-line-number="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.Text.Lazy.Builder&lt;/span&gt; (toLazyText)&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-4" data-line-number="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Data.Text.Lazy.IO&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;LT&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-6" data-line-number="6"&gt;&lt;span class="ot"&gt;writeJson ::&lt;/span&gt; &lt;span class="dt"&gt;ToJSON&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-7" data-line-number="7"&gt;writeJson jsonPath &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-8" data-line-number="8"&gt;  &lt;span class="dt"&gt;LT&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;writeFile (unpack jsonPath) &lt;span class="fu"&gt;.&lt;/span&gt; toLazyText &lt;span class="fu"&gt;.&lt;/span&gt; encodePrettyToTextBuilder&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコードの &lt;code&gt;ToJSON&lt;/code&gt; のインスタンス化の部分は割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Aeson.hs"&gt;ココ&lt;/a&gt;にある)．&lt;/p&gt;
&lt;h3 id="コマンド化"&gt;コマンド化&lt;/h3&gt;
&lt;p&gt;CLI のオプション(引数)のパースには optparse-applicative パッケージを使う． スクレイピングには，次のようなオプションの型を考える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb24"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb24-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Fetch&lt;/span&gt; &lt;span class="dt"&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;FetchOptions&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-5" data-line-number="5"&gt;   &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;year&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-6" data-line-number="6"&gt;    , &lt;span class="st"&gt;&amp;quot;qiita&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-7" data-line-number="7"&gt;    , &lt;span class="st"&gt;&amp;quot;adventar&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-8" data-line-number="8"&gt;    , &lt;span class="st"&gt;&amp;quot;wdHost&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-9" data-line-number="9"&gt;    , &lt;span class="st"&gt;&amp;quot;wdPort&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-10" data-line-number="10"&gt;    , &lt;span class="st"&gt;&amp;quot;output&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-11" data-line-number="11"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;year&lt;/code&gt; はスクレイピングして欲しい年． &lt;code&gt;qiita&lt;/code&gt; や &lt;code&gt;adventar&lt;/code&gt; は &lt;code&gt;--qiita&lt;/code&gt; って感じのフラグで，フラグが真のものだけ集めてくる(両方偽の場合は，両方真と同じく両方集める)． &lt;code&gt;wdHost&lt;/code&gt; と &lt;code&gt;wdPort&lt;/code&gt; はヘッドレスブラウザへのオプションで，指定が無ければ &lt;code&gt;localhost:4444&lt;/code&gt; をデフォルト値にする． &lt;code&gt;output&lt;/code&gt; は &lt;code&gt;-o hoge.json&lt;/code&gt; みたいに出力先のファイルを指定する．&lt;/p&gt;
&lt;h2 id="section-6"&gt;&lt;/h2&gt;
&lt;p&gt;例の如く，拡張可能レコードなので，&lt;code&gt;(&amp;lt;@=&amp;gt;)&lt;/code&gt; 演算子を使ってパーサーを組み立てていく．&lt;/p&gt;
&lt;div class="sourceCode" id="cb25"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb25-1" data-line-number="1"&gt;&lt;span class="ot"&gt;cmdParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-2" data-line-number="2"&gt;cmdParser &lt;span class="fu"&gt;=&lt;/span&gt; subparser &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-3" data-line-number="3"&gt;     command &lt;span class="st"&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-4" data-line-number="4"&gt;       (&lt;span class="dt"&gt;Fetch&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; fetchOptsParser &lt;span class="ot"&gt;`withInfo`&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;fetch posts on advent calendar to json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; metavar &lt;span class="st"&gt;&amp;quot;( fetch )&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-6" data-line-number="6"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class="st"&gt;&amp;quot;choice subcommand&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-8" data-line-number="8"&gt;&lt;span class="ot"&gt;fetchOptsParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-9" data-line-number="9"&gt;fetchOptsParser &lt;span class="fu"&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-10" data-line-number="10"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;year     &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; yearParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-11" data-line-number="11"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;qiita    &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; qiitaFlagParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-12" data-line-number="12"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;adventar &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; adventarFlagParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-13" data-line-number="13"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;wdHost   &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; wdHostParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-14" data-line-number="14"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;wdPort   &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; wdPortParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-15" data-line-number="15"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;output   &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; outputParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-16" data-line-number="16"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;細かいやつは割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Options.hs"&gt;ココ&lt;/a&gt;を見て)．&lt;/p&gt;
&lt;h2 id="section-7"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 関数も長いので割愛(&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Main.hs"&gt;ココ&lt;/a&gt;を見て)．&lt;/p&gt;
&lt;p&gt;こんな感じに実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack exec -- advent-calendar fetch 2017 --qiita -o &amp;quot;&amp;quot;./out/qiita.json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;スクレイピングの結果は GitHub の&lt;a href="https://github.com/matsubara0507/haskell-advent-calendar/tree/f6d6a097c08e741239f576693e3d6b2b7ae21a29/out/2017"&gt;ココ&lt;/a&gt;に置いてある．&lt;/p&gt;
&lt;h3 id="マークダウンに変換"&gt;マークダウンに変換&lt;/h3&gt;
&lt;p&gt;最後にマークダウンへ変換する部分を書く． 次のようなサブコマンドを追加する想定だ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack exec -- advent-calendar markdown &amp;quot;./out/qiita.json&amp;quot; &amp;quot;./out/adventar.json&amp;quot; -o &amp;quot;./out/posts.md&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのために次のような型とパーサーを定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb28"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb28-1" data-line-number="1"&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-2" data-line-number="2"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Fetch&lt;/span&gt; &lt;span class="dt"&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Markdown&lt;/span&gt; &lt;span class="dt"&gt;MarkdownOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-5" data-line-number="5"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;MarkdownOptions&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-6" data-line-number="6"&gt;   &lt;span class="ch"&gt;&amp;#39;[ &amp;quot;inputs&amp;quot; &amp;gt;: [Text]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-7" data-line-number="7"&gt;    , &lt;span class="st"&gt;&amp;quot;output&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-8" data-line-number="8"&gt;    , &lt;span class="st"&gt;&amp;quot;noCategory&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-9" data-line-number="9"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-11" data-line-number="11"&gt;&lt;span class="ot"&gt;cmdParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-12" data-line-number="12"&gt;cmdParser &lt;span class="fu"&gt;=&lt;/span&gt; subparser &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-13" data-line-number="13"&gt;     command &lt;span class="st"&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-14" data-line-number="14"&gt;       (&lt;span class="dt"&gt;Fetch&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; fetchOptsParser &lt;span class="ot"&gt;`withInfo`&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;fetch posts on advent calendar to json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-15" data-line-number="15"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; command &lt;span class="st"&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-16" data-line-number="16"&gt;       (&lt;span class="dt"&gt;Markdown&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mdOptsParser &lt;span class="ot"&gt;`withInfo`&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;convert markdown from posts json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-17" data-line-number="17"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; metavar &lt;span class="st"&gt;&amp;quot;( fetch | markdown )&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-18" data-line-number="18"&gt;  &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class="st"&gt;&amp;quot;choice subcommand&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-20" data-line-number="20"&gt;&lt;span class="ot"&gt;mdOptsParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;MarkdownOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-21" data-line-number="21"&gt;mdOptsParser &lt;span class="fu"&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-22" data-line-number="22"&gt;    &lt;span class="fu"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;inputs     &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; inputsParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-23" data-line-number="23"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;output     &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; outputParser&amp;#39;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-24" data-line-number="24"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;noCategory &lt;span class="fu"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; noCategoryParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-25" data-line-number="25"&gt;   &lt;span class="fu"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-26" data-line-number="26"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-27" data-line-number="27"&gt;&lt;span class="ot"&gt;inputsParser ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; [&lt;span class="dt"&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-28" data-line-number="28"&gt;inputsParser &lt;span class="fu"&gt;=&lt;/span&gt; some &lt;span class="fu"&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-29" data-line-number="29"&gt;  textArgument (metavar &lt;span class="st"&gt;&amp;quot;inputs&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class="st"&gt;&amp;quot;Input json file paths&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;some&lt;/code&gt; を使うことで，ひとつ以上の入力ファイルのパスを与える部分(&lt;code&gt;markdown &amp;quot;./out/qiita.json&amp;quot; &amp;quot;./out/adventar.json&amp;quot;&lt;/code&gt;)のパーサーを簡単に書ける．&lt;/p&gt;
&lt;h2 id="section-8"&gt;&lt;/h2&gt;
&lt;p&gt;マークダウンへの変換部分はこんな感じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb29"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb29-1" data-line-number="1"&gt;&lt;span class="ot"&gt;toMarkdown ::&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-2" data-line-number="2"&gt;toMarkdown post &lt;span class="fu"&gt;=&lt;/span&gt; mconcat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-3" data-line-number="3"&gt;  [ [ &lt;span class="st"&gt;&amp;quot;**[&amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title, &lt;span class="st"&gt;&amp;quot;](&amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url, &lt;span class="st"&gt;&amp;quot;)**  &amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-4" data-line-number="4"&gt;  , [ &lt;span class="st"&gt;&amp;quot; by &amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;auther&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-5" data-line-number="5"&gt;    , &lt;span class="st"&gt;&amp;quot; on [&amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;calendar &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;title, &lt;span class="st"&gt;&amp;quot;](&amp;quot;&lt;/span&gt;, post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;calendar &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;url, &lt;span class="st"&gt;&amp;quot;) &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-6" data-line-number="6"&gt;    , post &lt;span class="fu"&gt;^.&lt;/span&gt; &lt;span class="fu"&gt;#&lt;/span&gt;date&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-7" data-line-number="7"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb29-8" data-line-number="8"&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数の結果 &lt;code&gt;[Text]&lt;/code&gt; を &lt;code&gt;unlines&lt;/code&gt; してファイルに書き出せばよい． ちなみに，Haskell-jp のブログは，末尾に空白2つで改行となり，空行で HTML にも空行が入るようになっている．&lt;/p&gt;
&lt;h4 id="出力結果"&gt;出力結果&lt;/h4&gt;
&lt;p&gt;は &lt;a href="https://github.com/haskell-jp/blog/blob/02a2b1c68cd75a15d72eedd3148fc803c103a0b7/preprocessed-site/posts/2017/advent-calendar-2017.md#%E3%83%9D%E3%82%A8%E3%83%A0"&gt;Haskell-jp ブログのソースコード&lt;/a&gt;(もちろん前半部分は手書き)を見ればいいと思うよ．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;結局，&lt;strong&gt;全ての記事を集めてくるのに半日近くかかった(笑)&lt;/strong&gt; 来年は投票機能とか，少しずつ集めたりとかできるといいよね．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://d.hatena.ne.jp/kazu-yamamoto/20180116/1516075029</id><title type="text">[TLS][Haskell]TLS 1.3 開発日記 その24 ID23</title><updated>2018-01-16T03:57:09Z</updated><author><name>kazu-yamamoto</name></author><link href="http://d.hatena.ne.jp/kazu-yamamoto/20180116/1516075029"/><summary type="html">
&lt;div class="section"&gt;
&lt;p&gt;ID23での変更点：&lt;/p&gt;
&lt;h4&gt; key_share拡張&lt;/h4&gt;
&lt;p&gt;Canonのプリンターが40を使っていることが判明したので、key_share拡張の値を40から51へ変更。&lt;/p&gt;
&lt;h4&gt; signature_algorithms_cert拡張&lt;/h4&gt;
&lt;p&gt;signature_algorithmsに加えてsignature_algorithms_cert拡張を新設した。CertificateVerify用がsignature_algorithms、証明書用がsignature_algorithms_cert。signature_algorithms_certがなければsignature_algorithmsで代用する。&lt;/p&gt;
&lt;p&gt;PSSを分割した。たとえばrsa_pss_sha256は、rsaEncryption用のrsa_pss_rsae_sha256とRSASSA-PSS用のrsa_pss_pss_sha256に分かれた。&lt;/p&gt;
&lt;h4&gt; 不変条件&lt;/h4&gt;
&lt;p&gt;不変条件が加筆された：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クライアントは提案したものは必ず実装してないといけない&lt;/li&gt;
&lt;li&gt;サーバはわからないものは単に無視(異常終了してはいけない)&lt;/li&gt;
&lt;li&gt;TLSを終端するミドルボックスはその両方を満たせ&lt;/li&gt;
&lt;li&gt;単にリレーするミドルボックスは中身を触るな&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt; CSS&lt;/h4&gt;
&lt;p&gt;状態を持たないサーバは、一番目と二番目のClientHelloの間に到着するCSSを無視すること。&lt;/p&gt;
&lt;h4&gt; 静的なRSA&lt;/h4&gt;
&lt;p&gt;静的なRSAは、Bleichenbacher-type攻撃を防止するために使用不可にすべき。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html</id><title type="text">Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)</title><updated>2017-12-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2017-12-22" itemprop="datePublished"&gt;
        Dec 22, 2017
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Elm.html"&gt;Elm&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2017/electron"&gt;Electron Advent Calendar 2017&lt;/a&gt; の22日目の記事です．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2017/elm2"&gt;Elm2 アドカレ&lt;/a&gt;で 「Elm でマークダウンプレゼンテーションエディタを作るハナシ」を書いたのですが，長くなったので分けました． 前半は&lt;a href="/posts/2017-12-18-create-elmdeck-part1.html"&gt;コチラ&lt;/a&gt;(前半は Electron 関係ないけどね)．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;今回はローカルファイルの読み書きをするために Electron を導入します(Elm もといブラウザでいい感じにする方法が分からなかった)． 今回のコードは以下のリポジトリにあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/elmdeck/tree/electron"&gt;matsubara0507/elmdeck - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="elm-と-electron"&gt;Elm と Electron&lt;/h2&gt;
&lt;p&gt;結構いろんな人が挑戦してて，資料は豊富にある． ぼくは以下のリポジトリを参考にした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yasuyuky/elmtrn"&gt;yasuyuky/elmtrn - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;アナログ時計を表示する Electron プログラムだったはず．&lt;/p&gt;
&lt;h2 id="つくる"&gt;つくる&lt;/h2&gt;
&lt;p&gt;少しずつ拡張していく．&lt;/p&gt;
&lt;h3 id="electron-化"&gt;Electron 化&lt;/h3&gt;
&lt;p&gt;まずは Electron 化する． &lt;a href="https://github.com/matsubara0507/elmdeck/tree/6ff0520f65080c9a94ac85c99fc01e0374ca250e"&gt;もともと&lt;/a&gt;は次のような構成だった(&lt;code&gt;main.js&lt;/code&gt; は Elm ファイル群から生成)．&lt;/p&gt;
&lt;pre class="txt"&gt;&lt;code&gt;/
 |-- elm-package.json
 |-- index.html
 |-- src/
 |    |-- Main.elm
 |    \-- ..
 \-- js/
      |-- main.js
      \-- highlight.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これ，elmtrn を参考に次のような構成に変更した．&lt;/p&gt;
&lt;pre class="txt"&gt;&lt;code&gt;/
 |-- elm-package.json
 |-- gulpfile.js
 |-- package.json
 \-- app
      |-- index.html
      |-- src/
      |    |-- Main.elm
      |    \-- ..
      \-- js/
           |-- app.js
           |-- main.js
           \-- ..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/matsubara0507/elmdeck/blob/97607bc1c2f069101d7d6012dcd46470d3a2d3fe/package.json"&gt;package.json&lt;/a&gt; は elmtrn をほぼそのまんま(&lt;code&gt;main&lt;/code&gt; の場所だけ違う)． gulp を使って，Elm のコードを監視・コンパイルし，生成した JS コードを Electron から呼び出す． elmtrn の gulpfile.js の設定では，各 Elm ファイルに対しひとつの JS ファイルを生成していたが，自分はひとまとめにした JS を生成したかったので，次のように gulpfile.js を書き換えた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; g &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; electron &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron-connect&amp;#39;&lt;/span&gt;).&lt;span class="va"&gt;server&lt;/span&gt;.&lt;span class="at"&gt;create&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; packager &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron-packager&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; $ &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;gulp-load-plugins&amp;#39;&lt;/span&gt;)()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; packageJson &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;./package.json&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; extend &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;util&amp;#39;&lt;/span&gt;).&lt;span class="at"&gt;_extend&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;&lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;task&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; () &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;  &lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;watch&lt;/span&gt;([&lt;span class="st"&gt;&amp;#39;app/src/**/*.elm&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt;[&lt;span class="st"&gt;&amp;#39;elm&amp;#39;&lt;/span&gt;])&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;  &lt;span class="va"&gt;electron&lt;/span&gt;.&lt;span class="at"&gt;start&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;  &lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;watch&lt;/span&gt;([&lt;span class="st"&gt;&amp;#39;app/js/*.js&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;app/index.html&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;electron&lt;/span&gt;.&lt;span class="at"&gt;restart&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;  &lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;watch&lt;/span&gt;([]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;electron&lt;/span&gt;.&lt;span class="at"&gt;reload&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;&lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;task&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;elm&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; () &lt;span class="op"&gt;=&amp;gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" data-line-number="16"&gt;  &lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;src&lt;/span&gt;([&lt;span class="st"&gt;&amp;#39;app/src/**/*.elm&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" data-line-number="17"&gt;    .&lt;span class="at"&gt;pipe&lt;/span&gt;(&lt;span class="va"&gt;$&lt;/span&gt;.&lt;span class="at"&gt;logger&lt;/span&gt;())&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" data-line-number="18"&gt;    .&lt;span class="at"&gt;pipe&lt;/span&gt;(&lt;span class="va"&gt;$&lt;/span&gt;.&lt;span class="at"&gt;plumber&lt;/span&gt;())&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" data-line-number="19"&gt;    .&lt;span class="at"&gt;pipe&lt;/span&gt;(&lt;span class="va"&gt;$&lt;/span&gt;.&lt;span class="va"&gt;elm&lt;/span&gt;.&lt;span class="at"&gt;bundle&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;main.js&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; debug&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="kw"&gt;true&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-20" data-line-number="20"&gt;    .&lt;span class="at"&gt;pipe&lt;/span&gt;(&lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;dest&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;app/js&amp;quot;&lt;/span&gt;))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-21" data-line-number="21"&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-22" data-line-number="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-23" data-line-number="23"&gt;&lt;span class="va"&gt;g&lt;/span&gt;.&lt;span class="at"&gt;task&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/philopon/gulp-elm"&gt;philopon/gulp-elm の README&lt;/a&gt; が参考になった．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;あとは，次のように elmtrn の app.js を適当に書き直した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;app&lt;span class="op"&gt;,&lt;/span&gt; BrowserWindow&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; mainWindow &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;&lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="at"&gt;on&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;window-all-closed&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;    &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="at"&gt;quit&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" data-line-number="6"&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" data-line-number="8"&gt;&lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="at"&gt;on&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;ready&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" data-line-number="9"&gt;  mainWindow &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;BrowserWindow&lt;/span&gt;(&lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" data-line-number="10"&gt;    &lt;span class="st"&gt;&amp;quot;frame&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" data-line-number="11"&gt;    &lt;span class="st"&gt;&amp;quot;always-on-top&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-12" data-line-number="12"&gt;    &lt;span class="st"&gt;&amp;quot;resizable&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-13" data-line-number="13"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-14" data-line-number="14"&gt;  &lt;span class="va"&gt;mainWindow&lt;/span&gt;.&lt;span class="at"&gt;maximize&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-15" data-line-number="15"&gt;  &lt;span class="va"&gt;mainWindow&lt;/span&gt;.&lt;span class="at"&gt;loadURL&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;file://&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; __dirname &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;/../index.html&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-16" data-line-number="16"&gt;  &lt;span class="va"&gt;mainWindow&lt;/span&gt;.&lt;span class="at"&gt;on&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-17" data-line-number="17"&gt;    mainWindow &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-18" data-line-number="18"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-19" data-line-number="19"&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;gulp&lt;/code&gt; を実行すればブラウザ版 elmdeck がそのまんま electron で実行できる． やったぁ．&lt;/p&gt;
&lt;h3 id="ファイルの読み込み"&gt;ファイルの読み込み&lt;/h3&gt;
&lt;p&gt;ココからが本番．&lt;/p&gt;
&lt;p&gt;設計として，デスクトップでよくある感じに，左上の &lt;code&gt;File&lt;/code&gt; から &lt;code&gt;Open&lt;/code&gt; とかしたい． こんな感じ(これは Atom だけど)．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-elmdeck/atom-file-open.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Electron でファイルの呼び出しをする方法は以下の記事を参考にした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/_takwat/items/6544342fd4141345bb19"&gt;Electronでファイルやフォルダの選択 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node の fs ライブラリを使えばよいようだ(Electron に限らないハナシかな)． &lt;a href="https://nodejs.org/api/fs.html"&gt;fs の公式ドキュメント&lt;/a&gt;とにらめっこして &lt;a href="https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback"&gt;&lt;code&gt;fs.readFile&lt;/code&gt;&lt;/a&gt; を呼び出せば良いみたいなのは分かった． 取りあえず，次のような &lt;code&gt;files.js&lt;/code&gt; ファイルを書いた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;&lt;span class="st"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;remote&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;dialog&lt;span class="op"&gt;,&lt;/span&gt; BrowserWindow&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; remote&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; fs &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;&lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="at"&gt;exports&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;  &lt;span class="dt"&gt;readFile&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;    &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showOpenDialog&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;        &lt;span class="dt"&gt;properties&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;        &lt;span class="dt"&gt;title&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;        &lt;span class="dt"&gt;defaultPath&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;        &lt;span class="dt"&gt;filters&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-14" data-line-number="14"&gt;            &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;name&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;マークダウン&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;extensions&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-15" data-line-number="15"&gt;        ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-16" data-line-number="16"&gt;    &lt;span class="op"&gt;},&lt;/span&gt; (fileNames) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-17" data-line-number="17"&gt;        &lt;span class="va"&gt;fs&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(fileNames[&lt;span class="dv"&gt;0&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; (err&lt;span class="op"&gt;,&lt;/span&gt; data) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-18" data-line-number="18"&gt;          &lt;span class="cf"&gt;if&lt;/span&gt; (err) &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(err)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-19" data-line-number="19"&gt;          &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(data)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-20" data-line-number="20"&gt;        &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-21" data-line-number="21"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-22" data-line-number="22"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-23" data-line-number="23"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次にこれをメニューバーから呼べるようにする． Electron のメニューバーを拡張するには &lt;a href="https://electronjs.org/docs/api/menu"&gt;&lt;code&gt;Menu&lt;/code&gt; クラス&lt;/a&gt;を使えば良いらしい． サンプルやらを参考にしながらイロイロ試行錯誤してみた結果，次のような &lt;code&gt;menuItems.js&lt;/code&gt; ファイルを書き，&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;app&lt;span class="op"&gt;,&lt;/span&gt; Menu&lt;span class="op"&gt;,&lt;/span&gt; dialog&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; template &lt;span class="op"&gt;=&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;    &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Edit&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;cut&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-11" data-line-number="11"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;copy&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-12" data-line-number="12"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;paste&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-13" data-line-number="13"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;pasteandmatchstyle&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-14" data-line-number="14"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-15" data-line-number="15"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;selectall&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-16" data-line-number="16"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-17" data-line-number="17"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-18" data-line-number="18"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-19" data-line-number="19"&gt;    &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;View&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-20" data-line-number="20"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-21" data-line-number="21"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;reload&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-22" data-line-number="22"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;forcereload&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-23" data-line-number="23"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;toggledevtools&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-24" data-line-number="24"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-25" data-line-number="25"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;resetzoom&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-26" data-line-number="26"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;zoomin&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-27" data-line-number="27"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;zoomout&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-28" data-line-number="28"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;type&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-29" data-line-number="29"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;togglefullscreen&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-30" data-line-number="30"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;toggledevtools&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-31" data-line-number="31"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-32" data-line-number="32"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-33" data-line-number="33"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-34" data-line-number="34"&gt;    &lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-35" data-line-number="35"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-36" data-line-number="36"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;minimize&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-37" data-line-number="37"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-38" data-line-number="38"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-39" data-line-number="39"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-40" data-line-number="40"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-41" data-line-number="41"&gt;    &lt;span class="dt"&gt;role&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-42" data-line-number="42"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-43" data-line-number="43"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-44" data-line-number="44"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Learn More&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-45" data-line-number="45"&gt;        &lt;span class="at"&gt;click&lt;/span&gt; () &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;).&lt;span class="va"&gt;shell&lt;/span&gt;.&lt;span class="at"&gt;openExternal&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;https://electron.atom.io&amp;#39;&lt;/span&gt;) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-46" data-line-number="46"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-47" data-line-number="47"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-48" data-line-number="48"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-49" data-line-number="49"&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-50" data-line-number="50"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-51" data-line-number="51"&gt;&lt;span class="kw"&gt;const&lt;/span&gt; items &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;template&lt;/span&gt;.&lt;span class="at"&gt;map&lt;/span&gt;( option &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;MenuItem&lt;/span&gt;(option) &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-52" data-line-number="52"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-53" data-line-number="53"&gt;&lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="at"&gt;exports&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-54" data-line-number="54"&gt;  &lt;span class="dt"&gt;get&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; () &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="cf"&gt;return&lt;/span&gt; items&lt;span class="op"&gt;;&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-55" data-line-number="55"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これ(module exports した &lt;code&gt;get&lt;/code&gt; 関数のコト)を &lt;code&gt;index.html&lt;/code&gt; で次のように呼び出した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode html"&gt;&lt;code class="sourceCode html"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="kw"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;remote&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;Menu&lt;span class="op"&gt;,&lt;/span&gt; MenuItem&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; remote&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; files &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;./js/files&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; menuItems &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;require&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;./js/menuItems&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" data-line-number="7"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; node &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;document&lt;/span&gt;.&lt;span class="at"&gt;getElementById&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" data-line-number="8"&gt;  &lt;span class="cf"&gt;while&lt;/span&gt; (&lt;span class="va"&gt;node&lt;/span&gt;.&lt;span class="at"&gt;firstChild&lt;/span&gt;) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" data-line-number="9"&gt;    &lt;span class="va"&gt;node&lt;/span&gt;.&lt;span class="at"&gt;removeChild&lt;/span&gt;(&lt;span class="va"&gt;node&lt;/span&gt;.&lt;span class="at"&gt;firstChild&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-10" data-line-number="10"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-11" data-line-number="11"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; app &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="va"&gt;exports&lt;/span&gt;.&lt;span class="va"&gt;Main&lt;/span&gt;.&lt;span class="at"&gt;embed&lt;/span&gt;(node)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-13" data-line-number="13"&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; menuvar &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;Menu&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-14" data-line-number="14"&gt;  &lt;span class="va"&gt;menuvar&lt;/span&gt;.&lt;span class="at"&gt;append&lt;/span&gt;(&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-15" data-line-number="15"&gt;    &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-16" data-line-number="16"&gt;      &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-17" data-line-number="17"&gt;      &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-18" data-line-number="18"&gt;        &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-19" data-line-number="19"&gt;          &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-20" data-line-number="20"&gt;          &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-21" data-line-number="21"&gt;        &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-22" data-line-number="22"&gt;      ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-23" data-line-number="23"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-24" data-line-number="24"&gt;  ))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-25" data-line-number="25"&gt;  &lt;span class="va"&gt;menuItems&lt;/span&gt;.&lt;span class="at"&gt;get&lt;/span&gt;().&lt;span class="at"&gt;forEach&lt;/span&gt;( item &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;menuvar&lt;/span&gt;.&lt;span class="at"&gt;append&lt;/span&gt;(item) &lt;span class="op"&gt;}&lt;/span&gt; )&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-26" data-line-number="26"&gt;  &lt;span class="va"&gt;Menu&lt;/span&gt;.&lt;span class="at"&gt;setApplicationMenu&lt;/span&gt;(menuvar)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-27" data-line-number="27"&gt;&lt;span class="kw"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;var menuvar = new Menu();&lt;/code&gt; 以下からがキモです． どーしても，動的に処理を定義しない部分(&lt;code&gt;Edit&lt;/code&gt; とか &lt;code&gt;View&lt;/code&gt; とか)を別ファイル(&lt;code&gt;menuItems.js&lt;/code&gt;)にまとめたうえで，&lt;code&gt;File&lt;/code&gt; を先頭に突っ込みたかったのでこうなった． JS は全然詳しくないのでアンチパターンかもしれないけどね．&lt;/p&gt;
&lt;h4 id="elm-に繋げる"&gt;Elm に繋げる&lt;/h4&gt;
&lt;p&gt;ここまでで&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;上部にあるメニューバーの &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Open&lt;/code&gt; を押して&lt;/li&gt;
&lt;li&gt;ファイルをダイアログで選択し&lt;/li&gt;
&lt;li&gt;コンソールに内容を吐き出す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;までは書けた． ここからは (3) が「Elm に渡して input エリアに書き出す」になるようにする．&lt;/p&gt;
&lt;p&gt;Elm と JS を繋ぐには方法がいくつかあるが，今回は &lt;code&gt;Port&lt;/code&gt; を使ってみる(前回はお行儀の悪い &lt;code&gt;Native&lt;/code&gt; モジュールを使ったけど)． 次の記事が本当に参考になった．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jooex/items/5ff2d3b86563cf5dbd84"&gt;ElmのPortでJSを使う。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マークダウンファイルの中身を JS から Elm に投げるので Elm で次のような &lt;code&gt;ports&lt;/code&gt; 関数を定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Port/FS.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" data-line-number="2"&gt;port &lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Port.FS&lt;/span&gt; exposing (&lt;span class="fu"&gt;..&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" data-line-number="4"&gt;port readFile &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;Main.elm&lt;/code&gt; で次のように呼び出す．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;  { textarea &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;  , window &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" data-line-number="7"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" data-line-number="8"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-10" data-line-number="10"&gt;main &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Program&lt;/span&gt; &lt;span class="dt"&gt;Never&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-11" data-line-number="11"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-12" data-line-number="12"&gt;  Html.program&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-13" data-line-number="13"&gt;    { init &lt;span class="fu"&gt;=&lt;/span&gt; init model&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-14" data-line-number="14"&gt;    , view &lt;span class="fu"&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-15" data-line-number="15"&gt;    , update &lt;span class="fu"&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-16" data-line-number="16"&gt;    , subscriptions &lt;span class="fu"&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-17" data-line-number="17"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-18" data-line-number="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-19" data-line-number="19"&gt;subscriptions &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-20" data-line-number="20"&gt;subscriptions model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-21" data-line-number="21"&gt;  Sub.batch&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-22" data-line-number="22"&gt;    [ Window.resizes &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-23" data-line-number="23"&gt;    , FS.readFile &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-24" data-line-number="24"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-25" data-line-number="25"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-26" data-line-number="26"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-27" data-line-number="27"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-28" data-line-number="28"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-29" data-line-number="29"&gt;    &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; str &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-30" data-line-number="30"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-31" data-line-number="31"&gt;    &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; size &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-32" data-line-number="32"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; window &lt;span class="fu"&gt;=&lt;/span&gt; size }, Cmd.none )        &lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Window.Size&lt;/code&gt; とか &lt;code&gt;SizeUpdated&lt;/code&gt; はブラウザやアプリのウィンドウサイズに合わせて，スライドのサイズを変更するためのサブスクリプションなので気にしないで． &lt;code&gt;TextAreaInput&lt;/code&gt; は input エリアにテキストを書き込んだ時にも使っている． 同じ型なので使いまわした．&lt;/p&gt;
&lt;p&gt;あとは &lt;code&gt;files.js&lt;/code&gt; の &lt;code&gt;console.log(data);&lt;/code&gt; としていた部分を &lt;code&gt;app.ports.readFile.send(data);&lt;/code&gt; と&lt;a href="https://github.com/matsubara0507/elmdeck/blob/a102ae0d82b162a3f219b7d33f9875c080ff6be9/app/js/files.js#L19"&gt;書き換える&lt;/a&gt;だけ．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-elmdeck/openfile.gif" /&gt;&lt;/p&gt;
&lt;p&gt;うまくいった．&lt;/p&gt;
&lt;h3 id="ファイルの書き込み"&gt;ファイルの書き込み&lt;/h3&gt;
&lt;p&gt;さて次はファイルの保存を実装する．&lt;/p&gt;
&lt;h4 id="ファイルパスも投げておく"&gt;ファイルパスも投げておく&lt;/h4&gt;
&lt;p&gt;ファイルを保存するには開いてるファイルのファイルパスがあった方が良いだろう(上書き保存とかするなら)． なのでまずは，読み込み時の処理をファイルパスも投げるように書き換える．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- src/Port/FS.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;port &lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Port.FS&lt;/span&gt; exposing (&lt;span class="fu"&gt;..&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;File&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;  { path &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;  , body &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;port readFile &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;File&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;  { textarea &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" data-line-number="3"&gt;  , window &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" data-line-number="4"&gt;  , filepath &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" data-line-number="5"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" data-line-number="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" data-line-number="7"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" data-line-number="8"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" data-line-number="9"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" data-line-number="10"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ReadFile&lt;/span&gt; &lt;span class="dt"&gt;FS.File&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-12" data-line-number="12"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-13" data-line-number="13"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-14" data-line-number="14"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-15" data-line-number="15"&gt;    &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; str &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-16" data-line-number="16"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-17" data-line-number="17"&gt;    &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; size &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-18" data-line-number="18"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; window &lt;span class="fu"&gt;=&lt;/span&gt; size }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-19" data-line-number="19"&gt;    &lt;span class="dt"&gt;ReadFile&lt;/span&gt; file &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-20" data-line-number="20"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; file&lt;span class="fu"&gt;.&lt;/span&gt;body, filepath &lt;span class="fu"&gt;=&lt;/span&gt; file&lt;span class="fu"&gt;.&lt;/span&gt;path }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-22" data-line-number="22"&gt;subscriptions &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-23" data-line-number="23"&gt;subscriptions model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-24" data-line-number="24"&gt;  Sub.batch&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-25" data-line-number="25"&gt;    [ Window.resizes &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-26" data-line-number="26"&gt;    , FS.readFile &lt;span class="dt"&gt;ReadFile&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-27" data-line-number="27"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;レコード型を JS から Elm に投げるには普通のオブジェクトを使えばよいらしい(最初はタプルを使おうとして良くわからなくなり諦めた…)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;&lt;span class="co"&gt;// js/files.js&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;&lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="at"&gt;exports&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;  &lt;span class="dt"&gt;readFile&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;    &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showOpenDialog&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;        &lt;span class="dt"&gt;properties&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;        &lt;span class="dt"&gt;title&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;        &lt;span class="dt"&gt;defaultPath&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;        &lt;span class="dt"&gt;filters&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" data-line-number="9"&gt;            &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;name&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;マークダウン&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;extensions&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" data-line-number="10"&gt;        ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" data-line-number="11"&gt;    &lt;span class="op"&gt;},&lt;/span&gt; (fileNames) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-12" data-line-number="12"&gt;        &lt;span class="va"&gt;fs&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(fileNames[&lt;span class="dv"&gt;0&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; (err&lt;span class="op"&gt;,&lt;/span&gt; data) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-13" data-line-number="13"&gt;          &lt;span class="cf"&gt;if&lt;/span&gt; (err) &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(err)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-14" data-line-number="14"&gt;          &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;readFile&lt;/span&gt;.&lt;span class="at"&gt;send&lt;/span&gt;(&lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;path&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; fileNames[&lt;span class="dv"&gt;0&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;body&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; data &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-15" data-line-number="15"&gt;        &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-16" data-line-number="16"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-17" data-line-number="17"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-18" data-line-number="18"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="いよいよ書き出し"&gt;いよいよ書き出し&lt;/h4&gt;
&lt;p&gt;保存するとき，データは Elm 側から投げられるが保存ボタンは Electron 側(JS側)から始めたい． なので&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;保存ボタンを押したら何らかの値を JS から Elm に送信&lt;/li&gt;
&lt;li&gt;それを受けたら Elm から JS にマークダウンのデータを送信&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というお手製同期通信を行うことにした(これもアンチパターンかも…)． 上書き保存のときは &lt;code&gt;null&lt;/code&gt; (Elm 側では &lt;code&gt;Nothing&lt;/code&gt;) を JS から送り，新規保存ならファイル名を送ることにする．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;まずは Elm 側で，以上の戦略から次のような &lt;code&gt;port&lt;/code&gt; を書いた．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;port writeFileHook &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;port writeFile &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;File&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次は JS 側に移る． ファイルの書き出しには &lt;a href="https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback"&gt;&lt;code&gt;fs.writeFile&lt;/code&gt;&lt;/a&gt; 関数を用いた． 前述した &lt;code&gt;port&lt;/code&gt; も使って，次のような関数を &lt;code&gt;files.js&lt;/code&gt; に追加した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;&lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;writeFileTo&lt;/span&gt;(fileName&lt;span class="op"&gt;,&lt;/span&gt; data) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;  &lt;span class="cf"&gt;if&lt;/span&gt; (fileName) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;    &lt;span class="va"&gt;fs&lt;/span&gt;.&lt;span class="at"&gt;writeFile&lt;/span&gt;(fileName&lt;span class="op"&gt;,&lt;/span&gt; data&lt;span class="op"&gt;,&lt;/span&gt; (err) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;      &lt;span class="cf"&gt;if&lt;/span&gt; (err) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;        &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(err)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;        &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showErrorBox&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;Can not save fiel: &amp;#39;&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; fileName&lt;span class="op"&gt;,&lt;/span&gt; err)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;&lt;span class="va"&gt;module&lt;/span&gt;.&lt;span class="at"&gt;exports&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;  &lt;span class="dt"&gt;readFile&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;    ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" data-line-number="16"&gt;  &lt;span class="dt"&gt;writeFile&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" data-line-number="17"&gt;    &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;writeFileHook&lt;/span&gt;.&lt;span class="at"&gt;send&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" data-line-number="18"&gt;    &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;writeFile&lt;/span&gt;.&lt;span class="at"&gt;subscribe&lt;/span&gt;(args &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="at"&gt;writeFileTo&lt;/span&gt;(args[&lt;span class="st"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; args[&lt;span class="st"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;]) &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" data-line-number="19"&gt;  &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-20" data-line-number="20"&gt;  &lt;span class="dt"&gt;writeFileAs&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; (app) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-21" data-line-number="21"&gt;    &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showSaveDialog&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-22" data-line-number="22"&gt;        &lt;span class="dt"&gt;properties&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-23" data-line-number="23"&gt;        &lt;span class="dt"&gt;title&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-24" data-line-number="24"&gt;        &lt;span class="dt"&gt;defaultPath&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-25" data-line-number="25"&gt;        &lt;span class="dt"&gt;filters&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-26" data-line-number="26"&gt;            &lt;span class="op"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;name&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Markdown&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;extensions&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;span class="st"&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-27" data-line-number="27"&gt;        ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-28" data-line-number="28"&gt;    &lt;span class="op"&gt;},&lt;/span&gt; (fileName) &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-29" data-line-number="29"&gt;        &lt;span class="cf"&gt;if&lt;/span&gt; (fileName &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="kw"&gt;undefined&lt;/span&gt;) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-30" data-line-number="30"&gt;          &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(fileName)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-31" data-line-number="31"&gt;          &lt;span class="va"&gt;dialog&lt;/span&gt;.&lt;span class="at"&gt;showErrorBox&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;Can not save fiel: &amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Please select file.&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-32" data-line-number="32"&gt;          &lt;span class="cf"&gt;return&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-33" data-line-number="33"&gt;        &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-34" data-line-number="34"&gt;        &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;writeFileHook&lt;/span&gt;.&lt;span class="at"&gt;send&lt;/span&gt;(fileName)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-35" data-line-number="35"&gt;        &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;writeFile&lt;/span&gt;.&lt;span class="at"&gt;subscribe&lt;/span&gt;(args &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="at"&gt;writeFileTo&lt;/span&gt;(args[&lt;span class="st"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;]&lt;span class="op"&gt;,&lt;/span&gt; args[&lt;span class="st"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;]) &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-36" data-line-number="36"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-37" data-line-number="37"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-38" data-line-number="38"&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上書き保存 &lt;code&gt;writeFile&lt;/code&gt; と新しく保存 &lt;code&gt;writeFileAs&lt;/code&gt; を用意し，共通部分は &lt;code&gt;writeFileTo&lt;/code&gt; 関数として書き出した．&lt;/p&gt;
&lt;p&gt;これをメニューバーに追加する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; menuvar &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;Menu&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;&lt;span class="va"&gt;menuvar&lt;/span&gt;.&lt;span class="at"&gt;append&lt;/span&gt;(&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;    &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;      &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;writeFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;      &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-14" data-line-number="14"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-15" data-line-number="15"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Save As&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-16" data-line-number="16"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;writeFileAs&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-17" data-line-number="17"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-18" data-line-number="18"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-19" data-line-number="19"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-20" data-line-number="20"&gt;))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に Elm 側に処理を追加した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;&lt;span class="co"&gt;-- app/src/Main.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" data-line-number="3"&gt;  &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" data-line-number="4"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-5" data-line-number="5"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ReadFile&lt;/span&gt; &lt;span class="dt"&gt;FS.File&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-6" data-line-number="6"&gt;  &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;WriteFileHook&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-7" data-line-number="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-8" data-line-number="8"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-9" data-line-number="9"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-10" data-line-number="10"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-11" data-line-number="11"&gt;    &lt;span class="dt"&gt;TextAreaInput&lt;/span&gt; str &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-12" data-line-number="12"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-13" data-line-number="13"&gt;    &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt; size &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-14" data-line-number="14"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; window &lt;span class="fu"&gt;=&lt;/span&gt; size }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-15" data-line-number="15"&gt;    &lt;span class="dt"&gt;ReadFile&lt;/span&gt; file &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-16" data-line-number="16"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; textarea &lt;span class="fu"&gt;=&lt;/span&gt; file&lt;span class="fu"&gt;.&lt;/span&gt;body, filepath &lt;span class="fu"&gt;=&lt;/span&gt; file&lt;span class="fu"&gt;.&lt;/span&gt;path }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-17" data-line-number="17"&gt;    &lt;span class="dt"&gt;WriteFileHook&lt;/span&gt; (&lt;span class="dt"&gt;Just&lt;/span&gt; filepath) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-18" data-line-number="18"&gt;      ( { model &lt;span class="fu"&gt;|&lt;/span&gt; filepath &lt;span class="fu"&gt;=&lt;/span&gt; filepath }, FS.writeFile { path &lt;span class="fu"&gt;=&lt;/span&gt; filepath, body &lt;span class="fu"&gt;=&lt;/span&gt; model&lt;span class="fu"&gt;.&lt;/span&gt;textarea } )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-19" data-line-number="19"&gt;    &lt;span class="dt"&gt;WriteFileHook&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-20" data-line-number="20"&gt;      ( model, FS.writeFile { path &lt;span class="fu"&gt;=&lt;/span&gt; model&lt;span class="fu"&gt;.&lt;/span&gt;filepath, body &lt;span class="fu"&gt;=&lt;/span&gt; model&lt;span class="fu"&gt;.&lt;/span&gt;textarea } )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-21" data-line-number="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-22" data-line-number="22"&gt;subscriptions &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-23" data-line-number="23"&gt;subscriptions model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-24" data-line-number="24"&gt;  Sub.batch&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-25" data-line-number="25"&gt;    [ Window.resizes &lt;span class="dt"&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-26" data-line-number="26"&gt;    , FS.readFile &lt;span class="dt"&gt;ReadFile&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-27" data-line-number="27"&gt;    , FS.writeFileHook &lt;span class="dt"&gt;WriteFileHook&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-28" data-line-number="28"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでうまく動作するはずだ．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-elmdeck/savefile.gif" /&gt;&lt;/p&gt;
&lt;h3 id="ショートカット"&gt;ショートカット&lt;/h3&gt;
&lt;p&gt;最後にショートカットだ． 次の記事が参考になった．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/okaxaki/items/8b8942b0c4e13ac67739"&gt;Electronに開発用メニューとショートカットを付ける - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://electronjs.org/docs/api/accelerator"&gt;&lt;code&gt;Accelerator&lt;/code&gt;&lt;/a&gt; というのを使えばよいらしい．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; menuvar &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;Menu&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;&lt;span class="va"&gt;menuvar&lt;/span&gt;.&lt;span class="at"&gt;append&lt;/span&gt;(&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-4" data-line-number="4"&gt;    &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-5" data-line-number="5"&gt;    &lt;span class="dt"&gt;submenu&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-6" data-line-number="6"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-7" data-line-number="7"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-8" data-line-number="8"&gt;        &lt;span class="dt"&gt;accelerator&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Ctrl+O&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-9" data-line-number="9"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;readFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-10" data-line-number="10"&gt;      &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-11" data-line-number="11"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-12" data-line-number="12"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-13" data-line-number="13"&gt;        &lt;span class="dt"&gt;accelerator&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Ctrl+S&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-14" data-line-number="14"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;writeFile&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-15" data-line-number="15"&gt;      &lt;span class="op"&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-16" data-line-number="16"&gt;      &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-17" data-line-number="17"&gt;        &lt;span class="dt"&gt;label&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Save As&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-18" data-line-number="18"&gt;        &lt;span class="dt"&gt;accelerator&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Ctrl+Shift+S&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-19" data-line-number="19"&gt;        &lt;span class="at"&gt;click&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="va"&gt;files&lt;/span&gt;.&lt;span class="at"&gt;writeFileAs&lt;/span&gt;(app) &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-20" data-line-number="20"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-21" data-line-number="21"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-22" data-line-number="22"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-23" data-line-number="23"&gt;))&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで目的のモノはできた！&lt;/p&gt;
&lt;h2 id="懸念"&gt;懸念&lt;/h2&gt;
&lt;p&gt;なんか Electron のファイル IO にはセキュリティ的に甘いところがあるらしい…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://utf-8.jp/public/2016/0307/electron.pdf"&gt;Electron の倒し方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人で使う分にはいいんだけど…対策しなきゃかなぁ… Elm を介してレンダラしたマークダウンを貼り付けてるので問題ないのだろうか… 良く分からない．&lt;/p&gt;
&lt;h2 id="思うところ"&gt;思うところ&lt;/h2&gt;
&lt;p&gt;結局 JS は結構書いてるなーと思った(笑) JS 絶対書きたくないマンは Elm でできることは，まだ制限される印象だ． JS の知識も多少ないとキツソウだし．&lt;/p&gt;
&lt;p&gt;まぁ綺麗に分離できるのがうれしいんだけどね．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;頑張って作っていくぞ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2017-12-18-create-elmdeck-part1.html</id><title type="text">Elm でマークダウンプレゼンテーションエディタを作ってみた (その１)</title><updated>2017-12-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2017-12-18-create-elmdeck-part1.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Elm でマークダウンプレゼンテーションエディタを作ってみた (その１)&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2017-12-18" itemprop="datePublished"&gt;
        Dec 18, 2017
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Elm.html"&gt;Elm&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2017/elm2"&gt;Elm Advent Calendar 2017 (その２)&lt;/a&gt; の18日目の記事です．&lt;/p&gt;
&lt;p&gt;ぼくが18日目に登録したとき(12月6日ごろ)は半分以上が空いてたのに全部埋まってる(笑) みんなすごいなぁ．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;タイトルの通り，思い付きで作り始めたマークダウンプレゼンテーションエディタについて書きます． 全てのコードは以下にあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/elmdeck"&gt;matsubara0507/elmdeck - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まだ完成していないです． あと正直なこと言うと，まだ使える代物ではないです(笑) 徐々に改善していくつもりです．&lt;/p&gt;
&lt;h2 id="md-でスライドづくり"&gt;MD でスライドづくり&lt;/h2&gt;
&lt;p&gt;自分はマークダウンでサクッとスライドを作るのが好きで，イロイロ試してみた結果，&lt;a href="https://yhatt.github.io/marp/"&gt;Marp&lt;/a&gt; というツールに落ち着いた． 基本的に不満は無いのだが，プレゼンテーションモード欲しいなーとか，もっと簡単にテーマを作りたいなーとかが微妙にある．&lt;/p&gt;
&lt;p&gt;しかし，最近は&lt;a href="https://github.com/yhatt/marp/wiki/Roadmap-to-Marp-1.0.0"&gt;バージョン1&lt;/a&gt;に向けて構成から書き直しているようで更新が止まっている(個人的には，急かすつもりは全くなく，ゆっくり好きなように作ればいいと思ってる)．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;なので，自分でイチから作ってみることにした． ちなみに，Marp が再リリースされて，そっちの方で全然満足出来たらそっちに移るつもり．&lt;/p&gt;
&lt;p&gt;個人的に最低限欲しい機能は&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;シンタックスハイライト&lt;/li&gt;
&lt;li&gt;数式&lt;/li&gt;
&lt;li&gt;画像の拡縮&lt;/li&gt;
&lt;li&gt;PDF への出力&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;があればよい． できればプレゼンテーションモードとか欲しいけど．&lt;/p&gt;
&lt;h2 id="作ってく"&gt;作ってく&lt;/h2&gt;
&lt;p&gt;ちなみに，既にできているのは (1) シンタックスハイライト，(2) 数式 まで． あと，ローカルファイルの読み書きを Elm でする方法(というかブラウザでいい感じにする方法)が分からなかったので Electron にした．&lt;/p&gt;
&lt;h3 id="markdown-をスライドへ"&gt;Markdown をスライドへ&lt;/h3&gt;
&lt;p&gt;戦略としては，テキストエリアで入力してもらったマークダウン表記のプレーンテキストを何らかのパッケージで構文木に変換し，さらに HTML に変換してもらうだけ． そして，変換したマークダウンの構文木を区切りワード &lt;code&gt;---&lt;/code&gt; にしてスライド1枚1枚にするイメージ．&lt;/p&gt;
&lt;p&gt;今回は以下のパッケージを使った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown"&gt;pablohirafuji/elm-markdown - elm packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マークダウンパーサーとしては他にも，&lt;a href="http://package.elm-lang.org/packages/evancz/elm-markdown"&gt;Elm の作者が作ったモノ&lt;/a&gt;があったが，これは Native モジュールで JS の &lt;a href="https://github.com/chjj/marked"&gt;marked&lt;/a&gt; を呼んでるだけなので，マークダウンの構文木をいじれない． なので，構文木も扱える pablohirafuji/elm-markdown を使った(その代わり速度は遅い…)．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;pablohirafuji/elm-markdown は &lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#parse"&gt;&lt;code&gt;parse&lt;/code&gt;&lt;/a&gt; 関数を用いることで文字列から次の &lt;code&gt;Block b i&lt;/code&gt; 型のリストに変換する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" data-line-number="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;BlankLine&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" data-line-number="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ThematicBreak&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" data-line-number="4"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Heading&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" data-line-number="5"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;CodeBlock&lt;/span&gt; &lt;span class="dt"&gt;CodeBlock&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" data-line-number="6"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Paragraph&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" data-line-number="7"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;BlockQuote&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" data-line-number="8"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;ListBlock&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i)))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" data-line-number="9"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;PlainInlines&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" data-line-number="10"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Custom&lt;/span&gt; b (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Block b i&lt;/code&gt; 型から &lt;code&gt;Html msg&lt;/code&gt; へは &lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#toHtml"&gt;&lt;code&gt;toHtml&lt;/code&gt;&lt;/a&gt; 関数を使えばよい．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;elm repl&lt;/code&gt; で試した結果，&lt;code&gt;---&lt;/code&gt; は &lt;code&gt;ThematicBreak&lt;/code&gt; になることが分かった． なので，&lt;code&gt;ThematicBreak&lt;/code&gt; で &lt;code&gt;List (Block b i)&lt;/code&gt; を &lt;code&gt;List (List (Block b i))&lt;/code&gt; に分割する． &lt;code&gt;(a -&amp;gt; Bool) -&amp;gt; List a -&amp;gt; List (List a)&lt;/code&gt; って感じの関数が無かったので&lt;a href="https://github.com/matsubara0507/elmdeck/blob/6ff0520f65080c9a94ac85c99fc01e0374ca250e/src/Utils.elm#L9"&gt;自分で定義した&lt;/a&gt;．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" data-line-number="1"&gt;markdownView &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" data-line-number="2"&gt;markdownView { textarea, window } &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" data-line-number="3"&gt;    textarea&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" data-line-number="4"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Block.parse &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" data-line-number="5"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Utils.split ((&lt;span class="fu"&gt;==&lt;/span&gt;) &lt;span class="dt"&gt;Block.ThematicBreak&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" data-line-number="6"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.map (toSlide window)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" data-line-number="7"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; div []&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" data-line-number="9"&gt;toSlide &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" data-line-number="10"&gt;toSlide window blocks &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" data-line-number="11"&gt;    blocks&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" data-line-number="12"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.concatMap customHtmlBlock&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" data-line-number="13"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; slideView window&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" data-line-number="15"&gt;customHtmlBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" data-line-number="16"&gt;customHtmlBlock block &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" data-line-number="17"&gt;    Block.defaultHtml (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlBlock) &lt;span class="dt"&gt;Nothing&lt;/span&gt; block&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取りあえずは &lt;code&gt;customHtmlBlock&lt;/code&gt; 関数では標準のを呼んでいる． &lt;code&gt;window&lt;/code&gt; を引き回しているのは，ウィンドウサイズに合わせてスライドの大きさを拡縮するため．&lt;/p&gt;
&lt;h3 id="シンタックスハイライト"&gt;シンタックスハイライト&lt;/h3&gt;
&lt;p&gt;シンタックスハイライトは皆さんご存知 &lt;a href="https://highlightjs.org/"&gt;highlight.js&lt;/a&gt; を使う． Elm 製のパッケージは見当たらなかったので，js のパッケージを使うことにした．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/evancz/elm-markdown/blob/e395295cbe0b460ab051c4040011470628f05b72/src/Native/Markdown.js#L77"&gt;evancz/elm-markdown が highlight.js を使っていた&lt;/a&gt;ので，それを参考に Native モジュールを作った．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb3-1" data-line-number="1"&gt;&lt;span class="co"&gt;// src/Native/Highlight.js&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" data-line-number="2"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; _matsubara0507$elmdeck$Native_Highlight &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" data-line-number="3"&gt;  &lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;toHighlight&lt;/span&gt;(lang&lt;span class="op"&gt;,&lt;/span&gt; code)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" data-line-number="4"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" data-line-number="5"&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; (&lt;span class="kw"&gt;typeof&lt;/span&gt; hljs &lt;span class="op"&gt;!==&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; lang &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="va"&gt;hljs&lt;/span&gt;.&lt;span class="at"&gt;listLanguages&lt;/span&gt;().&lt;span class="at"&gt;indexOf&lt;/span&gt;(lang) &lt;span class="op"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" data-line-number="6"&gt;    &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" data-line-number="7"&gt;      &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="va"&gt;hljs&lt;/span&gt;.&lt;span class="at"&gt;highlight&lt;/span&gt;(lang&lt;span class="op"&gt;,&lt;/span&gt; code&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;).&lt;span class="at"&gt;value&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" data-line-number="8"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" data-line-number="9"&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; code&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" data-line-number="10"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" data-line-number="12"&gt;  &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" data-line-number="13"&gt;    &lt;span class="dt"&gt;toHighlight&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="at"&gt;F2&lt;/span&gt;(toHighlight)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" data-line-number="14"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" data-line-number="15"&gt;&lt;span class="op"&gt;}&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側はこんな感じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Native.Highlight&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" data-line-number="3"&gt;toHighlight &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" data-line-number="4"&gt;toHighlight &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" data-line-number="5"&gt;    Native.Highlight.toHighlight&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返ってくるのは &lt;code&gt;&amp;quot;&amp;lt;div&amp;gt;...&amp;lt;/div&amp;gt;&amp;quot;&lt;/code&gt; のような HTML の文字列なので，これを &lt;code&gt;Html a&lt;/code&gt; 型に変換してやる必要がある． それには jinjor 先生の &lt;a href="http://package.elm-lang.org/packages/jinjor/elm-html-parser/latest"&gt;jinjor/elm-html-parser&lt;/a&gt; を用いた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jinjor-labo.hatenablog.com/entry/2016/09/11/222251"&gt;ElmでHTMLパーサを作って公開するまでの手順 - ジンジャー研究室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これをこんな感じに呼び出す&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" data-line-number="1"&gt;customHtmlBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" data-line-number="2"&gt;customHtmlBlock block &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; block &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" data-line-number="4"&gt;        &lt;span class="dt"&gt;Block.CodeBlock&lt;/span&gt; (&lt;span class="dt"&gt;Block.Fenced&lt;/span&gt; _ fence) code &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" data-line-number="5"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" data-line-number="6"&gt;                language &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" data-line-number="7"&gt;                    &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;withDefault &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; fence&lt;span class="fu"&gt;.&lt;/span&gt;language&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" data-line-number="8"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" data-line-number="9"&gt;            code&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" data-line-number="10"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Utils.toHighlight language&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" data-line-number="11"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; precode language&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" data-line-number="12"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" data-line-number="13"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-15" data-line-number="15"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-16" data-line-number="16"&gt;            Block.defaultHtml (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlBlock) &lt;span class="dt"&gt;Nothing&lt;/span&gt; block&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-17" data-line-number="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-18" data-line-number="18"&gt;precode &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-19" data-line-number="19"&gt;precode lang code &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-20" data-line-number="20"&gt;    &lt;span class="st"&gt;&amp;quot;&amp;lt;pre&amp;gt;&amp;lt;code class=\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; lang &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; code &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どう考えても効率悪いけど(笑)&lt;/p&gt;
&lt;h3 id="数式"&gt;数式&lt;/h3&gt;
&lt;p&gt;Marp を参考にして &lt;a href="https://khan.github.io/KaTeX/"&gt;KaTeX&lt;/a&gt; を使うことにした． KaTeX も highlight.js と同じように文字列を受け取って HTML に変換した文字列を返す関数 &lt;code&gt;renderToString&lt;/code&gt; がある． 注意点は，&lt;code&gt;renderToString&lt;/code&gt; の場合は失敗すると例外を投げてくるところ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;a class="sourceLine" id="cb6-1" data-line-number="1"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; _matsubara0507$elmdeck$Native_Katex &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" data-line-number="2"&gt;  &lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;toKatex&lt;/span&gt;(code)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" data-line-number="3"&gt;  &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" data-line-number="4"&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; (&lt;span class="kw"&gt;typeof&lt;/span&gt; katex &lt;span class="op"&gt;!==&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" data-line-number="5"&gt;    &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" data-line-number="6"&gt;      &lt;span class="cf"&gt;try&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" data-line-number="7"&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="va"&gt;katex&lt;/span&gt;.&lt;span class="at"&gt;renderToString&lt;/span&gt;(code)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" data-line-number="8"&gt;      &lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="cf"&gt;catch&lt;/span&gt; (e) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" data-line-number="9"&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; code&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" data-line-number="10"&gt;      &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-11" data-line-number="11"&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-12" data-line-number="12"&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; code&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-13" data-line-number="13"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-15" data-line-number="15"&gt;  &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-16" data-line-number="16"&gt;    &lt;span class="dt"&gt;toKatex&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; toKatex&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-17" data-line-number="17"&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-18" data-line-number="18"&gt;&lt;span class="op"&gt;}&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側はほぼ同じ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" data-line-number="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Native.Katex&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" data-line-number="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" data-line-number="3"&gt;toKatex &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" data-line-number="4"&gt;toKatex &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" data-line-number="5"&gt;    Native.Katex.toKatex&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初は以下の LaTeX 表記ををパースしようと思った&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$$
  a + 1
$$&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;が難しくてやめた(笑) 結局 &lt;code&gt;katex&lt;/code&gt; のシンタックスハイライトを KaTeX にした．&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" data-line-number="1"&gt;customHtmlBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" data-line-number="2"&gt;customHtmlBlock block &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; block &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" data-line-number="4"&gt;        &lt;span class="dt"&gt;Block.CodeBlock&lt;/span&gt; (&lt;span class="dt"&gt;Block.Fenced&lt;/span&gt; _ fence) code &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" data-line-number="5"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" data-line-number="6"&gt;                language &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" data-line-number="7"&gt;                    &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;withDefault &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; fence&lt;span class="fu"&gt;.&lt;/span&gt;language&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" data-line-number="9"&gt;                toHighlight_ &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-10" data-line-number="10"&gt;                    &lt;span class="kw"&gt;if&lt;/span&gt; List.member language [ &lt;span class="st"&gt;&amp;quot;katex&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Katex&amp;quot;&lt;/span&gt; ] &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-11" data-line-number="11"&gt;                        Utils.toKatex &lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; divFormula&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-12" data-line-number="12"&gt;                    &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-13" data-line-number="13"&gt;                        Utils.toHighlight language &lt;span class="fu"&gt;&amp;gt;&amp;gt;&lt;/span&gt; precode language&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-14" data-line-number="14"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-15" data-line-number="15"&gt;            code&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-16" data-line-number="16"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; toHighlight_&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-17" data-line-number="17"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-18" data-line-number="18"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-20" data-line-number="20"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-21" data-line-number="21"&gt;            block&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-22" data-line-number="22"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Block.defaultHtml&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-23" data-line-number="23"&gt;                    (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlBlock)&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-24" data-line-number="24"&gt;                    &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-25" data-line-number="25"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-26" data-line-number="26"&gt;divFormula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-27" data-line-number="27"&gt;divFormula code &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-28" data-line-number="28"&gt;    &lt;span class="st"&gt;&amp;quot;&amp;lt;div class=\&amp;quot;formula\&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;++&lt;/span&gt; code &lt;span class="fu"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="インラインの数式"&gt;インラインの数式&lt;/h3&gt;
&lt;p&gt;次はインラインの数式 &lt;code&gt;$a + 1$&lt;/code&gt; を変換する． シンタックスハイライトと数式のブロック要素はかなり雑にやったが，ここはもう少し真面目にやらないといけない．&lt;/p&gt;
&lt;p&gt;インライン要素を追加する方法は &lt;a href="https://github.com/pablohirafuji/elm-markdown/tree/2.0.4#implementing-gfm-task-list"&gt;pablohirafuji/elm-markdown に少し書いてある&lt;/a&gt;． これを参考に拡張していった．&lt;/p&gt;
&lt;h4 id="カスタムインライン要素"&gt;カスタムインライン要素&lt;/h4&gt;
&lt;p&gt;インライン要素の型 &lt;code&gt;Inline i&lt;/code&gt; は次のようになっている．&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Inline&lt;/span&gt; i&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" data-line-number="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" data-line-number="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;HardLineBreak&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" data-line-number="4"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;CodeInline&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" data-line-number="5"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Link&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" data-line-number="6"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Image&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" data-line-number="7"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;HtmlInline&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt;, &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)) (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" data-line-number="8"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Emphasis&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" data-line-number="9"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Custom&lt;/span&gt; i (&lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インライン要素を増やすには &lt;code&gt;Custom i (List (Inline i))&lt;/code&gt; を用いる． &lt;code&gt;i&lt;/code&gt; の部分に新しい型を追加すればよいのだ． なので，数式のインライン要素用の型を定義する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" data-line-number="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" data-line-number="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Formula String&lt;/code&gt; の &lt;code&gt;String&lt;/code&gt; が数式に変換すべき文字列．&lt;/p&gt;
&lt;p&gt;そして &lt;code&gt;Block b i&lt;/code&gt; だったところを &lt;code&gt;Block b Formula&lt;/code&gt; に置き換える． 次に上から順に変えていこう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" data-line-number="1"&gt;customHtmlBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" data-line-number="2"&gt;customHtmlBlock block &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; block &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" data-line-number="4"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" data-line-number="5"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" data-line-number="6"&gt;            block&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" data-line-number="7"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Block.defaultHtml&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" data-line-number="8"&gt;                    (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlBlock)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" data-line-number="9"&gt;                    (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlInline)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" data-line-number="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" data-line-number="11"&gt;customHtmlInline &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-12" data-line-number="12"&gt;customHtmlInline inline &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-13" data-line-number="13"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; inline &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-14" data-line-number="14"&gt;        &lt;span class="dt"&gt;Inline.Custom&lt;/span&gt; (&lt;span class="dt"&gt;Formula&lt;/span&gt; txt) _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-15" data-line-number="15"&gt;            Utils.toKatex txt&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-16" data-line-number="16"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-17" data-line-number="17"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-18" data-line-number="18"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; span []&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-19" data-line-number="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-20" data-line-number="20"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-21" data-line-number="21"&gt;            Inline.defaultHtml (&lt;span class="dt"&gt;Just&lt;/span&gt; customHtmlInline) inline&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでは難しくない． 問題は &lt;code&gt;Custom (Formula txt) blocks&lt;/code&gt; な値をどうやって構築するか．&lt;/p&gt;
&lt;h2 id="section-3"&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Inline i&lt;/code&gt; 型の &lt;code&gt;Text String&lt;/code&gt; のうち &lt;code&gt;$...$&lt;/code&gt; のモノを &lt;code&gt;Custom (Formula txt) []&lt;/code&gt; に変換する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" data-line-number="1"&gt;parseFormulaInline &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" data-line-number="2"&gt;parseFormulaInline inline &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; inline &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" data-line-number="4"&gt;        &lt;span class="dt"&gt;Inline.Text&lt;/span&gt; text &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" data-line-number="5"&gt;            &lt;span class="kw"&gt;case&lt;/span&gt; parseFormula text &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" data-line-number="6"&gt;                [] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" data-line-number="7"&gt;                    [ inline ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-9" data-line-number="9"&gt;                [ _ ] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-10" data-line-number="10"&gt;                    [ inline ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-11" data-line-number="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-12" data-line-number="12"&gt;                inlines &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-13" data-line-number="13"&gt;                    inlines&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-14" data-line-number="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-15" data-line-number="15"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-16" data-line-number="16"&gt;            [ inline ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-17" data-line-number="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-18" data-line-number="18"&gt;parseFormula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-19" data-line-number="19"&gt;parseFormula text &lt;span class="fu"&gt;=&lt;/span&gt; undefined ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;abc$1+2$def&lt;/code&gt; なども考えられるので &lt;code&gt;String -&amp;gt; List (Inline Formula)&lt;/code&gt; に変換している．&lt;/p&gt;
&lt;h4 id="パーサーを作る"&gt;パーサーを作る&lt;/h4&gt;
&lt;p&gt;いよいよパーサーだ． カレンダーのいつぞやで jinjor 先生が &lt;a href="http://package.elm-lang.org/packages/elm-tools/parser/latest"&gt;elm-tools/parser&lt;/a&gt; を紹介してくれた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jinjor/items/d0d4b83b530251df913e"&gt;Elm で構文解析しよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が，自分には Haskell の Parsec 由来の &lt;a href="http://package.elm-lang.org/packages/elm-community/parser-combinators/latest"&gt;elm-community/parser-combinators&lt;/a&gt; の方が使いやすかったのでコッチに逃げた(ゴメンナサイ)．&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" data-line-number="1"&gt;withFormula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s ( &lt;span class="dt"&gt;String&lt;/span&gt;, &lt;span class="dt"&gt;String&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" data-line-number="2"&gt;withFormula &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" data-line-number="3"&gt;    (,) &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;concat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many noneDal) &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; formula&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" data-line-number="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" data-line-number="5"&gt;formula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" data-line-number="6"&gt;formula &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" data-line-number="7"&gt;    &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;concat &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; between (string &lt;span class="st"&gt;&amp;quot;$&amp;quot;&lt;/span&gt;) (string &lt;span class="st"&gt;&amp;quot;$&amp;quot;&lt;/span&gt;) (many term)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" data-line-number="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" data-line-number="9"&gt;term &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" data-line-number="10"&gt;term &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" data-line-number="11"&gt;    escapedChar &lt;span class="fu"&gt;&amp;lt;|&amp;gt;&lt;/span&gt; noneDal&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" data-line-number="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" data-line-number="13"&gt;noneDal &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" data-line-number="14"&gt;noneDal &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" data-line-number="15"&gt;    &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;fromChar &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; noneOf [ &lt;span class="ch"&gt;&amp;#39;$&amp;#39;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" data-line-number="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" data-line-number="17"&gt;escapedChar &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; s &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" data-line-number="18"&gt;escapedChar &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" data-line-number="19"&gt;    &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;append &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; string &lt;span class="st"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;fromChar &lt;span class="fu"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; anyChar)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;abc$1+2$&lt;/code&gt; が &lt;code&gt;(&amp;quot;abc&amp;quot;, &amp;quot;1+2&amp;quot;)&lt;/code&gt; になるようにパーサーを書いた(&lt;code&gt;$1+2$&lt;/code&gt; は &lt;code&gt;(&amp;quot;&amp;quot;, &amp;quot;1+2&amp;quot;)&lt;/code&gt; となる)． このパーサーを再帰的に適用する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" data-line-number="1"&gt;parseFormula &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; &lt;span class="dt"&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" data-line-number="2"&gt;parseFormula text &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" data-line-number="3"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; Combine.parse withFormula text &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" data-line-number="4"&gt;        &lt;span class="dt"&gt;Result.Err&lt;/span&gt; ( (), stream, _ ) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" data-line-number="5"&gt;            &lt;span class="kw"&gt;if&lt;/span&gt; stream&lt;span class="fu"&gt;.&lt;/span&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" data-line-number="6"&gt;                []&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" data-line-number="7"&gt;            &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" data-line-number="8"&gt;                [ &lt;span class="dt"&gt;Inline.Text&lt;/span&gt; stream&lt;span class="fu"&gt;.&lt;/span&gt;&lt;span class="kw"&gt;data&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" data-line-number="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" data-line-number="10"&gt;        &lt;span class="dt"&gt;Result.Ok&lt;/span&gt; ( (), stream, ( txt, exp ) ) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" data-line-number="11"&gt;            &lt;span class="dt"&gt;Inline.Text&lt;/span&gt; txt&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" data-line-number="12"&gt;&lt;span class="ot"&gt;                ::&lt;/span&gt; &lt;span class="dt"&gt;Inline.Custom&lt;/span&gt; (&lt;span class="dt"&gt;Formula&lt;/span&gt; exp) []&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" data-line-number="13"&gt;&lt;span class="ot"&gt;                ::&lt;/span&gt; parseFormula stream&lt;span class="fu"&gt;.&lt;/span&gt;input&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parse withFormula text&lt;/code&gt; をすると，core の &lt;a href="http://package.elm-lang.org/packages/elm-lang/core/latest/Result#Result"&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; 型を返す． &lt;code&gt;stream&lt;/code&gt; はパースした残りなので，パース成功 &lt;code&gt;Result.Ok&lt;/code&gt; なら &lt;code&gt;stream&lt;/code&gt; に再度パーサーをかけ，失敗 &lt;code&gt;Result.Err&lt;/code&gt; ならそのまま返す．&lt;/p&gt;
&lt;h4 id="高階関数"&gt;高階関数&lt;/h4&gt;
&lt;p&gt;pablohirafuji/elm-markdown には便利な高階関数がいくつか定義されている．&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" data-line-number="1"&gt;walk &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" data-line-number="2"&gt;walkInlines &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Inline&lt;/span&gt; i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Inline&lt;/span&gt; i) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b i&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前述したとおり &lt;code&gt;Block b i&lt;/code&gt; 型は再帰型になっているので，&lt;code&gt;Block b i&lt;/code&gt; や &lt;code&gt;Inline i&lt;/code&gt; をリストで持っている． なので，&lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#walk"&gt;&lt;code&gt;walk&lt;/code&gt;&lt;/a&gt; や &lt;a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#walkInlines"&gt;&lt;code&gt;walkInlines&lt;/code&gt;&lt;/a&gt; 関数はそれらに対し再帰的に関数を適用してくれる．&lt;/p&gt;
&lt;p&gt;しかし，用意した関数は &lt;code&gt;Inline Formula -&amp;gt; List (Inline Formula)&lt;/code&gt; なのでどちらも使えない． なので，&lt;code&gt;walkInlinesWithConcat : (Inline i -&amp;gt; List (Inline i)) -&amp;gt; Block b i -&amp;gt; Block b i&lt;/code&gt; というのを定義した．&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" data-line-number="1"&gt;parseFormulaInBlock &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" data-line-number="2"&gt;parseFormulaInBlock &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" data-line-number="3"&gt;    Block.walkInlinesWithConcat parseFormulaInline&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこれを呼ぶだけ&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" data-line-number="1"&gt;toSlide &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Window.Size&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Block&lt;/span&gt; b &lt;span class="dt"&gt;Formula&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" data-line-number="2"&gt;toSlide window blocks &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" data-line-number="3"&gt;    blocks&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" data-line-number="4"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.map (Block.walk parseFormulaInBlock)&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-5" data-line-number="5"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.concatMap customHtmlBlock&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-6" data-line-number="6"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; slideView window&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="demo"&gt;Demo&lt;/h2&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-elmdeck/elmdeck.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://matsubara0507.github.io/elmdeck/"&gt;GitHub Pages においた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;長くなったのでココまで． Electron の部分も面白いんだけどなぁ．&lt;/p&gt;
&lt;p&gt;頑張って作っていくぞ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。"*.cpp"のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に"</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

"/bin/tcsh"とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

"--system-ghc"は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn't built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type 'quit' to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option '-std=c++11'


-stdオプションで"c++11"を指定しても、認識してくれません。
本家のサイトによると、'-std=c++11'オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>http://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの"/cygdrive"パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の"/cygdrive"から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn't find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn't match expected type"エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると"Couldn't match expected type: xxxxx"とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に"password:"というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に"-listen tcp"オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html</id><title type="text">[windows][haskell] Widnwos環境でHaskell Platformを完全削除する方法</title><updated>2015-04-05T01:53:40.022+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html"/><summary type="text">Windows上でHaskell Platformを完全削除する方法です。
LinuxやMac環境についてはネット上に多数情報がありますが、Windows環境についてはそれが見当たらなかったため、本エントリにまとめておきます。確認した環境はWindows 8.1＋Haslell Platform 2014.2.0.0です。


削除手順：
Windows環境では以下の手順でHaskell Platformを完全に削除できます。

Haskell Platformのアンインストール

[コントロールパネル] - [プログラム] - [プログラムと機能]を開く
"Haslell Platform 2014.2.0.0"を選択して[アンインストール]を実行

ユーザー領域に作成されたパッケージ関連ファイルの削除

手動（エクスプローラ、rmコマンドなど）で次の２つのディレクトリ以下を完全に削除</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/03/cygwin-cygwingit.html</id><title type="text">[cygwin] cygwin版のgitコマンドでサーバーとの通信に失敗する問題の対処</title><updated>2015-03-27T00:35:59.717+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/03/cygwin-cygwingit.html"/><summary type="text">cygwin上でgitコマンドを使用しているのですが、ある環境でのみgit pull/pushで以下のようなエラーが発生する問題に遭遇しました。調子よく動作している別の環境との比較で原因が判明したので、同じ問題にハマってしまった人向けに情報を残しておきます。


問題の現象：
問題の環境ではgit pull/pushを実行すると、以下のようなエラーが出力されていました。
% git pull origin master
fatal: 'pull' appears to be a git command, but we were not
able to execute it. Maybe git-pull is broken?

% git push origin master
fatal: Full write to remote helper failed: Broken pipe

</summary></entry></feed>
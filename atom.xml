<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Sample Site Posts</title><id>https://matsubara0507.github.io/scrapbook-example/atom.xml</id><updated>2020-07-31T00:00:00Z</updated><link href="https://matsubara0507.github.io/scrapbook-example"/><entry><id>https://matsubara0507.github.io/posts/2020-07-31-build-docker-image-for-hamler-part2.html</id><title type="text">Hamler の Docker イメージを作る（その２）</title><updated>2020-07-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-07-31-build-docker-image-for-hamler-part2.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;なんと「&lt;a href=&#34;https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html&#34;&gt;Hamler の Docker イメージを作る&lt;/a&gt;」の第2段です． 現在，&lt;a href=&#34;https://github.com/hamler-lang/hamler&#34;&gt;Hamler&lt;/a&gt; は活発に開発が進んでるのですが，そのたびに前回の方法でビルドしていると時間がかかりすぎるので新しい方法を考えたという話です．&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://hub.docker.com/r/hamlerlang/hamler&#34;&gt;Hamler 側で公式の Docker イメージが提供されるようになりました&lt;/a&gt;． しかし，あまりタグがうたれません． 今回の方法は任意のリビジョンで簡単に自前ビルドできるので，最新のリビジョンやフォークを試すのに非常に便利です．&lt;/p&gt;
&lt;h2 id=&#34;docker-イメージを作る&#34;&gt;Docker イメージを作る&lt;/h2&gt;
&lt;p&gt;今回やりたいのは最新のリビジョン（masterブランチ）で素早くイメージを作り直すこと． しかし，Docker 内で master を Haskell Stack でフルビルドし直すのはヒジョーに時間がかかる．&lt;/p&gt;
&lt;p&gt;そこで Haskell Stack の Docker 機能を使って，ローカルのキャッシュをうまく利用できる方法をとることにする． 最終的にできた &lt;a href=&#34;https://github.com/matsubara0507/docker-hamler/blob/781abfbdcf78f12d306f66593e94a3f08cbbd569/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; は次の通り：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; GHC_VERSION=8.6.5&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; haskell:${GHC_VERSION} AS ghc&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_REVISION&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir hamler \&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git init \&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git remote add origin https://github.com/hamler-lang/hamler.git \&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git fetch origin $HAMLER_REVISION \&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git reset --hard FETCH_HEAD&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=ghc /usr/local/bin/stack /usr/local/bin/stack&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=ghc /opt/ghc /opt/ghc&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path}/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; GHC_VERSION&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /usr/local/bin:/opt/ghc/${GHC_VERSION}/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; stack exec --system-ghc hamler build -- -l \&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; make foreign&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p ${HAMLER_HOME}/bin \&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp /usr/local/bin/hamler ${HAMLER_HOME}/bin/hamler \&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp hamler/repl/replsrv ${HAMLER_HOME}/bin/replsrv \&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp -r hamler/ebin  ${HAMLER_HOME} \&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp -r hamler/lib  ${HAMLER_HOME}&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5 \&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; apt-get clean \&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build ${HAMLER_HOME} ${HAMLER_HOME}&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH ${HAMLER_HOME}/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/lib/hamler/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;stack-with-docker&#34;&gt;Stack with Docker&lt;/h3&gt;
&lt;p&gt;ローカル環境ではなく，Docker コンテナ内でビルドをすることで Mac 上でも Linux のイメージを作ったりすることができる Haskell Stack の機能． また，ローカル環境でビルドするのと同様にキャッシュが効くので効率よくビルドすることが可能だ．&lt;/p&gt;
&lt;p&gt;この辺りの涙ぐましい工夫は下記の記事でもやってる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html&#34;&gt;stack image コマンドなしに Haskell アプリの Docker イメージを作る - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;やることはこれと同じで，Stack でビルドしたバイナリを指定した手元のパスに保存して，それを &lt;code&gt;docker build&lt;/code&gt; 時にコピってくる感じ． 手元で任意のリビジョンの &lt;code&gt;hamler&lt;/code&gt; をビルドするには次のような &lt;code&gt;stack.yaml&lt;/code&gt; を書く：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-14.27&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;allow-different-user&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; happy-1.19.9&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; language-javascript-0.7.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; network-3.0.1.1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; these-1.0.1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; semialign-1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/CoreErlang&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 2ea1038140118f5bc29f4cb14b50aa0918d62581&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/purescript&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; bc43f3b094feee61e7b9091a69cc7154d5f7d6a7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; megaparsec-8.0.0@sha256:362f85e243ecbcb550e1de6e5c74ba5a50c09edaa1208c99bc5b9fd242227fc6,3808&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# ここからの extra-deps は追記（lts-14にした関係）&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/hamler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; baa5f72e9139c60e4c72a7134132522e40138633&lt;/span&gt;&lt;span class=&#34;co&#34;&gt; # ここでリビジョン指定する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Glob-0.9.3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ansi-terminal-0.8.2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ansi-wl-pprint-0.6.8.2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; tasty-1.2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;these&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;assoc&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;quickcheck&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;  # このイメージに lts-13 がないから lts-14 にした&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/stack-build&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;package.yaml はこんだけで良い：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker-hamler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;0.1.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;stack --local-bin-path=./bin install hamler&lt;/code&gt; とすることで &lt;code&gt;./bin/hamler&lt;/code&gt; が生成される．&lt;/p&gt;
&lt;h3 id=&#34;任意のリビジョンをクローンする&#34;&gt;任意のリビジョンをクローンする&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;hamler&lt;/code&gt; バイナリは手に入るようになったが，他にもいくつか必要な作業がある． README を読むと手元でフルビルドをする場合は次のような手続きが書いてある：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/hamler-lang/hamler.git
$ cd hamler
$ export LC_ALL=en_US.UTF-8
$ make
$ make install&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hamler&lt;/code&gt; バイナリをビルドする必要はないが，これらの作業をするために &lt;code&gt;docker build&lt;/code&gt; 内でリポジトリをクローンする必要はある． そのときに，&lt;code&gt;stack.yaml&lt;/code&gt; で指定したリビジョンと同じものをクローンしたい． 調べた結果，次のようにすれば良い：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_REVISION&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir hamler \&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git init \&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git remote add origin https://github.com/hamler-lang/hamler.git \&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git fetch origin $HAMLER_REVISION \&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git reset --hard FETCH_HEAD&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;HAMLER_REVISION&lt;/code&gt; は外部から与える：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat hamler_revision
#!/bin/bash
grep -A1 &amp;#39;github: hamler-lang/hamler&amp;#39; stack.yaml | grep -woE &amp;quot;[0-9a-f]+&amp;quot;
$ docker build . --build-arg HAMLER_REVISION=`./hamler_revision`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでクローンまではできた． 次は &lt;code&gt;make&lt;/code&gt; と &lt;code&gt;make install&lt;/code&gt; の部分を再現する．&lt;/p&gt;
&lt;h3 id=&#34;hamlerのセットアップ&#34;&gt;Hamlerのセットアップ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; は &lt;code&gt;make build&lt;/code&gt; と &lt;code&gt;make foreign&lt;/code&gt; を実行している． &lt;code&gt;make biuld&lt;/code&gt; は &lt;code&gt;hamler&lt;/code&gt; バイナリをビルドして &lt;code&gt;hamler build&lt;/code&gt; を実行している． &lt;code&gt;make foreign&lt;/code&gt; は Foreign 用の Erlang の実行ファイルを生成しているようだ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# libtinfo5 は stack や hamler の実行に使う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# stack のインストール&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; curl -sSL https://get.haskellstack.org/ | sh&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_REVISION&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir hamler \&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git init \&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git remote add origin https://github.com/hamler-lang/hamler.git \&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git fetch origin $HAMLER_REVISION \&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git reset --hard FETCH_HEAD&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# local_bin_path でローカルからバイナリを渡す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path}/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /usr/local/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# ここから make の処理&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb7-23&#34;&gt;&lt;a href=&#34;#cb7-23&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; stack exec hamler build -- -l \&lt;/span&gt;
&lt;span id=&#34;cb7-24&#34;&gt;&lt;a href=&#34;#cb7-24&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; make foreign&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; は &lt;code&gt;HAMLER_HOME&lt;/code&gt; へ以下の4つをコピーしている：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hamler&lt;/code&gt; バイナリ&lt;/li&gt;
&lt;li&gt;リポジトリにある &lt;code&gt;replsrv&lt;/code&gt; という Erlang スクリプト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make foreign&lt;/code&gt; で生成した Erlang バイナリ&lt;/li&gt;
&lt;li&gt;標準ライブラリ（リポジトリの &lt;code&gt;lib&lt;/code&gt; のやつ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを &lt;code&gt;docker build&lt;/code&gt; でもやる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# 続きから&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; make foreign&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p ${HAMLER_HOME}/bin \&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp /usr/local/bin/hamler ${HAMLER_HOME}/bin/hamler \&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp hamler/repl/replsrv ${HAMLER_HOME}/bin/replsrv \&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp -r hamler/ebin  ${HAMLER_HOME} \&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp -r hamler/lib  ${HAMLER_HOME}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで準備はほぼ整った． あとは実行用のイメージに必要なものだけをコピってくるだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# 続きから&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5 \&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; apt-get clean \&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build ${HAMLER_HOME} ${HAMLER_HOME}&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH ${HAMLER_HOME}/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/lib/hamler/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ghcをdlしない&#34;&gt;GHCをDLしない&lt;/h3&gt;
&lt;p&gt;現状だと &lt;code&gt;docker build&lt;/code&gt; 毎に GHC をインストールしてきて結構時間がかかる． せっかくマルチステージビルドができるので，GHC も別のイメージからコピってくることにした．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; GHC_VERSION=8.6.5&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; haskell:${GHC_VERSION} AS ghc&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y libtinfo5&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; GHC_VERSION&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_REVISION&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_HOME=/usr/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir hamler \&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt; &lt;span class=&#34;co&#34;&gt;# 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; git reset --hard FETCH_HEAD&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# ついでに stack もとってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=ghc /usr/local/bin/stack /usr/local/bin/stack&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=ghc /opt/ghc /opt/ghc&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path}/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# GHC のパスも追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /usr/local/bin:/opt/ghc/${GHC_VERSION}/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler \&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt; &lt;span class=&#34;co&#34;&gt;# system-ghc フラグをつける&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; stack exec --system-ghc hamler build -- -l \&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; make foreign&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;動作確認&#34;&gt;動作確認&lt;/h3&gt;
&lt;p&gt;適当に Makefile を書いておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode makefile&#34;&gt;&lt;code class=&#34;sourceCode makefile&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;bin/hamler:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;	stack --local-bin-path=./bin install hamler&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;clean:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;	rm bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;image:&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt; bin/hamler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;	docker build -t &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; . --build-arg local_bin_path=./bin --build-arg HAMLER_REVISION=`./hamler_revision`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;make image tag=matsubara0507/hamler:dev&lt;/code&gt; とかやるとイメージができる． こんな感じに使う．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir sample
$ cd sample
$ docker run -it --rm -w /work -v `pwd`:/work matsubara0507/hamler:dev init
$ docker run -it --rm -w /work -v `pwd`:/work matsubara0507/hamler:dev repl
Compiling JSON
Hamler REPL, version 0.2
Type :? for help

&amp;gt; 1 + 1
2&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;バイナリがビルドできないケース&#34;&gt;バイナリがビルドできないケース&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt; の設定から &lt;code&gt;./bin/hamler&lt;/code&gt; が残っている場合はバイナリのビルドをスキップする． なのでリビジョンを更新してビルドしなおしたいときは先に &lt;code&gt;make clean&lt;/code&gt; して &lt;code&gt;./bin/hamler&lt;/code&gt; を削除する． しかし，間違えてリビジョンを変えずに &lt;code&gt;make clean&lt;/code&gt; をした場合，次のようなエラーが出る：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make clean
rm bin/hamler
$ make bin/hamler
stack --docker --local-bin-path=./bin install hamler
Cabal file warning in/path/to/docker-hamler.cabal@0:0: A package using &amp;#39;cabal-version: 1.12&amp;#39; must use section syntax. See the Cabal user guide for details.
No latest package revision found for: hamler, dependency callstack: []&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どうやらこれは &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/5258&#34;&gt;Stack 側のバグっぽい&lt;/a&gt;． リビジョンを更新する以外に，Pantry 側を削除するしかなさそうなのが痛い． 早く治りますように…&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;その３があるかどうかはわかりません．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2020-07-16T12:08:20.505+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-07-02-read-featherweight-go.html</id><title type="text">Featherweight Go を読んでみた</title><updated>2020-07-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-07-02-read-featherweight-go.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Go言語にジェネリクスを導入するために，その形式的な議論を研究した論文「&lt;a href=&#34;https://arxiv.org/abs/2005.11710&#34;&gt;Featherweight Go&lt;/a&gt;」が6月頭に発表されました． せっかくなので（久々に）全訳をしながら丁寧に読んでみたので，それを簡単にまとめることにします．&lt;/p&gt;
&lt;p&gt;可能な限りGo言語に馴染みのない人や，プログラミング言語の形式的な議論に馴染みのない人でも理解できるようにしてみます．&lt;/p&gt;
&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;僕は英語がとても苦手です（DeepLを駆使しても3週間かかりました）&lt;/li&gt;
&lt;li&gt;僕はGoでアプリケーションを少し書いていますがコアについては全く詳しくありません&lt;/li&gt;
&lt;li&gt;僕は言語の形式的な議論を院生時代にやってましたが卒業して数年経ちます&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので間違ってる可能性も十分に考慮してください．&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Goにジェネリクスを導入する新しいデザインを提案：
&lt;ul&gt;
&lt;li&gt;インターフェースと型アサーションを駆使する方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;新デザインを形式的に議論するために FG と FGG を定義
&lt;ul&gt;
&lt;li&gt;FG：Goの極めて小さいモデル&lt;/li&gt;
&lt;li&gt;FGG：FG をジェネリクスで拡張&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;単相化（Monomorphisation）というFGGからFGの変換を定義
&lt;ul&gt;
&lt;li&gt;単相化は型パラメーターを具体化した実装を必要な型だけ完全に列挙する方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rhu1/fgg&#34;&gt;これらは全てGoでプロトタイプ実装した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加えて，この Go のジェネリクスは Expression Problem の解法にもなり得るという議論もある．&lt;/p&gt;
&lt;h2 id=&#34;前提知識&#34;&gt;前提知識&lt;/h2&gt;
&lt;h3 id=&#34;featherweight-java&#34;&gt;Featherweight Java&lt;/h3&gt;
&lt;p&gt;1999年に出された論文に「&lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/320385.320395&#34;&gt;Featherweight Java&lt;/a&gt;」というものがある． 僕はこの論文を読んではいないがどうやら，この論文も FJ という Java の小さな言語モデルを定義し，それをジェネリクスで拡張した FGJ を定義し，FGJ から FJ への変換の仕方を定義して形式的な議論を与えている．&lt;/p&gt;
&lt;p&gt;Featherweight Go でも言及されているとおり，Featherweight Go は議論の展開の仕方に Featherweight Java を参考としている．&lt;/p&gt;
&lt;h3 id=&#34;goの型&#34;&gt;Goの型&lt;/h3&gt;
&lt;p&gt;Goで型と呼べるものは大きく分けて2つ，構造体（structure）とインターフェース（interface）がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構造体：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type [name] structure { ... }&lt;/code&gt; という形で宣言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...&lt;/code&gt; にフィールド名と型を列挙（いわゆるレコード型）&lt;/li&gt;
&lt;li&gt;フィールドアクセスはドット記法（e.g. &lt;code&gt;x.m()&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インターフェース：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type [name] interface { ... }&lt;/code&gt; という形で宣言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...&lt;/code&gt; にメソッド仕様（method specification，メソッド名 + 型）を列挙&lt;/li&gt;
&lt;li&gt;列挙したメソッドを定義した型はインターフェースのサブタイプになる（いわゆる構造的部分型）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;型アサーション&#34;&gt;型アサーション&lt;/h3&gt;
&lt;p&gt;Goでの型キャストっぽい機能． インターフェースで指定されてる型からサブタイプへと変換する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Hoge &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; { ... }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Fuga &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; { ... }&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// Fuga は Hoge を実装しているとする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; piyo(x Hoge) *Fuga {  &lt;span class=&#34;co&#34;&gt;// *X はX型のポインタ型&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    y, ok := x.(Fuga)      &lt;span class=&#34;co&#34;&gt;// これが型アサーション&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; !ok {               &lt;span class=&#34;co&#34;&gt;// 型アサーションに失敗したときに false を返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt;         &lt;span class=&#34;co&#34;&gt;// nil はポインタのゼロ値&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; &amp;amp;y&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;piyo&lt;/code&gt; 関数は &lt;code&gt;Hoge&lt;/code&gt; インターフェースを実装した型の値であれば，なんでも引数として与えることができる． 型アサーションの &lt;code&gt;ok&lt;/code&gt; は省略することができ，その場合は型アサーションに失敗したときに実行時エラーとなる．&lt;/p&gt;
&lt;h3 id=&#34;用語と翻訳&#34;&gt;用語と翻訳&lt;/h3&gt;
&lt;p&gt;基本的に，この分野の入門書として名高い[要出典]「型システム入門（原題：Type and Programming Language，略して TaPL）」の訳し方を参考にする． TaPL には無い用語は次のように翻訳したが，Go ジェネリクスが市民権を得たときには別の翻訳が宛てがわれるかもしれない：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monomorphisation：単相化
&lt;ul&gt;
&lt;li&gt;Polymorphism（多相性）の対義語が Monomorphism（単相性）というらしい&lt;/li&gt;
&lt;li&gt;Rust でも Monomorphization という用語を単相化と訳していた&lt;/li&gt;
&lt;li&gt;（この表記の揺れはおそらくイギリス綴りかアメリカ綴りかの差？）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bound：境界
&lt;ul&gt;
&lt;li&gt;機能は Java の Bounded Types（境界型などと訳されている）に近い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang-ja/the-rust-programming-language-ja/issues/153&#34;&gt;Rust でも色々議論した結果 Bound を「境界」と訳した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，プログラミング言語の形式的な議論で頻出する用語について簡単に解説する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構文（Syntax）:
&lt;ul&gt;
&lt;li&gt;ある言語においてプログラムの「正しい記述方法」を定義したもの&lt;/li&gt;
&lt;li&gt;一般的に BNF（バッカス・ナウア記法）で定義する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;意味論（Semantics）:
&lt;ul&gt;
&lt;li&gt;ある言語においてプログラムが「どのように実行されるか」を定義したもの&lt;/li&gt;
&lt;li&gt;いくつか定義の仕方があるがこの論文では簡約規則（操作的意味論）を利用している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型付け規則（Typing Rule）:
&lt;ul&gt;
&lt;li&gt;式 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt; に対して「正しい」型の付け方の規則&lt;/li&gt;
&lt;li&gt;正しく型付けされているとはつまり静的型検査が通るような状態&lt;/li&gt;
&lt;li&gt;一般的に &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Γ&lt;/em&gt; ⊢ &lt;em&gt;e&lt;/em&gt; : &lt;em&gt;t&lt;/em&gt;&lt;/span&gt; とかく（&lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt; は環境で変数がなんの型なのかを保存している）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;簡約（Reduction）:
&lt;ul&gt;
&lt;li&gt;ある式 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt; から別の式（値）への変換&lt;/li&gt;
&lt;li&gt;一般的に &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;e&lt;/em&gt; → &lt;em&gt;e&lt;/em&gt;′&lt;/span&gt; のように矢印を使う&lt;/li&gt;
&lt;li&gt;例: &lt;span class=&#34;math inline&#34;&gt;1 + 2 * 3 → 1 + 6 → 7&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型安全性（Safety）:
&lt;ul&gt;
&lt;li&gt;健全性（Soundness）とも呼ぶ&lt;/li&gt;
&lt;li&gt;正しく型付けされた項は「おかしくなる」ことがないということ&lt;/li&gt;
&lt;li&gt;「おかしくなる」の定義は言語モデルによって異なる（例：行き詰まり状態）&lt;/li&gt;
&lt;li&gt;進行定理 + 保存定理 なのでこの2つを証明するのが一般的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;進行定理（Progress）:
&lt;ul&gt;
&lt;li&gt;正しく型付けされた項は行き詰まり状態では無い&lt;/li&gt;
&lt;li&gt;行き詰まり状態：値でもないし簡約もできない状態&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;保存定理（Preservation）:
&lt;ul&gt;
&lt;li&gt;正しく型付けされた項が評価できるならば，評価後の項も正しく型付けされる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;双模倣性（Bisimulation）:
&lt;ul&gt;
&lt;li&gt;並行モデルでよく出てくる性質（今回の中では最もマイナーな性質）&lt;/li&gt;
&lt;li&gt;ざっくりいうと，2つのモデルが同じように振舞うという性質&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;プログラミング言語の形式的な議論&#34;&gt;プログラミング言語の形式的な議論&lt;/h3&gt;
&lt;p&gt;なぜ，わざわざ形式的な議論（証明を与える）をするのか． TaPL の第19章「事例: Featherweight Java」にはこう書いてある：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プログラミング言語のような現実世界の複雑な人工物を設計するには，形式的にモデル化することが大きな手助けとなる．形式モデルを使うと，設計のある側面を正確に説明したり，その性質を記述・証明したり，そこまでしないと見落としかねない問題に注意を向けたりできる．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現に，Featherweight Go ではFGGがある「前提条件」のもとで必ず単相化できることを証明しており，その結果，実際のジェネリクス付きGoの「正しい」静的検査（コンパイル）を定義できた（この条件がないと，単相化が停止しない可能性がある）．&lt;/p&gt;
&lt;h3 id=&#34;expression-problem&#34;&gt;Expression Problem&lt;/h3&gt;
&lt;p&gt;今回は割愛する（ググって）が，本論文で提案するジェネリクス付きGoは Expression Problem に対する解法になっていると主張している（個人的には，あまり Go っぽい書き方じゃない気がするけど笑）．&lt;/p&gt;
&lt;h2 id=&#34;goで多相的な実装をする&#34;&gt;Goで多相的な実装をする&lt;/h2&gt;
&lt;p&gt;現状のGoでも多相的な実装をする方法がいくつかある． 今回目を付けたのが，インターフェースと型アサーションを使った方法だ．&lt;/p&gt;
&lt;p&gt;例えば，高階関数を次のように表現できる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Any &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Function &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    Apply(x Any) Any&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// g(f(x)) を表現&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; compose &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    f Function&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;    g Function&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this compose) Apply(x Any) Any {&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; this.g.Apply(this.f.Apply(x))&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; incr &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; { n &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; } &lt;span class=&#34;co&#34;&gt;// nだけインクリメントする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this incr) Apply(x Any) Any {&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x.(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) + this.n&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; pos &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {} &lt;span class=&#34;co&#34;&gt;// 正数なら真が返る&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this pos) Apply(x Any) Any {&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x.(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; f Function = compose{incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;}, pos{}}&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; = f.Apply(&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;).(&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコードは，既存の Go としても完全に正しい． &lt;code&gt;Any&lt;/code&gt; インターフェースは実装すべきメソッド仕様を一つも持たないので，全ての型が実装していることになる． 無論，本当は &lt;code&gt;int&lt;/code&gt; や &lt;code&gt;bool&lt;/code&gt; であるべきところが &lt;code&gt;Any&lt;/code&gt; になっていたり，&lt;code&gt;Any&lt;/code&gt; な型同士の区別が付かなくなっていたりする問題がある． だがしかし，それがコンパイル時に検査できるようになったらどうだろうか．新しいデザインがまさにそういう形式になっている．&lt;/p&gt;
&lt;h2 id=&#34;fg-と-fgg&#34;&gt;FG と FGG&lt;/h2&gt;
&lt;p&gt;論文では，それぞれの構文と型付け規則，簡約規則を定義し，構文的正しさの検証規則の定義と，保存定理と進行定理を証明している（すなわち型安全であることを示している）． ここでは2つの構文だけ紹介する．&lt;/p&gt;
&lt;h3 id=&#34;fgの構文&#34;&gt;FGの構文&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;x̄&lt;/em&gt;&lt;/span&gt; のような上線付きの記法は，ある形式の項の「列」であることを示している． 例えば &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;x̄&lt;/em&gt;&lt;/span&gt; の場合は &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;x&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;, ...&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; を意味している．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/read-featherweight-go/fg.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;プログラム &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; は，Go の形式にならって定義されているが，論文中では諸々省略して &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;D̄&lt;/em&gt; ⊳ &lt;em&gt;e&lt;/em&gt;&lt;/span&gt; と記述することもある．&lt;/p&gt;
&lt;p&gt;FG は極めてコンパクトな Go のサブセットである． そのため，有効な式は変数・メソッド呼び出し・構造体リテラル・フィールド選択・型アサーションの5つしかない． 対して型（構造体・インターフェース）に関する構文はかなり充実している．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;FG には他に型付け規則と簡約規則がある．特に型付け規則の一部である，構造的部分型を表現した規則 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt; &amp;lt;  : &lt;em&gt;u&lt;/em&gt;&lt;/span&gt; は重要だ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;u&lt;/em&gt;&lt;/span&gt; が構造体 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; の場合は &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 自信のみがサブタイプになる（i.e. &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt; &amp;lt;  : &lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;u&lt;/em&gt;&lt;/span&gt; がインターフェース &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;I&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; の場合は &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;(&lt;em&gt;t&lt;/em&gt;) ⊇ &lt;em&gt;m&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;(&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;I&lt;/em&gt;&lt;/sub&gt;)&lt;/span&gt; を満たすような &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; のみがサブタイプになる（i.e. &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt; &amp;lt;  : &lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;I&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここで &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;(&lt;em&gt;t&lt;/em&gt;)&lt;/span&gt; という補助関数は型 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; に定義されているメソッドのメソッド仕様の集合である（重複しないという前提）． また，メソッド仕様の等価性には変数名は関係しない（つまり，メソッド名・引数の型・返り値の型が一致するかどうかをみる）． この部分型関係 &lt;span class=&#34;math inline&#34;&gt; &amp;lt; :&lt;/span&gt; は，メソッド呼び出しや構造体リテラルの引数を適用する部分や，型アサーションの型付け規則で利用される．&lt;/p&gt;
&lt;h3 id=&#34;fggの構文&#34;&gt;FGGの構文&lt;/h3&gt;
&lt;p&gt;前述したとおり，FGG は FG をジェネリクスで拡張した言語である． なので下記の構文規則のうち，FG からの拡張に当たる部分を赤でハイライトしてある．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/read-featherweight-go/fgg.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;最も大きな変更として型宣言とメソッド宣言（メソッドシグネチャ）が型引数 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/span&gt; も取りうるようになったことだ． この型引数がまさにジェネリクスである． 手っ取り早く具体的なコードを見てみよう． 下記のコードは「Goで多相的な実装をする」を FGG 風の記法で置き換えたものだ（風というのは &lt;code&gt;+&lt;/code&gt; や &lt;code&gt;&amp;gt;&lt;/code&gt; や &lt;code&gt;int&lt;/code&gt; や &lt;code&gt;bool&lt;/code&gt; は FGG にはまだ無いため）：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Any &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Function(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any, b Any) &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;    Apply(x a) b&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// g(f(x)) を表現&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; compose(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any, b Any, c Any) &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;    f Function(a, b)&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;    g Function(b, c)&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this compose(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any, b Any, c Any)) Apply(x a) c {&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; this.g.Apply(this.f.Apply(x))&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; incr &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; { n &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; } &lt;span class=&#34;co&#34;&gt;// nだけインクリメントする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this incr) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x + this.n&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; pos &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {} &lt;span class=&#34;co&#34;&gt;// 正数なら真が返る&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-22&#34;&gt;&lt;a href=&#34;#cb3-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this pos) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb3-23&#34;&gt;&lt;a href=&#34;#cb3-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-24&#34;&gt;&lt;a href=&#34;#cb3-24&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-25&#34;&gt;&lt;a href=&#34;#cb3-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-26&#34;&gt;&lt;a href=&#34;#cb3-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb3-27&#34;&gt;&lt;a href=&#34;#cb3-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; f Function(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;) = compose(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;){incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;}, pos{}}&lt;/span&gt;
&lt;span id=&#34;cb3-28&#34;&gt;&lt;a href=&#34;#cb3-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; = f.Apply(&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-29&#34;&gt;&lt;a href=&#34;#cb3-29&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんと，このコードには型アサーションが一切出てこない． また，高階関数を表現するインターフェースで，ちゃんと引数と戻り値の型を区別することができている．&lt;/p&gt;
&lt;p&gt;構文の本質的な変更を見てみよう． インターフェースや構造体，メソッドの宣言に &lt;code&gt;(type a Any, b Any)&lt;/code&gt; というのが出てくるようになった． これがまさに型引数 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/span&gt; や &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Ψ&lt;/em&gt;&lt;/span&gt; に当たる． &lt;code&gt;a&lt;/code&gt; や &lt;code&gt;b&lt;/code&gt; の型パラメーターの後に記述している &lt;code&gt;Any&lt;/code&gt; は &lt;strong&gt;境界（bound）&lt;/strong&gt; と呼び，自由にインターフェースを置くことができる． 構造体リテラルやメソッド呼び出しで型引数に型を適用する場合や，部分型関係が成り立つ場合（&lt;code&gt;Apply(x int) bool&lt;/code&gt; の &lt;code&gt;int&lt;/code&gt; や &lt;code&gt;bool&lt;/code&gt; のこと）は，与えた型が境界のインターフェースのサブタイプになっている必要がある（今回の場合は &lt;code&gt;Any&lt;/code&gt; なのでどんな型でも良いが）． ここで重要になるのが，型引数の型パラメーターのスコープである：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// 型名やメソッド名の型パラメーターは内部のメソッドシグネチャで利用できる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; List(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    Map(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; b Any)(f Function(a, b)) List(b)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// 型パラメーターを自身の境界で利用することもできる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Eq(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Eq(a)) &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;    Equal(that a) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インターフェースの型引数はメソッド仕様の型引数でも使うことはできるが，その逆はできない．&lt;/p&gt;
&lt;h2 id=&#34;単相化&#34;&gt;単相化&lt;/h2&gt;
&lt;p&gt;いよいよ FGG から FG への変換方法をみていく． 論文では，単相化の規則を形式的に定義し，単相化したコードは構文的正しさが保存されることと，双模倣性を証明した．ここでは形式的な議論を割愛する．&lt;/p&gt;
&lt;h3 id=&#34;単相化の例&#34;&gt;単相化の例&lt;/h3&gt;
&lt;p&gt;まずは例を見てみよう． 前述した FGG の &lt;code&gt;Function&lt;/code&gt; などの例を「単相化」で FG に変換すると次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Top &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; = compose&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;{incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;}, pos{}}&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; = f.Apply(&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; compose&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;    f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;    g Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt; Top&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;    Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;    &lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;    Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; Top&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;    Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;    &lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (this compose&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; this.g.Apply(this.f.Apply(x))&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (this compose&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-29&#34;&gt;&lt;a href=&#34;#cb5-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-30&#34;&gt;&lt;a href=&#34;#cb5-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; incr &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; { n &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb5-31&#34;&gt;&lt;a href=&#34;#cb5-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-32&#34;&gt;&lt;a href=&#34;#cb5-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (this incr) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-33&#34;&gt;&lt;a href=&#34;#cb5-33&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x + this.n&lt;/span&gt;
&lt;span id=&#34;cb5-34&#34;&gt;&lt;a href=&#34;#cb5-34&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-35&#34;&gt;&lt;a href=&#34;#cb5-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this incr) Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb5-36&#34;&gt;&lt;a href=&#34;#cb5-36&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb5-37&#34;&gt;&lt;a href=&#34;#cb5-37&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-38&#34;&gt;&lt;a href=&#34;#cb5-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-39&#34;&gt;&lt;a href=&#34;#cb5-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; pos strcut {}&lt;/span&gt;
&lt;span id=&#34;cb5-40&#34;&gt;&lt;a href=&#34;#cb5-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-41&#34;&gt;&lt;a href=&#34;#cb5-41&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this pos) Apply(x &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-42&#34;&gt;&lt;a href=&#34;#cb5-42&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; x &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-43&#34;&gt;&lt;a href=&#34;#cb5-43&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-44&#34;&gt;&lt;a href=&#34;#cb5-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this incr) Apply&amp;lt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb5-45&#34;&gt;&lt;a href=&#34;#cb5-45&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb5-46&#34;&gt;&lt;a href=&#34;#cb5-46&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大きな変更箇所として，&lt;code&gt;Function&amp;lt;int, int&amp;gt;&lt;/code&gt; のように &lt;code&gt;(,)&lt;/code&gt; が &lt;code&gt;&amp;lt;,&amp;gt;&lt;/code&gt; へ至る所でなっている． FGG のときの &lt;code&gt;(,)&lt;/code&gt; は内部の型は個別の型として認識されていたが，&lt;code&gt;&amp;lt;,&amp;gt;&lt;/code&gt; は &lt;code&gt;Function&amp;lt;int, int&amp;gt;&lt;/code&gt; で一つの型となり内部の型は区別されない．&lt;/p&gt;
&lt;p&gt;また，&lt;code&gt;Apply&amp;lt;0&amp;gt; Top&lt;/code&gt; のようなメソッドやメソッド仕様が追加されている． これは，部分型関係を正しく解決するためのダミーメソッドだ． 全てのメソッド宣言に対してダミーメソッドは追加で宣言され，インターフェースの全てのメソッド仕様に対してダミーメソッドのメソッド仕様が追加される． メソッド仕様の数字（&lt;code&gt;&amp;lt;0&amp;gt;&lt;/code&gt; とか &lt;code&gt;&amp;lt;1&amp;gt;&lt;/code&gt; とか）はメソッドの引数の型と返り値の型に対して一意に定まる（そのため &lt;code&gt;compose&lt;/code&gt; と &lt;code&gt;pos&lt;/code&gt; の &lt;code&gt;Apply&lt;/code&gt; メソッドの数字は同じになる）．&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;Top&lt;/code&gt; 構造体はダミーメソッドのために追加された構造体だ．&lt;/p&gt;
&lt;h3 id=&#34;ダミーメソッドが有効な例&#34;&gt;ダミーメソッドが有効な例&lt;/h3&gt;
&lt;p&gt;さて，上記の例ではダミーメソッドの有効性がわからないので，もう一つ例を示す． 前にちょっとだけ出てきた &lt;code&gt;List&lt;/code&gt; インターフェースの完全な例を示す． 下記は FGG でのコードだ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; List(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;    Map(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; b Any)(f Function(a, b)) List(b)&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Nil(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Cons(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;    head a&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;    tail List(a)&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any)) Map(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; b Any)(f Function(a,b)) List(b) {&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Nil(b){}&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any)) Map(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; b Any)(f Function(a,b)) List(b) {&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Cons(b){f.Apply(xs.head), xs.tail.Map(b)(f)}&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; xs List(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) = Cons(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;){&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, Cons(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;){&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;, Nil(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;){}}}&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; ys List(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) = xs.Map(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;)(incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;})&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; _ List(&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;) = ys.Map(&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;)(pos{})&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt; インターフェースは，配列のようなコンテナ型の各要素に同じメソッドを適用する高階関数を提供する． &lt;code&gt;Nil&lt;/code&gt; と &lt;code&gt;Cons&lt;/code&gt; 構造体は線形リストを表したものだ． ちなみに，Go の構造体は構造体による再帰的な構造を宣言することはできないが，インターフェースを介する場合は可能だ．&lt;/p&gt;
&lt;p&gt;さて，これを単相化すると次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; xs List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; = Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;{&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;{&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;, Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;}}&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; ys List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; = xs.Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(incr{-&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;})&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; _ List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; = ys.Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(pos{})&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;    Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&amp;gt;() Top &lt;span class=&#34;co&#34;&gt;// これは `(f Function(int, b)) List(b)` からの数字&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;    Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;    Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;{}&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;{}&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-23&#34;&gt;&lt;a href=&#34;#cb7-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-24&#34;&gt;&lt;a href=&#34;#cb7-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-25&#34;&gt;&lt;a href=&#34;#cb7-25&#34;&gt;&lt;/a&gt;    head &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-26&#34;&gt;&lt;a href=&#34;#cb7-26&#34;&gt;&lt;/a&gt;    tail List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb7-27&#34;&gt;&lt;a href=&#34;#cb7-27&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-28&#34;&gt;&lt;a href=&#34;#cb7-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-29&#34;&gt;&lt;a href=&#34;#cb7-29&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;{f.Apply(xs.head), xs.tail.Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(f)}&lt;/span&gt;
&lt;span id=&#34;cb7-30&#34;&gt;&lt;a href=&#34;#cb7-30&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-31&#34;&gt;&lt;a href=&#34;#cb7-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(f Function&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-32&#34;&gt;&lt;a href=&#34;#cb7-32&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;{f.Apply(xs.head), xs.tail.Map&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;(f)}&lt;/span&gt;
&lt;span id=&#34;cb7-33&#34;&gt;&lt;a href=&#34;#cb7-33&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-34&#34;&gt;&lt;a href=&#34;#cb7-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb7-35&#34;&gt;&lt;a href=&#34;#cb7-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb7-36&#34;&gt;&lt;a href=&#34;#cb7-36&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-37&#34;&gt;&lt;a href=&#34;#cb7-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-38&#34;&gt;&lt;a href=&#34;#cb7-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-39&#34;&gt;&lt;a href=&#34;#cb7-39&#34;&gt;&lt;/a&gt;    Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&amp;gt;() Top&lt;/span&gt;
&lt;span id=&#34;cb7-40&#34;&gt;&lt;a href=&#34;#cb7-40&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-41&#34;&gt;&lt;a href=&#34;#cb7-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-42&#34;&gt;&lt;a href=&#34;#cb7-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb7-43&#34;&gt;&lt;a href=&#34;#cb7-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Nil&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb7-44&#34;&gt;&lt;a href=&#34;#cb7-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb7-45&#34;&gt;&lt;a href=&#34;#cb7-45&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-46&#34;&gt;&lt;a href=&#34;#cb7-46&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-47&#34;&gt;&lt;a href=&#34;#cb7-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-48&#34;&gt;&lt;a href=&#34;#cb7-48&#34;&gt;&lt;/a&gt;    head &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-49&#34;&gt;&lt;a href=&#34;#cb7-49&#34;&gt;&lt;/a&gt;    tail List&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span id=&#34;cb7-50&#34;&gt;&lt;a href=&#34;#cb7-50&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb7-51&#34;&gt;&lt;a href=&#34;#cb7-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (xs Cons&amp;lt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt;&amp;gt;) Map&amp;lt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&amp;gt;() Top {&lt;/span&gt;
&lt;span id=&#34;cb7-52&#34;&gt;&lt;a href=&#34;#cb7-52&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Top{}&lt;/span&gt;
&lt;span id=&#34;cb7-53&#34;&gt;&lt;a href=&#34;#cb7-53&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; の &lt;code&gt;Map&lt;/code&gt; メソッドは &lt;code&gt;main&lt;/code&gt; のところで &lt;code&gt;int -&amp;gt; int&lt;/code&gt; と &lt;code&gt;int -&amp;gt; bool&lt;/code&gt; の2パターンで使われていたため，2つもインターフェースのメソッドとして宣言されている． 対して &lt;code&gt;List&amp;lt;bool&amp;gt;&lt;/code&gt; は &lt;code&gt;ys.Map&amp;lt;bool&amp;gt;(pos{})&lt;/code&gt; で生成されるものの，&lt;code&gt;Map&lt;/code&gt; メソッドを呼んでいないため，インターフェースのメソッドは1つもない． このようにインターフェースのメソッドは，実際に利用された型のものしか生成されない． これにより，メソッドの無いインターフェースが生成されることがある（正確にはダミーメソッド以外には無い，だが）． ダミーメソッドはこのような振る舞いに対して有効だ．例えば，変数 &lt;code&gt;f&lt;/code&gt; に &lt;code&gt;incr{1}&lt;/code&gt; が束縛されているときを考える． 型アサーション &lt;code&gt;f.(List&amp;lt;bool&amp;gt;)&lt;/code&gt; はダミーメソッドがあることで失敗するが，ダミーメソッドがないと成功してしまう．&lt;/p&gt;
&lt;h3 id=&#34;単相化ができない場合&#34;&gt;単相化ができない場合&lt;/h3&gt;
&lt;p&gt;全ての型付け可能な FGG のコードが単相化可能かというとそうではない． 例えば，次のような FGG のコードは単相化できない．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Box(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any) &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;    value a&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (this Box(&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; a Any)) Nest(n &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;) Any {&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; (n == &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; this&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;    } &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; Box(Box(a)){this}.Nest(n&lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは多相再帰（polymorphic recursion），ある型で呼び出されたメソッドが別の型で再帰呼び出しをするもの，をしているプログラムの例である．&lt;code&gt;Box(a)&lt;/code&gt; 型をレシーバーとするメソッド &lt;code&gt;Nest&lt;/code&gt; を呼び出すと &lt;code&gt;Box(Box(a))&lt;/code&gt; 型のレシーバーで再帰的に呼び出される． この例は型がどれだけ深くネストするかを事前に決定することができないので単相化することができない．&lt;/p&gt;
&lt;p&gt;逆に，このような多相再帰なコードが含まれていない場合は，全ての FGG のコードを単相化することができる（ことを論文で証明していた）． なので，実際のコンパイラでは多相再帰が含まれてるかどうかの検査をするようだ．&lt;/p&gt;
&lt;h3 id=&#34;単相化の仕組み&#34;&gt;単相化の仕組み&lt;/h3&gt;
&lt;p&gt;単相化のプロセスは2つのフェーズから構成されている． 第一フェーズは，FGG プログラムから型とメソッドのインスタンス（型パラメーターを具体化したものだと思う）を取集する． 第二フェーズでは，第一フェーズで収集したインスタンスをもとにして，FGG プログラムを等価な FG プログラムへと変換する．&lt;/p&gt;
&lt;p&gt;FGG のプログラム &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; から，各インスタンスの集合 &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;Ω&lt;/em&gt;&lt;/span&gt; を収集した場合は &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt; ▸ &lt;em&gt;Ω&lt;/em&gt;&lt;/span&gt; と記述する（これが第一フェーズ）．FGG のプログラム &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; から FG のプログラム &lt;span class=&#34;math inline&#34;&gt;&lt;em&gt;P&lt;/em&gt;′&lt;/span&gt; への変換は &lt;span class=&#34;math inline&#34;&gt; ⊢ &lt;em&gt;P&lt;/em&gt; ↦ &lt;em&gt;P&lt;/em&gt;′&lt;/span&gt; と記述する．&lt;/p&gt;
&lt;p&gt;論文ではこれらの規則を形式的に定義している（がここでは割愛）．&lt;/p&gt;
&lt;h3 id=&#34;他言語と単相化&#34;&gt;他言語と単相化&lt;/h3&gt;
&lt;p&gt;7章の「RELATED WORK」では，他のプログラミング言語での単相化の事例について紹介されていた．興味深いので論文から引用する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bracha 氏らは「Making the Future Safe for the Past: Adding Genericity to the Java Programming Language」という論文でジェネリクス付きの Java からジェネリクスなしの Java へ，全ての型パラメーターの情報を消去することで変換する方法を提案した（これは単相化では無い）．消去の欠点として消去されたコードは単相化されたコードに比べて（実行？）効率が悪くなることがよくある．一方，消去はコードサイズの増加が線形であるのに対して，単相化はコードサイズが爆発的に増加する可能性がある．&lt;/li&gt;
&lt;li&gt;Kennedy 氏と Syme 氏は「Design and Implementation of Generics for the .NET Common Language Runtime」で .NET Common Language Runtime (CLR) と C# の拡張を開発してジェネリクスをサポートした．これらは特化したコードと共有したコードを混ぜたものを生成する．前者は，各プリミティブ型ごとに個別にコンパイルする（これは単相化に似ている）．後者は，全てのオブジェクト型に対してひとつにコンパイルされる（これは消去に似ている）．&lt;/li&gt;
&lt;li&gt;Stroustrup 氏は「The C++ Programming Language」という書籍の16章で，C++ におけるテンプレートのインスタンス化について述べている（実質，単相化）．これは広く使われているがコードが肥大化するとして悪名高い．&lt;/li&gt;
&lt;li&gt;Benton 氏らは「Compiling Standard ML to Java Bytecodes」という論文で SML’97 プログラムから Java バイトコードへ変換するコンパイラについて述べており，ここで多相性は完全に単相化される．Standard ML では多相的な再帰を禁止しているため，常に単相化することが可能．&lt;/li&gt;
&lt;li&gt;Fluet 氏は &lt;a href=&#34;http://mlton.org/Monomorphise&#34;&gt;MLton のウェブページ&lt;/a&gt;で，SML の最適化コンパイラ MLton で利用している同様のアプローチを紹介している．&lt;/li&gt;
&lt;li&gt;Tolmach 氏と Oliva 氏は「From ML to Ada: Strongly-Typed Language Interoperability via Source Translation」という論文で，MLライクな言語から Agda への型付きの変換を単相化ベースで開発し，その詳細を発表した．FGGのとは異なりサブタイピングに対応しておらず多相再帰もない．&lt;/li&gt;
&lt;li&gt;Jones 氏は「Dictionary-free overloading by partial evaluation」という論文で，Haskell用の型クラスを効率的にコンパイルする方法について述べており，これは単相化に多少似ている．&lt;/li&gt;
&lt;li&gt;Yu 氏らは「Formalization of generics for the .NET common language runtime」で，.NET JIT コンパイラの特化と共有を混ぜるメカニズムの形式化している．この論文では，型と意味論を保持した多相的な .NET の中間言語（IL）への変換を記述している．&lt;/li&gt;
&lt;li&gt;Siek 氏と Taha 氏は「A Semantic Analysis of C++ Templates」という論文で，C++テンプレートのインスタンス化メカニズムを形式化している．&lt;/li&gt;
&lt;li&gt;田中氏らは「Safe Low-level Code Generation in Coq Using Monomorphization and Monadification」という論文で，低レベルのCコードを生成する Coq (Gallina) のための単相化アルゴリズムをレポートしている．&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;実装について&#34;&gt;実装について&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FGとFGGの型検査器とインタプリタ&lt;/li&gt;
&lt;li&gt;FGG から FG への変換器（monomorphiser）のプロトタイプ実装（単相化可能かの検査も含む）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を Go で実装して公開したそうだ． Go で実装したのは Go の設計者やコミュニティとの議論を容易にするためらしい． さらに，これらの実装を使い多くのテストを行ったようだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FG の評価結果を公式の Go コンパイラを使用したものと比較&lt;/li&gt;
&lt;li&gt;FG と FGG インタプリタは保存定理と進行定理の動的な検査をサポート&lt;/li&gt;
&lt;li&gt;単相化をテストするために双模倣性のテストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，&lt;a href=&#34;https://doi.org/10.1017/s0956796815000143&#34;&gt;NEAT&lt;/a&gt; を利用して FGG のサブセットから全ての正しく型付けされたプログラム（ただし，メソッドと型の出現巣の合計を指定して，ある程度のサイズまでに限定した上で）を列挙もしたらしい（SmallCheck に似ているらしい）． このサブセットに含まれる全ての FGG プログラムをサイズ20まで生成して，上述した双模倣性のテストが通ったことを確認したそうだ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;今後は C# のような，型のランタイム表現を渡すことに基づいた実装を検討して，単相化と組み合わせる方法を模索するらしい． あと，代入・配列・スライス・パッケージなどの他の重要な機能のモデル化も計画してるらしく，これを Bantamweight Go と呼ぶつもりらしい． さらに，「goroutines」とメッセージパッシングに基づくGoの並行メカニズムのモデル化も計画していて，これを Cruiserweight Go と呼ぶらしい． いったい素の Go は何級なんだろう笑&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html</id><title type="text">Hamler の Docker イメージを作る</title><updated>2020-06-13T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;a href=&#34;https://www.hamler-lang.org/&#34;&gt;Hamler&lt;/a&gt; という ErlangVM 上で動作する Haskell に似た構文のプログラミング言語が公開された． 手元で遊ぶためにまず，Docker イメージを作ってみることにした（brew したくなかった）． &lt;a href=&#34;https://hub.docker.com/repository/docker/matsubara0507/hamler&#34;&gt;作成したイメージはココ&lt;/a&gt;で&lt;a href=&#34;https://github.com/matsubara0507/docker-hamler&#34;&gt;リポジトリはココ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;ちなみに，今回利用するバージョンは &lt;code&gt;0.1&lt;/code&gt; です．&lt;/p&gt;
&lt;h2 id=&#34;docker-イメージを作る&#34;&gt;Docker イメージを作る&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/erlang/docker-erlang-otp/blob/ed3bd9400e1b72b2bdd08596990f8ed3350a75c0/22/Dockerfile#L1&#34;&gt;公式の Erlang の Docker イメージは Debian&lt;/a&gt; なので，Debian の Docker イメージを作る． 現状は Mac 用のバイナリしか提供されていないので自前でビルドする必要がある． 自前でビルドする方法は&lt;a href=&#34;https://github.com/hamler-lang/hamler/tree/2ed8e6088721471a4dd7993eb6a984fb7ce66a73#installation&#34;&gt;公式ドキュメント&lt;/a&gt;によると次の通り：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Erlang インストール&lt;/li&gt;
&lt;li&gt;Haskell Stack をインストール&lt;/li&gt;
&lt;li&gt;hamler-lang/hamler リポジトリをクローン&lt;/li&gt;
&lt;li&gt;リポジトリで &lt;code&gt;make &amp;amp;&amp;amp; make install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;幸いにも，Hamler は Haskell Stack でビルドできるので簡単だ．&lt;/p&gt;
&lt;h3 id=&#34;コンパイラをビルドする&#34;&gt;コンパイラをビルドする&lt;/h3&gt;
&lt;p&gt;まずは Stack をインストールしよう：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# マルチステージビルドをするので AS でタグづけしておく&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; OTP_VERSION=22.3.4.1&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION} AS build&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /work&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; curl -sSL https://get.haskellstack.org/ | sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次にリポジトリを &lt;code&gt;git clone&lt;/code&gt; してビルドする：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_VERSION=0.1&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，&lt;code&gt;make&lt;/code&gt; というか中身は &lt;code&gt;stack build&lt;/code&gt; のところで次のようなエラーが出た：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Package&lt;/span&gt; index cache populated&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Cloning&lt;/span&gt; afb0b731ff457d278403ab4bc134d3c88e09ea1f from git@github.com:hamler-lang/CoreErlang.git&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Received&lt;/span&gt; ExitFailure 128 when running&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Raw&lt;/span&gt; command: /usr/bin/git clone git@github.com:hamler-lang/CoreErlang.git /tmp/with-repo10/cloned&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Standard&lt;/span&gt; error:&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Cloning&lt;/span&gt; into &lt;span class=&#34;st&#34;&gt;&amp;#39;/tmp/with-repo10/cloned&amp;#39;&lt;/span&gt;...&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Host&lt;/span&gt; key verification failed.&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;fatal&lt;/span&gt;: Could not read from remote repository.&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Please&lt;/span&gt; make sure you have the correct access rights&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;and&lt;/span&gt; the repository exists.&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;make&lt;/span&gt;: *** [Makefile:9: build] Error 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは stack.yaml の &lt;code&gt;extra-deps&lt;/code&gt; で次のように指定していたからだ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git@github.com:hamler-lang/CoreErlang.git&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; afb0b731ff457d278403ab4bc134d3c88e09ea1f&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git@github.com:hamler-lang/purescript.git&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 2c43709229b12e72dfc550ccf3efce6bfa60da72&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;git@github.com:owner/repo.git&lt;/code&gt; という形で指定すると SSH を利用した方法で &lt;code&gt;git clone&lt;/code&gt; をするのだが，この Docker 環境では SSH の設定をしていないのでエラーになる． なので，次のように書き換えてあげれば良い：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/CoreErlang&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; afb0b731ff457d278403ab4bc134d3c88e09ea1f&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; hamler-lang/purescript&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 2c43709229b12e72dfc550ccf3efce6bfa60da72&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように修正した &lt;code&gt;stack.yaml&lt;/code&gt; を用意して上書きすることにした：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_VERSION=0.1&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; stack.yaml hamler/stack.yaml&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;余談だが，これについては&lt;a href=&#34;https://github.com/hamler-lang/hamler/pull/157&#34;&gt;修正PRを出してマージされた&lt;/a&gt;ので次のバージョンからは必要ない． で，今度は次のようなエラーが出た：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; configure&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Configuring language-javascript-0.7.0.0...&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; build&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Preprocessing library for language-javascript-0.7.0.0..&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;language-javascript&lt;/span&gt;              &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; happy: src/Language/JavaScript/Parser/Grammar7.y: hGetContents: invalid argument (invalid byte sequence)&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;--&lt;/span&gt;  While building package language-javascript-0.7.0.0 using:&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ex&#34;&gt;/root/.stack/setup-exe-cache/x86_64-linux-tinfo6/Cabal-simple_mPHDZzAJ_2.4.0.1_ghc-8.6.5&lt;/span&gt; --builddir=.stack-work/dist/x86_64-linux-tinfo6/Cabal-2.4.0.1 build --ghc-options &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;Process&lt;/span&gt; exited with code: ExitFailure 1&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;make&lt;/span&gt;: *** [Makefile:9: build] Error 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい，親の顔よりも見る &lt;code&gt;hGetContents: invalid argument (invalid byte sequence)&lt;/code&gt; ですね． language-javascript パッケージは UTF-8 前提なので &lt;code&gt;LC_ALL&lt;/code&gt; 環境変数を UTF-8 にしてあげる必要がある：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; HAMLER_VERSION=0.1&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; stack.yaml hamler/stack.yaml&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd hamler &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでコンパイラのビルドは成功した！&lt;/p&gt;
&lt;h3 id=&#34;replを試すまで&#34;&gt;REPLを試すまで&lt;/h3&gt;
&lt;p&gt;マルチステージビルドなのでビルドしたコンパイラを次のステージにコピーしよう：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /root/.local/bin/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/local/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに &lt;code&gt;--help&lt;/code&gt; をしてみる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; run --rm matsubara0507/hamler --help&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Usage&lt;/span&gt;: hamler COMMAND&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;The&lt;/span&gt; hamler compiler based on purescript v0.13.6&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Available&lt;/span&gt; options:&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;--version&lt;/span&gt;                Show the version number&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-h&lt;/span&gt;,--help                Show this help text&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Available&lt;/span&gt; commands:&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;build&lt;/span&gt;                    Compile hamler source files&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;init&lt;/span&gt;                     init a hamler project&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;run&lt;/span&gt;                      run hamler project&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;repldev&lt;/span&gt;                  dev hamler lib&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;repl&lt;/span&gt;                     run hamler repl&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;For&lt;/span&gt; help using each individual command, run &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt; COMMAND --help&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;. For&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;example&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt; build --help&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt; displays options specific to the &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt; command.&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt; 0.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;動作確認するために REPL を試してみる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; run -it --rm matsubara0507/hamler repl&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt;: //src: getDirectoryContents:openDirStream: does not exist (No such file or directory)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;グローバルな環境で REPL は使えないっぽいのでプロジェクトを作成してみる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; run --rm -w /work -v &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;/example:/work matsubara0507/hamler init&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; run -it --rm -w /work -v &lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;`&lt;/span&gt;/example:/work matsubara0507/hamler repl&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;hamler&lt;/span&gt;: /usr/local/lib/hamler/lib: getDirectoryContents:openDirStream: does not exist (No such file or directory)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/usr/local/lib/hamler/lib&lt;/code&gt; ？？？ いったいこれはどこで参照してるやつだ？？？と思ってリポジトリで色々調べてみたところ，どうやら標準ライブラリかなんかを参照してるっぽい． バグかな？って思ったけど &lt;a href=&#34;https://github.com/hamler-lang/homebrew-hamler/blob/0.1/Formula/hamler.rb#L38-L40&#34;&gt;&lt;code&gt;brew&lt;/code&gt; の設定&lt;/a&gt;をみてみたらリポジトリっぽいのを &lt;code&gt;/usr/local/lib/hamler&lt;/code&gt; にシンボリックリンクしてるようだった． なので，試しにそうしてみる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /root/.local/bin/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /work/hamler /usr/local/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/local/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今度はこういうエラーが出た：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler repl&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;/work&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;hamler: /usr/local/lib/hamler/bin/replsrv: start replsrv error!! : runInteractiveProcess: exec: does not exist (No such file or directory)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;bin/replsrv&lt;/code&gt; ？？？ &lt;code&gt;brew&lt;/code&gt; でインストールしてる tgz の中身をみてみたら &lt;code&gt;bin&lt;/code&gt; ディレクトリがあり，そこには &lt;code&gt;replsrv&lt;/code&gt; と &lt;code&gt;hamler&lt;/code&gt; というファイルがあった． &lt;code&gt;hamler&lt;/code&gt; はコンパイラのバイナリで，&lt;code&gt;replsrv&lt;/code&gt; は Erlang のスクリプトだった． 探してみたら &lt;code&gt;repl/replsrv&lt;/code&gt; という Erlang スクリプトがリポジトリにあり，&lt;code&gt;diff&lt;/code&gt; してみたら tgz のものと一緒だった． なのでこれをコピーするようにした：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; erlang:${OTP_VERSION}&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /root/.local/bin/hamler /usr/local/bin/hamler&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=build /work/hamler /usr/local/lib/hamler&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir /usr/local/lib/hamler/bin \&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; cp /usr/local/lib/hamler/repl/replsrv /usr/local/lib/hamler/bin&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/usr/local/bin/hamler&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんとこれで REPL が動作した：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler repl
&amp;quot;/work&amp;quot;
Compiling Data.Void
...
Compiling Main
Compiling Demo.GenServer
PSCi, version 0.13.6
Type :? for help

&amp;gt; :?
The following commands are available:

    :?                        Show this help menu
    :quit                     Quit PSCi
    :reload                   Reload all imported modules while discarding bindings
    :clear                    Discard all imported modules and declared bindings
    :browse      &amp;lt;module&amp;gt;     See all functions in &amp;lt;module&amp;gt;
    :type        &amp;lt;expr&amp;gt;       Show the type of &amp;lt;expr&amp;gt;
    :kind        &amp;lt;type&amp;gt;       Show the kind of &amp;lt;type&amp;gt;
    :show        import       Show all imported modules
    :show        loaded       Show all loaded modules
    :show        print        Show the repl&amp;#39;s current printing function
    :paste       paste        Enter multiple lines, terminated by ^D
    :complete    &amp;lt;prefix&amp;gt;     Show completions for &amp;lt;prefix&amp;gt; as if pressing tab
    :print       &amp;lt;fn&amp;gt;         Set the repl&amp;#39;s printing function to &amp;lt;fn&amp;gt; (which must be fully qualified)
    :set         pro val      Set the pro&amp;#39;s val

Further information is available on the PureScript documentation repository:
 --&amp;gt; https://github.com/purescript/documentation/blob/master/guides/PSCi.md
&amp;gt; 1 + 1
2
&amp;gt; :type 1
Integer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;やったね．&lt;/p&gt;
&lt;h2 id=&#34;おまけサンプルプログラム&#34;&gt;おまけ：サンプルプログラム&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hamler-lang/documentation/blob/60607565253a2b6fa3984067cf068c20ec971d69/guides/01_WhyHamler.md#erlang-and-concurrency&#34;&gt;ここにあるサンプルプログラム&lt;/a&gt;をビルドして実行してみた：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- `hamler run` は Main.main 関数を実行するみたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-4&#34;&gt;&lt;a href=&#34;#cb17-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- メインプロセスのプロセスIDを取得&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-5&#34;&gt;&lt;a href=&#34;#cb17-5&#34;&gt;&lt;/a&gt;  pid0 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; selfPid&lt;/span&gt;
&lt;span id=&#34;cb17-6&#34;&gt;&lt;a href=&#34;#cb17-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `spawn` は子プロセスの生成、`seqio` は IO 専用の `sequence`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-7&#34;&gt;&lt;a href=&#34;#cb17-7&#34;&gt;&lt;/a&gt;  pid100 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; seqio [spawn loop (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid0) &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb17-8&#34;&gt;&lt;a href=&#34;#cb17-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `last` はリストの最後の要素を、`init` はリストの最後以外の部分リストを返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-9&#34;&gt;&lt;a href=&#34;#cb17-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `[x|xs]` は Haskell の `x:xs`、つまりリストの中身を1つずらしてる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-10&#34;&gt;&lt;a href=&#34;#cb17-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `send` は指定したプロセスにメッセージを送信する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-11&#34;&gt;&lt;a href=&#34;#cb17-11&#34;&gt;&lt;/a&gt;  seqio [send j (&lt;span class=&#34;dt&#34;&gt;Next&lt;/span&gt; i) &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; (i,j) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;zip&lt;/span&gt; pid100 [&lt;span class=&#34;fu&#34;&gt;last&lt;/span&gt; pid100&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; pid100]) ]&lt;/span&gt;
&lt;span id=&#34;cb17-12&#34;&gt;&lt;a href=&#34;#cb17-12&#34;&gt;&lt;/a&gt;  send (&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; pid100) (&lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;great hamler! &amp;quot;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb17-13&#34;&gt;&lt;a href=&#34;#cb17-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb17-14&#34;&gt;&lt;a href=&#34;#cb17-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-15&#34;&gt;&lt;a href=&#34;#cb17-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Message&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pid&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-16&#34;&gt;&lt;a href=&#34;#cb17-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-17&#34;&gt;&lt;a href=&#34;#cb17-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-18&#34;&gt;&lt;a href=&#34;#cb17-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;dealMessage ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Message&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-19&#34;&gt;&lt;a href=&#34;#cb17-19&#34;&gt;&lt;/a&gt;dealMessage (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid) (&lt;span class=&#34;dt&#34;&gt;Next&lt;/span&gt; p) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; p)&lt;/span&gt;
&lt;span id=&#34;cb17-20&#34;&gt;&lt;a href=&#34;#cb17-20&#34;&gt;&lt;/a&gt;dealMessage (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid) (&lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; str &lt;span class=&#34;dv&#34;&gt;11111&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid)&lt;/span&gt;
&lt;span id=&#34;cb17-21&#34;&gt;&lt;a href=&#34;#cb17-21&#34;&gt;&lt;/a&gt;dealMessage (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid) (&lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; str i) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-22&#34;&gt;&lt;a href=&#34;#cb17-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt; send pid (&lt;span class=&#34;dt&#34;&gt;Trans&lt;/span&gt; str (i&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb17-23&#34;&gt;&lt;a href=&#34;#cb17-23&#34;&gt;&lt;/a&gt;     pid0 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; selfPid&lt;/span&gt;
&lt;span id=&#34;cb17-24&#34;&gt;&lt;a href=&#34;#cb17-24&#34;&gt;&lt;/a&gt;     println (&lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; pid0 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; pid &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; str &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i)&lt;/span&gt;
&lt;span id=&#34;cb17-25&#34;&gt;&lt;a href=&#34;#cb17-25&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; pid)&lt;/span&gt;
&lt;span id=&#34;cb17-26&#34;&gt;&lt;a href=&#34;#cb17-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-27&#34;&gt;&lt;a href=&#34;#cb17-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;loop ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb17-28&#34;&gt;&lt;a href=&#34;#cb17-28&#34;&gt;&lt;/a&gt;loop s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-29&#34;&gt;&lt;a href=&#34;#cb17-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- `receive` は送信されたメッセージを受信する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-30&#34;&gt;&lt;a href=&#34;#cb17-30&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; receive&lt;/span&gt;
&lt;span id=&#34;cb17-31&#34;&gt;&lt;a href=&#34;#cb17-31&#34;&gt;&lt;/a&gt;  s1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dealMessage s x&lt;/span&gt;
&lt;span id=&#34;cb17-32&#34;&gt;&lt;a href=&#34;#cb17-32&#34;&gt;&lt;/a&gt;  loop s1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Erlang についてはあんまり詳しくないんだが，確かいわゆるアクターモデル的な並行システムだった気がする． 各 Erlang プロセスはメッセージボックス的なのを持っていて，別プロセスから送信することができる． この型検査ってどれぐらいできるのだろうか． さすがに送信・受信の型があってるかまではチェックできなそう（調べてない）．&lt;/p&gt;
&lt;p&gt;で，これをビルドした結果がこちら：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler build
Compiling Data.Void
...
Compiling Demo.GenServer
Compiling Main

$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler run
&amp;lt;0.749.0&amp;gt; -&amp;gt; &amp;lt;0.750.0&amp;gt;: great hamler! 672
&amp;lt;0.80.0&amp;gt; -&amp;gt; &amp;lt;0.81.0&amp;gt;: great hamler! 3
&amp;lt;0.81.0&amp;gt; -&amp;gt; &amp;lt;0.82.0&amp;gt;: great hamler! 4
&amp;lt;0.82.0&amp;gt; -&amp;gt; &amp;lt;0.83.0&amp;gt;: great hamler! 5
...
&amp;lt;0.791.0&amp;gt; -&amp;gt; &amp;lt;0.792.0&amp;gt;: great hamler! 7714
&amp;lt;0.792.0&amp;gt; -&amp;gt; &amp;lt;0.793.0&amp;gt;: great hamler! 7715&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;会社単位で作ってるみたい． すごいなぁ，羨ましい．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-05-31-create-deps-sensor-part1.html</id><title type="text">自分の Haskell プロジェクトの依存パッケージの古さを可視化する（その１）</title><updated>2020-05-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-05-31-create-deps-sensor-part1.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;思いついたツールを自作続けるとこうなりますよね&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-deps-sensor/myprojects.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;時々思いつきで依存パッケージ，Stack プロジェクトであれば resolver をあげるんですけど，いい加減調べるのが大変． と言うことで，どれがどんだけ古くなってるかを可視化するツールを作りました． リポジトリはこちら：&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;iframe width=&#34;320&#34; height=&#34;163&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/repomoving&#34;&gt;&lt;/iframe&gt;&lt;/h1&gt;
&lt;h2 id=&#34;ゴール&#34;&gt;ゴール&lt;/h2&gt;
&lt;p&gt;今回は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集めるのは Haskell Stack プロジェクトのみ&lt;/li&gt;
&lt;li&gt;一覧化するのは stack.yaml に書いてる resolver のみ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だけにする． 気が向いたときに少しずつパワーアップしていく．&lt;/p&gt;
&lt;h3 id=&#34;どうやるか&#34;&gt;どうやるか&lt;/h3&gt;
&lt;p&gt;可視化したいプロジェクトは設定ファイルで指定する形式にする． 自動で集めても良いが，まぁそれはおいおい．&lt;/p&gt;
&lt;p&gt;で，設定をもとにルートにある &lt;code&gt;stack.yaml&lt;/code&gt; ファイルを &lt;a href=&#34;https://developer.github.com/v3/repos/contents/#get-contents&#34;&gt;GitHub API の get-content&lt;/a&gt; を使って取得する． そのファイルを読み込んで YAML をパースして，&lt;code&gt;resolver&lt;/code&gt; あるいは &lt;code&gt;snapshot&lt;/code&gt; を出力する． それだけ．&lt;/p&gt;
&lt;p&gt;これを CLI ツールとして作る．&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;まずは CLI から．&lt;/p&gt;
&lt;h3 id=&#34;cli-ツールの雛形&#34;&gt;CLI ツールの雛形&lt;/h3&gt;
&lt;p&gt;なんと，すでに stack template を用意してあるので簡単：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; new deps-sensor github:matsubara0507/mix-cli.hsfiles&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このテンプレートは自作フレームワーク &lt;a href=&#34;https://github.com/matsubara0507/mix.hs&#34;&gt;mix.hs&lt;/a&gt; を使った CLI ツールのもの． mix.hs は &lt;a href=&#34;https://github.com/fumieval/extensible&#34;&gt;extensible パッケージ&lt;/a&gt;と &lt;a href=&#34;https://github.com/commercialhaskell/rio&#34;&gt;rio パッケージ&lt;/a&gt;を混ぜたような簡単なフレームワークです． で，あとはよしなにモジュール名を整えたら&lt;a href=&#34;https://github.com/matsubara0507/deps-sensor/commit/f6e463f4cdd7a8488fef57364e5aedcd9ba3049b&#34;&gt;出来上がり&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- deps-sensor --help&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;deps-sensor&lt;/span&gt; [options] [input-file]&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-h&lt;/span&gt;  --help     Show this help text&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ex&#34;&gt;--version&lt;/span&gt;  Show version&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-v&lt;/span&gt;  --verbose  Enable verbose mode: verbosity level &lt;span class=&#34;st&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- deps-sensor --version&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Version&lt;/span&gt; 0.1.0, Git revision Sat May 23 14:58:54 2020 +0900 (2 commits)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;設定ファイルを読み取る&#34;&gt;設定ファイルを読み取る&lt;/h3&gt;
&lt;p&gt;まずは型を定義する． 色々考えた結果とりあえず今回はシンプルに：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DepsSensor.Config&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Yaml&lt;/span&gt;       &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;] &lt;span class=&#34;co&#34;&gt;-- expect owner/name&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;readConfig ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;readConfig &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Y.decodeFileThrow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;readConfig&lt;/code&gt; を定義してるのは，&lt;code&gt;Y.decodeFileThrow&lt;/code&gt; を使うときに型注釈をしなくて良くするため． この設定型を RIO の &lt;code&gt;Env&lt;/code&gt; 型に追加する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DepsSensor.Env&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;DepsSensor.Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは CLI 側に追加するだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- runCmd を呼び出す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- FilePath は CLI のコマンドライン引数で渡す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;runCmd opts path &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfig &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;./config.yaml&amp;quot;&lt;/span&gt; path   &lt;span class=&#34;co&#34;&gt;-- ココと&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;             &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logOpts&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixConfig.buildPlugin config  &lt;span class=&#34;co&#34;&gt;-- ココを追記&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;  Mix.run plugin cmd&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;    logOpts &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; stdout&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; (opts &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose)&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで次のような YAML 設定ファイルを読み込めるようになった：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repositories&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/deps-sensor&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-plantation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskell-jp/antenna&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;github-api-で取得&#34;&gt;GitHub API で取得&lt;/h3&gt;
&lt;p&gt;GitHub API も頻繁に使うので&lt;a href=&#34;https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github&#34;&gt;プラグイン化&lt;/a&gt;してる． 次のように &lt;code&gt;Env&lt;/code&gt; 型を拡張して CLI 経由で渡すことで，&lt;code&gt;RIO Env a&lt;/code&gt; 配下ですっごく簡単に GitHub API を呼び出すことができる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Env の拡張&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;github&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub.Token&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 追記&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Main の拡張&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runCmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;runCmd opts path &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;  gToken &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GH_TOKEN&amp;quot;&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- ココと&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; readConfig &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;./config.yaml&amp;quot;&lt;/span&gt; path&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;             &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logOpts&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;github &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixGitHub.buildPlugin gToken  &lt;span class=&#34;co&#34;&gt;-- ココを追記&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixConfig.buildPlugin config&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;  Mix.run plugin cmd&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;呼び出し側はこんな感じ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DepsSensor.Cmd&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fetchStackFileContent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;fetchStackFileContent owner name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (owner&amp;#39;, name&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (GitHub.mkName &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; owner, GitHub.mkName &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; name)&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- MixGitHub.fetch するだけ，簡単でしょ？&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  resp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixGitHub.fetch &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; GitHub.contentsForR owner&amp;#39; name&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;stack.yaml&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; resp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; _        &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- エラー握り潰すのはあれだけど&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; content &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (toFileContent content)&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- get-content API の返り値に含まれるファイルの中身だけを取り出す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toFileContent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub.Content&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;toFileContent &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;GitHub.ContentFile&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; GitHub.contentFileContent c&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;  _                    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;yamlを取り込む&#34;&gt;YAMLを取り込む&lt;/h3&gt;
&lt;p&gt;yaml パッケージを使ってサクッと YAML のデコードをするために，必要な情報だけの簡単なデータ型を作っておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DepsSensor.Cmd&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StackFile&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;resolver&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;snapshot&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toResolver ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StackFile&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;toResolver stackFile &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; stackFile &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;resolver &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; stackFile &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;snapshot&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は1つ問題があって，get-content API で取得した中身は Base64 エンコードされているのだ． なので &lt;code&gt;fetchStackFileContent&lt;/code&gt; 関数で取得した &lt;code&gt;Text&lt;/code&gt; 型の値を Base64 デコードする関数を用意しておこう：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO.Text&lt;/span&gt;                &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteArray.Encoding&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BA&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Yaml&lt;/span&gt;               &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;decodeStackFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StackFile&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;decodeStackFile dat &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- 改行コードを含むので抜いて連結してから memory パッケージを使ってデコードしている&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;  dat&amp;#39; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; BA.convertFromBase &lt;span class=&#34;dt&#34;&gt;BA.Base64&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; T.encodeUtf8 (&lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; T.lines dat)&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;  mapLeft &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Y.decodeEither&amp;#39; dat&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://hackage.haskell.org/package/memory&#34;&gt;memory パッケージ&lt;/a&gt;を使っているのは &lt;a href=&#34;https://hackage.haskell.org/package/cryptonite&#34;&gt;cryptonite パッケージ&lt;/a&gt;でも利用されているから．&lt;/p&gt;
&lt;h3 id=&#34;組み合わせる&#34;&gt;組み合わせる&lt;/h3&gt;
&lt;p&gt;準備は整ったのでこれを連結した処理をループで回すだけだ． ただ，用意したほとんどの関数が &lt;code&gt;Maybe a&lt;/code&gt; 型か &lt;code&gt;Either e a&lt;/code&gt; 型を返すので，このままエラーハンドリングすると段々畑になってしまう． そこで重宝するのが &lt;a href=&#34;https://github.com/matsubara0507/fallible&#34;&gt;fallible パッケージ&lt;/a&gt;だ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO.Text&lt;/span&gt;          &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Fallible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;cmd ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;cmd &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;  repositories &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; asks (view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;repositories &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config)&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;  for_ repositories &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \repo &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; evalContT &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (owner, name) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.drop &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; T.break (&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) repo&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;    content   &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift (fetchStackFileContent owner name) &lt;span class=&#34;op&#34;&gt;!??&lt;/span&gt; warn repo &lt;span class=&#34;st&#34;&gt;&amp;quot;stack.yaml is not found&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;    stackFile &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; decodeStackFile content &lt;span class=&#34;op&#34;&gt;??=&lt;/span&gt; warn repo&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;    resolver  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; toResolver stackFile &lt;span class=&#34;op&#34;&gt;???&lt;/span&gt; warn repo &lt;span class=&#34;st&#34;&gt;&amp;quot;undefined resolver&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;    MixLogger.logInfo (display &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; repo &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; resolver)&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- とりあえず警告するだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;    warn r msg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; exit &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; MixLogger.logWarn (display &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; T.pack msg &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; r)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演算子が3種類も出てきてわかりにくいが - 左が &lt;code&gt;!&lt;/code&gt; の場合は左辺が &lt;code&gt;RIO Env (f a)&lt;/code&gt; になっていて， &lt;code&gt;?&lt;/code&gt; の場合は &lt;code&gt;f a&lt;/code&gt; になっている（&lt;code&gt;f&lt;/code&gt; は &lt;code&gt;Maybe&lt;/code&gt; や &lt;code&gt;Either e&lt;/code&gt;） - 右が &lt;code&gt;=&lt;/code&gt; の場合は右辺で &lt;code&gt;Either e a&lt;/code&gt; の &lt;code&gt;e&lt;/code&gt; を受け取るハンドリングをし，&lt;code&gt;?&lt;/code&gt; の場合は無視する（&lt;code&gt;Maybe&lt;/code&gt; の場合は後者一択）&lt;/p&gt;
&lt;p&gt;で，これを実行するとこんな感じになった：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec -- deps-sensor&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;matsubara0507&lt;/span&gt;/deps-sensor: &lt;span class=&#34;ex&#34;&gt;lts-15.13&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;matsubara0507&lt;/span&gt;/git-plantation: &lt;span class=&#34;ex&#34;&gt;lts-15.5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;haskell-jp&lt;/span&gt;/antenna: &lt;span class=&#34;ex&#34;&gt;lts-14.20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
&lt;p&gt;追々，Webページの生成と http://packdeps.haskellers.com っぽい機能を足したりするつもりです。&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://kurokawh.blogspot.com/2019/11/mac-mojava.html</id><title type="text">[mac] Mojavaクリーンインストール</title><updated>2020-05-06T17:02:25.994+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2019/11/mac-mojava.html"/><summary type="text">Mojavaへのアップデートを契機にmac book airを初期化して環境をクリーンセットアップしました。
自分にとって使いやすい環境の設定手順および、インストールしたアプリ群の情報をメモがわりに残しておきます。



システム環境設定

トラックパッド

軌跡の速さを速くする 
「スクロールとズーム」内の「スクロールの方向」を「ナチュラル」にする
「その他のジェスチャー」内の全てのチェックを外す

アクセシビリティ

マウスとトラックパッド

トラックパッドオプション

「ドラッグを有効にする」にチェック

→ダブルタップでドラッグできるようになる

「ドラッグロックなし」を選択

→トラックパッドから手を離すとドラッグ解除





キーボード

キーボード

F1, F2などのキーを標準のファンクションキーとして利用する：チェック
修飾キー：ControlとOptionを</summary></entry><entry><id>http://kurokawh.blogspot.com/2020/05/linux-gnupg.html</id><title type="text">[linux] gnupgによる暗号化処理時の確認プロンプトを抑制する方法</title><updated>2020-05-06T16:37:57.790+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2020/05/linux-gnupg.html"/><summary type="text">gnupgを用いてファイルを暗号化する際、予めインポートした公開鍵に対してtrust設定をしておかないと、指定した公開鍵毎に以下のような警告が発せられます。


% gpg -e -r abc@test.org a.txt 
gpg: AAAA4C0DD6F2ZZZZ: この鍵が本当に本人のものである、という兆候が、ありません

sub  elg2048/AAAA4C0DD6F2ZZZZ 2020-05-06 Hiroyuki Kurokawa &lt;abc@test.org&gt;
  主鍵フィンガープリント: &lt;snip&gt;
  副鍵フィンガープリント: &lt;snip&gt;

この鍵は、このユーザIDをなのる本人のものかどうか確信でき
ません。今から行うことを＊本当に＊理解していない場合には、
次の質問にはnoと答えてください。

それでもこの鍵を使いますか? (y/N)

以下のオプションを指定する</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-04-20-servant-with-slack-verifying-requests.html</id><title type="text">Haskell Servant で Slack からの署名付きリクエストを受ける</title><updated>2020-04-20T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-04-20-servant-with-slack-verifying-requests.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Slack のスラッシュコマンドなどで利用される署名付きリクエストを Haskell Servant で受ける方法を考えて実装しました． 実装は slackell という Haskell の Slack API パッケージにしてあります：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/slackell&#34;&gt;matsubara0507/slackell - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/slackell/pull/1&#34;&gt;該当 PR はこれです&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;署名付きリクエスト&#34;&gt;署名付きリクエスト&lt;/h2&gt;
&lt;p&gt;スラッシュコマンドなどで Slack からのリクエストを受け取るときに，そのリクエストが本当に該当のスラッシュコマンドから送られてきた正しいリクエストかを検証するには，リクエストパラメーターとして送られてきた検証トークンを確認していた． しかし，この方法は現在では非推奨になっており，代わりにリクエストヘッダーに付いている署名を確認する． 公式ドキュメントは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.slack.com/authentication/verifying-requests-from-slack&#34;&gt;Verifying requests from Slack | Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;署名は &lt;code&gt;X-Slack-Signature&lt;/code&gt; というヘッダーに &lt;code&gt;v0=&lt;/code&gt; というプレフィックス付きで含まれている． このリクエストを受け取ったアプリケーション側は以下の方法で署名をエンコードして比較することで，そのリクエストの正当性を保証する：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;X-Slack-Request-Timestamp&lt;/code&gt; リクエストヘッダーに含まれているタイムスタンプを読む&lt;/li&gt;
&lt;li&gt;バージョン番号・1のタイムスタンプ・リクエストボディの3つを &lt;code&gt;:&lt;/code&gt; 区切りで連結する
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;v0:123456789:command=/weather&amp;amp;text=94070&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;バージョン番号は今のところ全て &lt;code&gt;v0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2の文字列を Slack Apps で取得できる &lt;code&gt;Signing Secret&lt;/code&gt; を使って HMAC SHA256 でエンコード&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;haskellでエンコードする&#34;&gt;Haskellでエンコードする&lt;/h3&gt;
&lt;p&gt;このアルゴリズムを Haskell プログラムで実装する． HMAC SHA256 エンコードには &lt;a href=&#34;https://hackage.haskell.org/package/cryptonite&#34;&gt;cryptonite&lt;/a&gt; パッケージを使った． 2と3の部分を行って署名をエンコードする関数は以下：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.Verify&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;SHA256&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.MAC.HMAC&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HMAC&lt;/span&gt; (..), hmac)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SigningSecret&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SigningSecret&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;IsString&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestTimestamp&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | シークレット・タイムスタンプ・リクエストボディは引数でもらう&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;encodeSignature ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SigningSecret&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestTimestamp&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SHA256&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;encodeSignature (&lt;span class=&#34;dt&#34;&gt;SigningSecret&lt;/span&gt; secret) ts body &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  hmacGetDigest &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; hmac (Text.encodeUtf8 secret) basestr&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;    basestr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; BS.intercalate &lt;span class=&#34;st&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; [Text.encodeUtf8 version, Text.encodeUtf8 ts, body]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最終的な型が &lt;code&gt;Digest SHA256&lt;/code&gt; なので，ヘッダーの方の署名と比較しやすいように文字列からの変換関数も用意しておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;SHA256&lt;/span&gt;, digestFromByteString)&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteArray.Encoding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Base&lt;/span&gt; (..), convertFromBase)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignatureHeader&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;convertSignatureHeader ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignatureHeader&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SHA256&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;convertSignatureHeader sign &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;either&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;) digestFromByteString bs&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    (_, sign&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Text.breakOnEnd (version &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;) sign&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;    bs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; convertFromBase &lt;span class=&#34;dt&#34;&gt;Base16&lt;/span&gt; (Text.encodeUtf8 sign&amp;#39;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;version ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;version &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;v0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで注意しなければいけないのが &lt;code&gt;digestFromByteString&lt;/code&gt; 関数に食わせる &lt;code&gt;ByteString&lt;/code&gt; 型の値は， &lt;code&gt;memory&lt;/code&gt; パッケージの関数を利用して16進数表現から直す必要がある．&lt;/p&gt;
&lt;h2 id=&#34;slash-command-を受け取る&#34;&gt;Slash Command を受け取る&lt;/h2&gt;
&lt;p&gt;署名をエンコードする関数はできたので，あとは Servant でスラッシュコマンドを受け取る方法を考える． まずはスラッシュコマンドから送られてくるリクエストボディの型を宣言しておこう：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;           &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;         &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;            &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;response_url&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;trigger_id&amp;quot;&lt;/span&gt;      &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;         &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;user_name&amp;quot;&lt;/span&gt;       &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;team_id&amp;quot;&lt;/span&gt;         &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;team_domain&amp;quot;&lt;/span&gt;     &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;channel_id&amp;quot;&lt;/span&gt;      &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;channel_name&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;enterprise_id&amp;quot;&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;enterprise_name&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正直，これを調べるのも大変だった． 公式ドキュメントにはどんなパラメータがあるか割愛されてる部分があるからだ．&lt;/p&gt;
&lt;p&gt;で，API の型は雰囲気としてはこんな感じ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Web.Slack は slackell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.Verify&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCmd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;slash&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReqBody&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;FormUrlEncoded&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;X-Slack-Request-Timestamp&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.RequestTimestamp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;X-Slack-Signature&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.SignatureHeader&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで問題が1つ． 署名をエンコードするのに必要なのはデータ型 &lt;code&gt;SlachCmd.RequestData&lt;/code&gt; に変換される前の文字列だ． &lt;code&gt;ToForm&lt;/code&gt; 型クラスを使って元の形（&lt;code&gt;=&lt;/code&gt; と &lt;code&gt;&amp;amp;&lt;/code&gt; で連結するやつ）に戻せば良いと思うかも知れないが，これだと key の順番が変わってしまう可能性があり，順番が変わると別のエンコード結果になってしまう． 逆に文字列のまんま受け取れば良いかと思うかも知れないが，Servant は正しい ContentType な型を指定しないと 400 を返してしまう（スラッシュコマンドは &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; でリクエストしてくる）． 困った． 色々調べたが，後から素のリクエストボディを取得する方法がわからなかった…&lt;/p&gt;
&lt;h3 id=&#34;contenttypeを自作する&#34;&gt;ContentTypeを自作する&lt;/h3&gt;
&lt;p&gt;まぁ無いなら自作するしかない． 素の文字列を返してくれて &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; メディアタイプを表している ContentType な型を作る． どのメディアタイプかは &lt;code&gt;Accept&lt;/code&gt; 型クラスで定義し，どの型で返してくれるかは &lt;code&gt;MimeUnrender&lt;/code&gt; 型クラスで定義する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Accept&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  contentType ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MediaType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;  contentType _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;application&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;M.//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MimeUnrender&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  mimeUnrender ::&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lazy.ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;  mimeUnrender _ bs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Text.unpack &lt;span class=&#34;op&#34;&gt;+++&lt;/span&gt; (bs,) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; urlDecodeAsForm bs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どーせ後から &lt;code&gt;RequestData&lt;/code&gt; 型に変換するので両方を返すことにした． あとはこれを使うだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Web.Slack は slackell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.Verify&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCmd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Web.Slack.SlashCommand&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;slash&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReqBody&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;SlashCommand&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;RequestData&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;X-Slack-Request-Timestamp&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.RequestTimestamp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;X-Slack-Signature&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.SignatureHeader&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;JSON&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;apiの実装&#34;&gt;APIの実装&lt;/h3&gt;
&lt;p&gt;残りは今までのを使うだけなので簡単：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;server ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Slack.SigningSecret&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;server secret &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; slashCommand&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;    slashCommand (lbs, body) (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; ts) (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; sign) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; digest &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Slack.encodeSignature secret ts (LBS.toStrict lbs) &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; digest &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; Slack.convertSignatureHeader sign &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;          _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; forkIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; action body &lt;span class=&#34;co&#34;&gt;-- タイムアウトがあるので処理自体は fork する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;        throwError err401&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;    slashCommand _ _ _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; throwError err401&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    action ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SlashCmd.RequestData&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;    action body &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おまけfromformインスタンス&#34;&gt;おまけ：FromFormインスタンス&lt;/h2&gt;
&lt;p&gt;実はこれだkではビルドが通らない． というのも，拡張可能データ型の &lt;code&gt;FromForm&lt;/code&gt; 型クラスインスタンスが無いからだ． しょうがないので自作した：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.FormUrlEncoded&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FromForm&lt;/span&gt; (..))&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Web.HttpApiData&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FromHttpApiData&lt;/span&gt; (..), parseUnique)&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyTargetAre&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt;) xs &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromForm&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; xs) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;  fromForm form &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;    hgenerateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyTargetAre&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; parseUnique (stringKeyOf m) form&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Identity のインスタンスぐらい宣言しておいてよ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromHttpApiData&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromHttpApiData&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;  parseUrlPiece &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; parseUrlPiece&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これの欠点が1つ． &lt;code&gt;parseUnique&lt;/code&gt; 関数の &lt;code&gt;Maybe a&lt;/code&gt; 型に関する振る舞いだ． &lt;code&gt;Maybe a&lt;/code&gt; 型なら該当の key が含まれなければ &lt;code&gt;Nothing&lt;/code&gt; で key があれば &lt;code&gt;Just v&lt;/code&gt; になって欲しい． しかし実際はこうだ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; parseUnique &lt;span class=&#34;st&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; [(&lt;span class=&#34;st&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Just 25&amp;quot;&lt;/span&gt;)]&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;25&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現実のリクエストが &lt;code&gt;&amp;quot;Just hoge&amp;quot;&lt;/code&gt; なんて送ってくるわけが無い！ しょうがないので自作した：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  parseUnique&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Form&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;   &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; parseUnique&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; parseUnique&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromHttpApiData&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromFormData&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;  parseUnique&amp;#39; key form &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;    mv &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lookupMaybe key form&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mv &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; v  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; parseQueryParam v&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，&lt;code&gt;parseUnique&lt;/code&gt; の代わりに &lt;code&gt;parseUnique&amp;#39;&lt;/code&gt; を使うように &lt;code&gt;FromForm&lt;/code&gt; 型クラスのインスタンスを書き換えるだけだ． これは汎用的なので&lt;a href=&#34;https://github.com/matsubara0507/extensible-ext/tree/master/extensible-http-api-data&#34;&gt;別のリポジトリに切り分けた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/slackell/tree/master/example&#34;&gt;サンプルコード&lt;/a&gt;を作ってスラッシュコマンドのデバッグをしたが，間にちゃんとリクエスト・レスポンスをロギングする仕組みを省いたせいで超大変だった笑．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-04-06-servant-auth-with-github-apps.html</id><title type="text">Haskell Servant に GitHub Apps による認証を追加する</title><updated>2020-04-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-04-06-servant-auth-with-github-apps.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;時々みる「GitHubでログイン」っぽいのを Servant 製サンプルアプリケーションに実装します．&lt;/p&gt;
&lt;p&gt;サンプルアプリケーションは2年前に書いた「&lt;a href=&#34;/posts/2017-09-17-create-haskell-and-elm.html&#34;&gt;Haskell × Elm のサンプルアプリケーションを書いてみた&lt;/a&gt;」という記事のものを，最近の GHC や Elm でリファクタリングして使います． これは簡単な ToDo アプリケーションです：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-haskell-and-elm/sample.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;最終的な実装 PR は&lt;a href=&#34;https://github.com/matsubara0507/haskell-and-elm/pull/2&#34;&gt;これ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;github-apps-による認証&#34;&gt;GitHub Apps による認証&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps&#34;&gt;公式ドキュメント&lt;/a&gt;より&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;GitHub で Apps を登録する
&lt;ul&gt;
&lt;li&gt;Client ID・Client Secret を取得&lt;/li&gt;
&lt;li&gt;callback URL を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ログインする際に &lt;code&gt;https://github.com/login/oauth/authorize?cleint_id=[cleint_id]&lt;/code&gt; へリダイレクトさせる
&lt;ul&gt;
&lt;li&gt;(1)の App の使用を許可するかという画面へ飛ぶ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;許可すると(1)で設定した callback エンドポイントが叩かれる
&lt;ul&gt;
&lt;li&gt;code というリクエストパラメータがついてくる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Client ID・Client Secret と(3)の code を使うことで bearer token が手に入る
&lt;ul&gt;
&lt;li&gt;このトークンを利用することで GitHub ユーザーの情報を取得したりできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(4)を利用して取得した GitHub アカウント名などを Cookie に積んでおく&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;あとは (5) の Cookie の有無によってログイン済みかどうかを判断するだけ（まぁこれは GitHub App とか関係ないよくあるやり方）． つまり問題は Servant でどうやってログイン情報などを Cookie に載せるかということだ．&lt;/p&gt;
&lt;h2 id=&#34;servant-で認証機能&#34;&gt;Servant で認証機能&lt;/h2&gt;
&lt;p&gt;を作るには &lt;a href=&#34;https://hackage.haskell.org/package/servant-auth-server&#34;&gt;servant-auth-server&lt;/a&gt; という Servant 公式のパッケージを使えば良いようだ． 詳しくは以下の公式ドキュメントを読むと良い：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.servant.dev/en/stable/tutorial/Authentication.html&#34;&gt;Authentication in Servant — Servant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;servant-auth-server を利用することで，JWT エンコードした認証情報を Cookie として保存したり，その Cookie の有無によって認証済みかどうかチェックしたりなどができる． 公式ドキュメント以外に特に利用の仕方を解説した記事とか見当たらなくて，結局実装コード読んだり，servant-auth-server パッケージを使ってるリポジトリを GitHub で検索したりして手探りで実装していった．&lt;/p&gt;
&lt;h3 id=&#34;api-の型&#34;&gt;API の型&lt;/h3&gt;
&lt;p&gt;元々はこんな感じ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Blaze.Html5&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;H&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Servant.HTML.Blaze&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HTML&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Get&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;HTML&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;H.Html&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;static&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Raw&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Todo.CRUD&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これに認証機能を追加する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Auth&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;Cookie&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;GitHub.User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protected&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unprotected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Todo.CRUD&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unprotected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Get&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;HTML&lt;/span&gt;] &lt;span class=&#34;dt&#34;&gt;H.Html&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;static&amp;quot;&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Raw&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GetRedirected&lt;/span&gt; &amp;#39;[]&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;callback&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QueryParam&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GetRedirected&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;JWTCookieHeaders&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GetRedirected&lt;/span&gt; headers &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Verb&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;&amp;#39;GET&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;308&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;HTML&lt;/span&gt;] (&lt;span class=&#34;dt&#34;&gt;Headers&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Location&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &amp;#39;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; headers) &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;JWTCookieHeaders&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Set-Cookie&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SetCookie&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Set-Cookie&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SetCookie&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Protected&lt;/code&gt; と &lt;code&gt;Unprotected&lt;/code&gt; 型のように，認証済みの場合だけ利用可能なエンドポイントとそうでないエンドポイントを分けると良いようだ． 今回は &lt;code&gt;/index.html&lt;/code&gt; を認証の外にしたが，別に中にしてもいいと思う． 認証側に &lt;code&gt;Auth &amp;#39;[Cookie] a&lt;/code&gt; を追加することで JWT エンコードされた Cookie の有無で認証済みかを判断し，Cookie があればそれを &lt;code&gt;a&lt;/code&gt; 型へデコードしてくれる． Cookie の付与自体は callback エンドポイントで行う． ちなみに，&lt;code&gt;Set-Cookie&lt;/code&gt; が2つあるのは，1つを CRSF Protection に使うためだ（CRSF Protection については後述）．&lt;/p&gt;
&lt;h3 id=&#34;cookie-と-jwt-の設定&#34;&gt;Cookie と JWT の設定&lt;/h3&gt;
&lt;p&gt;また，Cookie や JWT の設定は Servant の Context 機能で渡す必要がある：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  todoDB       &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; STM.atomically &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; STM.newTVar initTodoDB&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  clientId     &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GITHUB_CLIENT_ID&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  clientSecret &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GITHUB_CLIENT_SECRET&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  jwtSettings  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; defaultJWTSettings &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; generateKey&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; cfg   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cookieSettings &lt;span class=&#34;op&#34;&gt;:.&lt;/span&gt; jwtSettings &lt;span class=&#34;op&#34;&gt;:.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmptyContext&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;      oauth &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;client_id &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; clientId &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;client_secret &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; clientSecret &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;      env   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;index  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; indexHtml&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;cookie &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; cookieSettings&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;jwt    &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; jwtSettings&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;todos  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; todoDB&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;oauth  &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; oauth&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;  Warp.run &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; serveWithContext api cfg (server env)&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;  initTodoDB &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; initTodos, IntMap.fromList initTodos)&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;  cookieSettings &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; defaultCookieSettings&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;    { cookieIsSecure &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NotSecure&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34;&gt;&lt;/a&gt;    , cookieMaxAge &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Time.secondsToDiffTime (&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;60&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34;&gt;&lt;/a&gt;    , cookieXsrfSetting &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-22&#34;&gt;&lt;a href=&#34;#cb3-22&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb3-23&#34;&gt;&lt;a href=&#34;#cb3-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-24&#34;&gt;&lt;a href=&#34;#cb3-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;api ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt; &amp;#39;[&lt;span class=&#34;dt&#34;&gt;Cookie&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb3-25&#34;&gt;&lt;a href=&#34;#cb3-25&#34;&gt;&lt;/a&gt;api &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それぞれの設定は servant-auth-server の &lt;code&gt;defaultCookieSettings&lt;/code&gt; と &lt;code&gt;defaultJWTSettings&lt;/code&gt; を利用すれば良い．&lt;/p&gt;
&lt;p&gt;今回は localhost で利用するようにしてるので &lt;code&gt;cookieIsSecure&lt;/code&gt; に &lt;code&gt;NotSecure&lt;/code&gt; を設定してる（これで HttpOnly になる）が，普通は &lt;code&gt;Secure&lt;/code&gt; のままで良い． &lt;code&gt;cookieXsrfSetting&lt;/code&gt; は前述した CSRF Protection の設定で，デフォルトではオンになっている． オンの場合は Cookie に設定された CSRF Protection 用のトークンをヘッダーに設定してリクエストしないと，Protected な API は弾かれるようになる（Cookie 名は cookieXsrfSetting で設定する）． ちなみに，GET リクエストは CSRF Protection しないという設定も可能だ．&lt;/p&gt;
&lt;p&gt;JWT の設定にはエンコードするための鍵を渡す必要がある． 今回は servant-auth-server の &lt;code&gt;generateKey&lt;/code&gt; 関数を利用している． これは（少なくともバージョン0.4.5.1では）256長の対称鍵（HS256）をランダムに生成してくれる． ランダムに生成したものを利用してるので，起動するたびに Cookie の情報が変わってしまう点に注意． もし，JWTのアルゴリズムや鍵を別のものにしたい場合は &lt;a href=&#34;http://hackage.haskell.org/package/jose&#34;&gt;jose パッケージ&lt;/a&gt; を利用すれば良いはずだ．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;余談だが，Cookie にある JWT のデコードは Servant Context の設定を利用するが，Cookie に積むときはエンドポイントの最後でエンコードをするので，同一の設定をエンドポイントまで橋渡しをしないといけない（ぼくは他方がデフォルトのままになってるのに気付かず3時間溶かした…）．&lt;/p&gt;
&lt;h3 id=&#34;protected-なエンドポイント&#34;&gt;Protected なエンドポイント&lt;/h3&gt;
&lt;p&gt;こんな感じ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;protected ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AuthResult&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub.User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Protected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;protected env (&lt;span class=&#34;dt&#34;&gt;Authenticated&lt;/span&gt; _) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; todoAPI (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;todos)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;protected _ _                   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; throwAll err401&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回はアカウントによってレスポンスの出しわけをしてないので，&lt;code&gt;Authenticated&lt;/code&gt; かどうかだけをみている．&lt;/p&gt;
&lt;h3 id=&#34;ログインエンドポイント&#34;&gt;ログインエンドポイント&lt;/h3&gt;
&lt;p&gt;ログインエンドポイントはただ GitHub の該当 URL へリダイレクトするだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;unprotected ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unprotected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;unprotected env &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;index) &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; serveDirectoryFileServer &lt;span class=&#34;st&#34;&gt;&amp;quot;static&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; login &lt;span class=&#34;op&#34;&gt;:&amp;lt;|&amp;gt;&lt;/span&gt; callback&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    login &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; addHeader (GitHub.authorizeUrl &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;oauth) &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    callback &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- GitHub module&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;authorizeUrl ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OAuthSettings&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;OAuthSettings&lt;/code&gt; は GitHub App の Client ID と Client Secret が保存されている．&lt;/p&gt;
&lt;h3 id=&#34;callback-エンドポイント&#34;&gt;callback エンドポイント&lt;/h3&gt;
&lt;p&gt;最後は callback で，JWT エンコードした認証情報を Cookie に保存すれば良い：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;unprotected ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Unprotected&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;unprotected env &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;    login &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;    callback (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; code) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; GitHub.fetchUser (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;oauth) code &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; throwError err401&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; user &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; liftIO (acceptLogin (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;cookie) (env &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;jwt) user) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;           &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; throwError err401&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; applyCookies &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; addHeader &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; (applyCookies &lt;span class=&#34;dt&#34;&gt;NoContent&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- GitHub module&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fetchUser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OAuthSettings&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;認証情報には GitHub のユーザー情報を利用しており，callback で渡された &lt;code&gt;code&lt;/code&gt; パラメーターを利用して（取得したトークンを利用して）取得する． 認証情報を JWT エンコードして Cookie に埋め込む処理は servant-auth-servar パッケージの &lt;code&gt;acceptLogin&lt;/code&gt; 関数を使うだけで良い．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;これで API 側の準備はできた． あとはフロントを少しいじって出来上がり．&lt;/p&gt;
&lt;h2 id=&#34;フロントにログインボタンを作る&#34;&gt;フロントにログインボタンを作る&lt;/h2&gt;
&lt;p&gt;認証状態を使ってイロイロと出し分けたほうがいいのだが，めんどくさいのでただ &lt;code&gt;/login&lt;/code&gt; へのリンクをおいた：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-3 mx-auto col-10&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;h1&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ToDo List !!&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;loginButton&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewToDos&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewPost&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;loginButton&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;loginButton&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;btn btn-sm btn-outline float-right mt-2&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;type_&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/login&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;color&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;inherit&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;text-decoration-line&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Login by GitHub&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/servant-auth-with-github-apps/sample.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけreaderモナド&#34;&gt;おまけ：Readerモナド&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Env&lt;/code&gt; は Cookie や JWT の設定を保持しているグローバル環境型だ． こういうのは引数としてリレーしても良いが，&lt;code&gt;Reader&lt;/code&gt; モナド使って渡すのがよくある手法だ． Servant の場合は &lt;a href=&#34;https://hackage.haskell.org/package/servant-server-0.17/docs/Servant-Server.html#v:hoistServerWithContext&#34;&gt;&lt;code&gt;hoistServerWithContext&lt;/code&gt;&lt;/a&gt; を使うことで &lt;code&gt;Handler&lt;/code&gt; の代わりに別のモナドを利用できる：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;  Warp.run &lt;span class=&#34;dv&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;    serveWithContext api cfg (hoistServerWithContext api ctx (convert env) server)&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;ctx ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;CookieSettings&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;JWTSettings&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;ctx &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;convert ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;App&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handler&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;convert context app &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runReaderT app context&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;Env -&amp;gt; Server api&lt;/code&gt; みたいな型を &lt;code&gt;ServerT api App&lt;/code&gt; としていくだけ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外とこういう組み合わせに言及した記事がなくて調べるの大変だった． あと一応，実アプリケーションで使うときはちゃんと安全性について別途調べてくださいね（責任は持ちません）．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-04-01-update-dependencies-with-lts15.html</id><title type="text">git-plantation の依存パッケージのバージョンアゲアゲ with LTS-15</title><updated>2020-04-01T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-04-01-update-dependencies-with-lts15.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;自作している git-plantation という Haskell アプリケーションの依存パッケージのバージョンを、Stackage LTS-15 でビルドできるようにバージョンを色々とあげました． 本記事はそのメモ書きです（記事にするほどのことではないんだけど，思ったより色々したので忘れそうだから記事にした笑）．&lt;/p&gt;
&lt;p&gt;ちなみに git-plantation については，&lt;a href=&#34;https://www.slideshare.net/noob00/haskell-191796924&#34;&gt;このスライド&lt;/a&gt;を参照してください． いくつかのパッケージをフォークしたり，ラッパーパッケージを作ったり，そもそも自作したりしてるのでタイミングによっては LTS のメジャーバージョンを一つ上げるだけでも結構大変なのです．&lt;/p&gt;
&lt;h2 id=&#34;ハイライト&#34;&gt;ハイライト&lt;/h2&gt;
&lt;p&gt;ちなみに，元々は LTS 14 だった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GHC のバージョンが 8.8.3 になる（影響はさほどない）&lt;/li&gt;
&lt;li&gt;extensible を 0.8 にする&lt;/li&gt;
&lt;li&gt;github を 0.25 にする&lt;/li&gt;
&lt;li&gt;servant-elm を 0.7.1 にする（これもさほど影響はない）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/git-plantation/pull/58&#34;&gt;最終的なPRはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;extensible-0.8&#34;&gt;extensible-0.8&lt;/h2&gt;
&lt;p&gt;0.8 ではもともと deprecated になっていた関数や型がついに消えたので，利用しっぱなしだったコードがビルドできなくなった：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt; &lt;span class=&#34;ex&#34;&gt;/.../drone-1.0.1/src/Drone/Types&lt;/span&gt;/Cron.hs:&lt;span class=&#34;ex&#34;&gt;25&lt;/span&gt;:44: error:&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;ex&#34;&gt;Not&lt;/span&gt; in scope: type constructor or class ‘:*’&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;ex&#34;&gt;Perhaps&lt;/span&gt; you meant one of these:&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;       ‘:&lt;span class=&#34;kw&#34;&gt;&amp;amp;&lt;/span&gt;’ &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;imported&lt;/span&gt; from Data.Extensible&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;       ‘:/’ &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;imported&lt;/span&gt; from Data.Extensible&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;                  &lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt; &lt;span class=&#34;ex&#34;&gt;25&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;type&lt;/span&gt; CronPatch = Nullable (Field Identity) &lt;span class=&#34;bu&#34;&gt;:&lt;/span&gt;* CronPatchFields&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;                                            ^^&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;消えたのはこれら&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Associate k v xs&lt;/code&gt; =&amp;gt; &lt;code&gt;Lookup xs k v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h :* xs&lt;/code&gt; =&amp;gt; &lt;code&gt;xs :&amp;amp; h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h :| xs&lt;/code&gt; =&amp;gt; &lt;code&gt;xs :/ h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssocKey kv&lt;/code&gt; =&amp;gt; &lt;code&gt;KeyOf kv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssocValue kv&lt;/code&gt; =&amp;gt; &lt;code&gt;TargetOf kv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ValueIs&lt;/code&gt; =&amp;gt; &lt;code&gt;TargetIs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KeyValue&lt;/code&gt; =&amp;gt; &lt;code&gt;KeyTargetAre&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxyAssocKey&lt;/code&gt; =&amp;gt; &lt;code&gt;proxyKeyOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxyAssocValue&lt;/code&gt; =&amp;gt; &lt;code&gt;proxyTargetOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringAssocKey&lt;/code&gt; =&amp;gt; &lt;code&gt;stringKeyOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;訊&lt;/code&gt; =&amp;gt; &lt;code&gt;xlb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上3つは演算子の順番が変わってる点に注意． 他はただ名前を変えただけ（&lt;code&gt;Associate&lt;/code&gt; の名前が変わったためかしら？）．&lt;/p&gt;
&lt;h2 id=&#34;github-0.25&#34;&gt;github-0.25&lt;/h2&gt;
&lt;p&gt;github パッケージは 0.24 でかなり大きなインターフェースの刷新をしており，その影響がデカかった． 今までは一つの API に対して最大3つの関数が用意されていた：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- https://developer.github.com/v3/users/#get-a-single-user の関数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;userInfoFor ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;userInfoFor&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Auth&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;userInfoForR ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Request&lt;/span&gt; k &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ベースは &lt;code&gt;hogeR&lt;/code&gt; 関数で，他はこの関数のラッパー関数だ． 0.24 からは &lt;code&gt;hogeR&lt;/code&gt; 関数だけ残して他の関数は廃止し，&lt;code&gt;github&lt;/code&gt; と &lt;code&gt;github&amp;#39;&lt;/code&gt; の2つの関数を用意した：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- だいたいこういう対応&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;userInfoFor name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; github&amp;#39; (userInfoForR name)&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;userInfoFor&amp;#39; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; auth) name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; github auth (userInfoForR name)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，github パッケージはフォークして足りない API 関数を足して利用していたため，それらの修正（というか &lt;code&gt;hogeR&lt;/code&gt; 以外の削除）をする必要があった． 追加してたけどフォーク元に PR を投げてなかったのはこれらの関数（完全にメモ）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;removeCollaborator&lt;/code&gt; : リポジトリのコラボレーターの削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teamInfoByName&lt;/code&gt; : Organization のチームをチーム名から引く&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addOrUpdateMembership&lt;/code&gt; : Organization メンバーの権限の追加ないしは変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeMembership&lt;/code&gt; : Organization メンバーの権限の削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;servant-elm-0.7.1&#34;&gt;servant-elm-0.7.1&lt;/h2&gt;
&lt;p&gt;ビルドが通らないことはないが生成ファイルが変わったので，念のため差分をチェックした． 少なくとも僕の生成コードに影響があったのは&lt;a href=&#34;https://github.com/haskell-servant/servant-elm/pull/59&#34;&gt;この PR&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using the appropriate toString functions for different types&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要するに，デフォルトで定義しているデータ型以外の型で文字列からJSONデコードするときの振る舞いを自分で定義したいって感じだと思う． たぶん．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;servant-elm は elmap.hs というのでラップしてるのでそっちのアップデートも行った． こっちには生成コードのテストも追加してあるので&lt;a href=&#34;https://github.com/matsubara0507/elmap.hs/pull/1/files#diff-3e612857d13f467c108121bba96a6232&#34;&gt;差分がわかりやすい&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;他にも CI/CD を GitHub Actions にしたりした．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html</id><title type="text">Elm + GitHub OAuth 2.0 (Firebase) のサンプルプログラムを書いてみた</title><updated>2020-02-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;とあるアプリケーションに Elm + GitHub OAuth 2.0 を使ってみたいなと思い，その練習用のアプリケーションを作ってみました：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/elm-github-oauth2-sample&#34;&gt;matsubara0507/elm-github-oauth2-sample - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サンプルのために認可用のサーバーを用意するのがめんどくさかったので，近年話題の Firebase の Authorization 機能を利用することにしました．&lt;/p&gt;
&lt;h2 id=&#34;作ったアプリケーション&#34;&gt;作ったアプリケーション&lt;/h2&gt;
&lt;p&gt;作成した SPA は &lt;a href=&#34;https://matsubara0507.github.io/elm-github-oauth2-sample&#34;&gt;GitHub Pages&lt;/a&gt; に置いてある． ログインっぽいボタンを押すと Firebase Authorization を介して，GitHub OAuth 2.0 での認可がされる． もちろん，もともと試したかったことはここまでだが，認可しておしまいだと味気がない． なので：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;認可時に GitHub OAuth トークンを取得&lt;/li&gt;
&lt;li&gt;トークンを使ってログインしたユーザーの公開リポジトリの情報を取得&lt;/li&gt;
&lt;li&gt;リポジトリのスター数を使ってユーザーのステータスをリッチに描写する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;色々試して最終的にこんな感じ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/page.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;ちょっとやりすぎた．&lt;/p&gt;
&lt;h2 id=&#34;実装する&#34;&gt;実装する&lt;/h2&gt;
&lt;p&gt;やったことは3ステップ&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Elm と Firebase を繋ぐ&lt;/li&gt;
&lt;li&gt;リポジトリを取得（GraphQL）&lt;/li&gt;
&lt;li&gt;円グラフを描写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2と3は完全におまけですね．&lt;/p&gt;
&lt;h3 id=&#34;elm-と-firebase&#34;&gt;Elm と Firebase&lt;/h3&gt;
&lt;p&gt;まずは Firebase を準備する． &lt;a href=&#34;https://firebase.google.com/docs/auth/web/github-auth?hl=ja&#34;&gt;公式サイトの手順&lt;/a&gt;がしっかりしてるので，それに習って準備する（GitHub App の設定とか）． プロバイダ（今回は GitHub）の設定と JavaScript のアプリの設定をすると「コレをコピペしてね」っていう設定とかが出てくる． コレを index.html と index.js に書いておく：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode html&#34;&gt;&lt;code class=&#34;sourceCode html&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;&amp;lt;!doctype &lt;/span&gt;html&lt;span class=&#34;dt&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; http-equiv=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; charset=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; rel=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; href=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://unpkg.com/@primer/css@14.2.0/dist/primer.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; id=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;elm-node&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- firebase-app と firebase-auth が必要 --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-app.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-auth.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- static/main.js は Elm からあとで生成する --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;static/main.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;&amp;lt;!-- static/index.js は下記 --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; src=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;static/index.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode js&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// static/index.js&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// コレらの設定は公開してもいいらしいけど&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; firebaseConfig &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;apiKey&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;authDomain&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;databaseURL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;projectId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;storageBucket&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;messagingSenderId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;appId&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;}&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;initializeApp&lt;/span&gt;(firebaseConfig)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; provider &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;GithubAuthProvider&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは Elm から Firebase のメソッドを呼び出す． 基本的にコレを参考にした：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ababup1192/items/f27f9af282d9fa642eb5&#34;&gt;Elm portsでFirebase Firestoreを触ろう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm 用の Firebase パッケージ的なのはないので，Elm のポート機能を使って繋ぎ込む：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Encode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signIn&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getSignInResult&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signedIn&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Value&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode js&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// static/index.js&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Elm&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;dt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;signIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;subscribe&lt;/span&gt;(_ &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;// popup の方はモバイル系でうまく動作しなかったのでこっちを使う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;  firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;auth&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signInWithRedirect&lt;/span&gt;(provider)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;})&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;getSignInResult&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;subscribe&lt;/span&gt;(_ &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;  firebase&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;auth&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getRedirectResult&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(result) {&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (result&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;credential&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;      app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;signedIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;send&lt;/span&gt;(result)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;  })&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(error) {&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;    app&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;failSignIn&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;send&lt;/span&gt;(error)&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;  })&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;})&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;繋ぎ込みはできた． サクッとトークンだけもらって，GitHub API v3 からユーザー名を取得する部分を実装する：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Encode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;identity&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;credential&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;accessToken&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;tokenDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;signedIn&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;decodeValue&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは適当に &lt;code&gt;Main&lt;/code&gt; から呼び出すだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- import は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;application&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signedInWithDecode&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;onUrlRequest&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LinkClicked&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;onUrlChange&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlChanged&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Nav&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-23&#34;&gt;&lt;a href=&#34;#cb7-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LinkClicked&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;UrlRequest&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-24&#34;&gt;&lt;a href=&#34;#cb7-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlChanged&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-25&#34;&gt;&lt;a href=&#34;#cb7-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-26&#34;&gt;&lt;a href=&#34;#cb7-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-27&#34;&gt;&lt;a href=&#34;#cb7-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-28&#34;&gt;&lt;a href=&#34;#cb7-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-29&#34;&gt;&lt;a href=&#34;#cb7-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nav&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-30&#34;&gt;&lt;a href=&#34;#cb7-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getSignInResult&lt;/span&gt; () )&lt;/span&gt;
&lt;span id=&#34;cb7-31&#34;&gt;&lt;a href=&#34;#cb7-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-32&#34;&gt;&lt;a href=&#34;#cb7-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-33&#34;&gt;&lt;a href=&#34;#cb7-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-34&#34;&gt;&lt;a href=&#34;#cb7-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-35&#34;&gt;&lt;a href=&#34;#cb7-35&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- URL 系は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-36&#34;&gt;&lt;a href=&#34;#cb7-36&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-37&#34;&gt;&lt;a href=&#34;#cb7-37&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;signIn&lt;/span&gt; () )&lt;/span&gt;
&lt;span id=&#34;cb7-38&#34;&gt;&lt;a href=&#34;#cb7-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-39&#34;&gt;&lt;a href=&#34;#cb7-39&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-40&#34;&gt;&lt;a href=&#34;#cb7-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;SignedIn&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-41&#34;&gt;&lt;a href=&#34;#cb7-41&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;errorToString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;) }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-42&#34;&gt;&lt;a href=&#34;#cb7-42&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-43&#34;&gt;&lt;a href=&#34;#cb7-43&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-44&#34;&gt;&lt;a href=&#34;#cb7-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;FetchUser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-45&#34;&gt;&lt;a href=&#34;#cb7-45&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch github user error&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb7-46&#34;&gt;&lt;a href=&#34;#cb7-46&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-47&#34;&gt;&lt;a href=&#34;#cb7-47&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Document&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-48&#34;&gt;&lt;a href=&#34;#cb7-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Elm GitHub OAuth 2.0 Sample&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&#34;cb7-49&#34;&gt;&lt;a href=&#34;#cb7-49&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-50&#34;&gt;&lt;a href=&#34;#cb7-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-51&#34;&gt;&lt;a href=&#34;#cb7-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewBody&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-52&#34;&gt;&lt;a href=&#34;#cb7-52&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;position-relative text-center&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-53&#34;&gt;&lt;a href=&#34;#cb7-53&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-54&#34;&gt;&lt;a href=&#34;#cb7-54&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-55&#34;&gt;&lt;a href=&#34;#cb7-55&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;err&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-56&#34;&gt;&lt;a href=&#34;#cb7-56&#34;&gt;&lt;/a&gt;            ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-57&#34;&gt;&lt;a href=&#34;#cb7-57&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-58&#34;&gt;&lt;a href=&#34;#cb7-58&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-59&#34;&gt;&lt;a href=&#34;#cb7-59&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-60&#34;&gt;&lt;a href=&#34;#cb7-60&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb7-61&#34;&gt;&lt;a href=&#34;#cb7-61&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-62&#34;&gt;&lt;a href=&#34;#cb7-62&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-63&#34;&gt;&lt;a href=&#34;#cb7-63&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;signinButton&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-64&#34;&gt;&lt;a href=&#34;#cb7-64&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3 mt-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-65&#34;&gt;&lt;a href=&#34;#cb7-65&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-66&#34;&gt;&lt;a href=&#34;#cb7-66&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;dt&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SignIn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-67&#34;&gt;&lt;a href=&#34;#cb7-67&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-68&#34;&gt;&lt;a href=&#34;#cb7-68&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb7-69&#34;&gt;&lt;a href=&#34;#cb7-69&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Sign in with GitHub&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb7-70&#34;&gt;&lt;a href=&#34;#cb7-70&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb7-71&#34;&gt;&lt;a href=&#34;#cb7-71&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-72&#34;&gt;&lt;a href=&#34;#cb7-72&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-73&#34;&gt;&lt;a href=&#34;#cb7-73&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コレを&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make --output=docs/static/main.js src/Main.elm --optimize&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とビルドして &lt;code&gt;elm reactor&lt;/code&gt; で &lt;code&gt;docs/index.html&lt;/code&gt; にアクセスすると、サインインボタンがあってサインインすると &lt;code&gt;Hi matsubara0507!&lt;/code&gt; って感じのメッセージが出るだけの SPA ができた．&lt;/p&gt;
&lt;h3 id=&#34;リポジトリを取得&#34;&gt;リポジトリを取得&lt;/h3&gt;
&lt;p&gt;こっからは完全におまけ． リポジトリのスターをなんかステータスっぽく表示するようにしたい．&lt;/p&gt;
&lt;p&gt;リポジトリ一覧は GitHub の個別ユーザーページをモバイル版でみたときの感じにすることにした：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/mobile.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;必要なリポジトリの情報は名前とリンクと総スター数． GitHub API v3 は無駄な情報が多いので，GraphQL を使って一気に取得してみる． GraphQL のクエリの動作確認は&lt;a href=&#34;https://developer.github.com/v4/explorer/&#34;&gt;ココ&lt;/a&gt;で行える：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/elm-github-oauth2-sample/graphql.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;最終的に出来上がったクエリはこんな感じ：&lt;/p&gt;
&lt;pre class=&#34;graphql&#34;&gt;&lt;code&gt;query {
  viewer {
    login
    name
    repositories(first: 100, orderBy: {field: STARGAZERS, direction: DESC}, ownerAffiliations: [OWNER], isFork: false) {
      nodes {
        name
        url
        stargazers { totalCount }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クエリの &lt;code&gt;viewer {..}&lt;/code&gt; は渡したトークンのユーザー情報を指す． &lt;code&gt;viewer&lt;/code&gt; 内で &lt;code&gt;login&lt;/code&gt; や &lt;code&gt;name&lt;/code&gt; を指定することで，さっきまで v3 で取得していたユーザー情報も取得できる． &lt;code&gt;repositories&lt;/code&gt; で一気に所得できるリポジトリ数は100件が上限（&lt;code&gt;first:300&lt;/code&gt; は怒られる）． &lt;code&gt;orderBy:{..}&lt;/code&gt; でスターの多い順に並び替えて，&lt;code&gt;ownerAffiliations:[OWNER]&lt;/code&gt; と &lt;code&gt;isFork:false&lt;/code&gt; を指定することで自身のリポジトリだけを返してる． リポジトリのスター数は &lt;code&gt;stargazers { totalCount }&lt;/code&gt; で取得できる．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;あとはクエリを叩くだけ． Elm の GraphQL パッケージに良さげのものがなかったのでそのまま &lt;code&gt;elm/http&lt;/code&gt; を使うことにした：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;nodes&amp;quot;&lt;/span&gt; ] (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;stargazers&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;totalCount&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-28&#34;&gt;&lt;a href=&#34;#cb10-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-29&#34;&gt;&lt;a href=&#34;#cb10-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-30&#34;&gt;&lt;a href=&#34;#cb10-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getUserInfo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-31&#34;&gt;&lt;a href=&#34;#cb10-31&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-32&#34;&gt;&lt;a href=&#34;#cb10-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- さっきのクエリをヒアドキュメントとかで&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-33&#34;&gt;&lt;a href=&#34;#cb10-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;identity&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;viewer&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;fu&#34;&gt;userDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-34&#34;&gt;&lt;a href=&#34;#cb10-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-35&#34;&gt;&lt;a href=&#34;#cb10-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;request&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-36&#34;&gt;&lt;a href=&#34;#cb10-36&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-37&#34;&gt;&lt;a href=&#34;#cb10-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;token &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb10-38&#34;&gt;&lt;a href=&#34;#cb10-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https://api.github.com/graphql&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-39&#34;&gt;&lt;a href=&#34;#cb10-39&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;jsonBody&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;object&lt;/span&gt; [ ( &lt;span class=&#34;st&#34;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;query&lt;/span&gt; ) ])&lt;/span&gt;
&lt;span id=&#34;cb10-40&#34;&gt;&lt;a href=&#34;#cb10-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;expect&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;expectJson&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-41&#34;&gt;&lt;a href=&#34;#cb10-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-42&#34;&gt;&lt;a href=&#34;#cb10-42&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tracker&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-43&#34;&gt;&lt;a href=&#34;#cb10-43&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インターフェースは全く変えてないので &lt;code&gt;Main&lt;/code&gt; でいじるのは &lt;code&gt;view&lt;/code&gt; だけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewUser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;sum&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;container-sm my-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;h3&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-2&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;s points: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;total&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewRepositories&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;viewRepository&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;li&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Box-row mb-3&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;float-left&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;                    [ &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;defaultOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ml-1&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;                        [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;                    ]&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;float-right&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;                    [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Octicons&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;defaultOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;                    ]&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Box&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;ul&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewRepository&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;) ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;elm-で円グラフ&#34;&gt;Elm で円グラフ&lt;/h3&gt;
&lt;p&gt;なんかこう，リポジトリのプライマリ言語ごとに円グラフにしたら面白いなっていう欲がでてきたのでそうしてみることにした． まずはリポジトリのプライマリ言語を返すようにクエリをいじる：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query {
  viewer {
    ...
    repositories(...) {
      nodes {
        ...
        primaryLanguage {
          name
          color
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;データ構造も書き足す：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;language&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-12&#34;&gt;&lt;a href=&#34;#cb13-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repoDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-13&#34;&gt;&lt;a href=&#34;#cb13-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map4&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-14&#34;&gt;&lt;a href=&#34;#cb13-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-15&#34;&gt;&lt;a href=&#34;#cb13-15&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;primaryLanguage&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-16&#34;&gt;&lt;a href=&#34;#cb13-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-17&#34;&gt;&lt;a href=&#34;#cb13-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-18&#34;&gt;&lt;a href=&#34;#cb13-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-19&#34;&gt;&lt;a href=&#34;#cb13-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;languageDecoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-20&#34;&gt;&lt;a href=&#34;#cb13-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-21&#34;&gt;&lt;a href=&#34;#cb13-21&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-22&#34;&gt;&lt;a href=&#34;#cb13-22&#34;&gt;&lt;/a&gt;        (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;color&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プライマリ言語の情報は &lt;code&gt;null&lt;/code&gt; が返ってくる可能性があるので、&lt;code&gt;Maybe&lt;/code&gt; でラップしている．&lt;/p&gt;
&lt;p&gt;データは揃ったので，あとは円グラフを描くだけ． 円グラフの描写には &lt;a href=&#34;https://package.elm-lang.org/packages/gampleman/elm-visualization/2.1.1&#34;&gt;&lt;code&gt;gampleman/elm-visualization&lt;/code&gt;&lt;/a&gt; を使うことにする． example 集にある「&lt;a href=&#34;https://elm-visualization.netlify.com/custompiechart&#34;&gt;Custom Pie Chart&lt;/a&gt;」をベースにすることにした． コピペしてよしなに書き換える：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pie&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- import は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 言語名&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;   &lt;span class=&#34;co&#34;&gt;-- 総スター数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- GitHub 側で設定されてる言語の色&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;990&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;504&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ChartConfig&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;ChartConfig&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Svg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;pie&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;                    { &lt;span class=&#34;fu&#34;&gt;defaultPieConfig&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-35&#34;&gt;&lt;a href=&#34;#cb14-35&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-36&#34;&gt;&lt;a href=&#34;#cb14-36&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;padAngle&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-37&#34;&gt;&lt;a href=&#34;#cb14-37&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cornerRadius&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-38&#34;&gt;&lt;a href=&#34;#cb14-38&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sortingFn&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EQ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-39&#34;&gt;&lt;a href=&#34;#cb14-39&#34;&gt;&lt;/a&gt;                    }&lt;/span&gt;
&lt;span id=&#34;cb14-40&#34;&gt;&lt;a href=&#34;#cb14-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-41&#34;&gt;&lt;a href=&#34;#cb14-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;makeSlice&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-42&#34;&gt;&lt;a href=&#34;#cb14-42&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;arc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt;) [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fill&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Paint&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb14-43&#34;&gt;&lt;a href=&#34;#cb14-43&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-44&#34;&gt;&lt;a href=&#34;#cb14-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;makeLabel&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-45&#34;&gt;&lt;a href=&#34;#cb14-45&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-46&#34;&gt;&lt;a href=&#34;#cb14-46&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-47&#34;&gt;&lt;a href=&#34;#cb14-47&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;centroid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-48&#34;&gt;&lt;a href=&#34;#cb14-48&#34;&gt;&lt;/a&gt;                        { &lt;span class=&#34;fu&#34;&gt;pieDatum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-49&#34;&gt;&lt;a href=&#34;#cb14-49&#34;&gt;&lt;/a&gt;                            &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;innerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-50&#34;&gt;&lt;a href=&#34;#cb14-50&#34;&gt;&lt;/a&gt;                            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;outerRadius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;labelPosition&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-51&#34;&gt;&lt;a href=&#34;#cb14-51&#34;&gt;&lt;/a&gt;                        }&lt;/span&gt;
&lt;span id=&#34;cb14-52&#34;&gt;&lt;a href=&#34;#cb14-52&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-53&#34;&gt;&lt;a href=&#34;#cb14-53&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;text_&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-54&#34;&gt;&lt;a href=&#34;#cb14-54&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;transform&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Translate&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb14-55&#34;&gt;&lt;a href=&#34;#cb14-55&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;dy&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;em&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;35&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-56&#34;&gt;&lt;a href=&#34;#cb14-56&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;textAnchor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AnchorMiddle&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-57&#34;&gt;&lt;a href=&#34;#cb14-57&#34;&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id=&#34;cb14-58&#34;&gt;&lt;a href=&#34;#cb14-58&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;datum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb14-59&#34;&gt;&lt;a href=&#34;#cb14-59&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-60&#34;&gt;&lt;a href=&#34;#cb14-60&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;svg&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) ]&lt;/span&gt;
&lt;span id=&#34;cb14-61&#34;&gt;&lt;a href=&#34;#cb14-61&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Attr&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;transform&lt;/span&gt; [ &lt;span class=&#34;dt&#34;&gt;Translate&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;radius&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb14-62&#34;&gt;&lt;a href=&#34;#cb14-62&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [] &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;makeSlice&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-63&#34;&gt;&lt;a href=&#34;#cb14-63&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;g&lt;/span&gt; [] &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;makeLabel&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pieData&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-64&#34;&gt;&lt;a href=&#34;#cb14-64&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb14-65&#34;&gt;&lt;a href=&#34;#cb14-65&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主に書き換えたのは色の部分． example では &lt;code&gt;colors&lt;/code&gt; 的な色リストを利用してたが，リポジトリのプログラミング言語には GitHub 側で色が設定してあるので，それをモデルに持たせて引用することにした． あとは &lt;code&gt;Repository&lt;/code&gt; 型から &lt;code&gt;Data&lt;/code&gt; 型を組み立てる部分を書くだけ：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pie&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Repository&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;language&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-8&#34;&gt;&lt;a href=&#34;#cb15-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-9&#34;&gt;&lt;a href=&#34;#cb15-9&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;black&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-10&#34;&gt;&lt;a href=&#34;#cb15-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-11&#34;&gt;&lt;a href=&#34;#cb15-11&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;hexToColor&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-12&#34;&gt;&lt;a href=&#34;#cb15-12&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-13&#34;&gt;&lt;a href=&#34;#cb15-13&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-14&#34;&gt;&lt;a href=&#34;#cb15-14&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-15&#34;&gt;&lt;a href=&#34;#cb15-15&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;star&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;black&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-16&#34;&gt;&lt;a href=&#34;#cb15-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-17&#34;&gt;&lt;a href=&#34;#cb15-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-18&#34;&gt;&lt;a href=&#34;#cb15-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-19&#34;&gt;&lt;a href=&#34;#cb15-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-20&#34;&gt;&lt;a href=&#34;#cb15-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-21&#34;&gt;&lt;a href=&#34;#cb15-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-22&#34;&gt;&lt;a href=&#34;#cb15-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;updateBy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-23&#34;&gt;&lt;a href=&#34;#cb15-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-24&#34;&gt;&lt;a href=&#34;#cb15-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-25&#34;&gt;&lt;a href=&#34;#cb15-25&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-26&#34;&gt;&lt;a href=&#34;#cb15-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-27&#34;&gt;&lt;a href=&#34;#cb15-27&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-28&#34;&gt;&lt;a href=&#34;#cb15-28&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb15-29&#34;&gt;&lt;a href=&#34;#cb15-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-30&#34;&gt;&lt;a href=&#34;#cb15-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-31&#34;&gt;&lt;a href=&#34;#cb15-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fromRepo&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-32&#34;&gt;&lt;a href=&#34;#cb15-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;foldl&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;label&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;updateBy&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;)) &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;empty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-33&#34;&gt;&lt;a href=&#34;#cb15-33&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-34&#34;&gt;&lt;a href=&#34;#cb15-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-35&#34;&gt;&lt;a href=&#34;#cb15-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;position-relative&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb15-36&#34;&gt;&lt;a href=&#34;#cb15-36&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;drawChart&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-37&#34;&gt;&lt;a href=&#34;#cb15-37&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々考えた結果，いったん各 &lt;code&gt;Repository&lt;/code&gt; を &lt;code&gt;Data&lt;/code&gt; に変換して，そのあと言語名をキーにした &lt;code&gt;Dict&lt;/code&gt; へと畳み込んでいる（&lt;code&gt;.data&lt;/code&gt; の部分だけ足し合わせてる）． あとは &lt;code&gt;Pie.view user&lt;/code&gt; を &lt;code&gt;Main.view&lt;/code&gt; で呼び出すだけ．&lt;/p&gt;
&lt;p&gt;あ、ちなみに真ん中にアバター画像出したしてるのは割愛（ただ単にアバター画像を GraphQL で取ってきて，&lt;code&gt;Pie.view&lt;/code&gt; で重ねてるだけ）．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Firebase 便利ですね．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2020-01-20T11:46:31.459+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html</id><title type="text">Haskell で SSH Public Key の FingerPrint を計算する</title><updated>2020-01-08T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;GitHub に登録している Public Key から &lt;code&gt;~/.ssh/authorized_key&lt;/code&gt; を生成する簡易的な CLI ツールを作ろうと考えた． そして，Public Key をフィルタリングするために &lt;code&gt;https://github.com/settings/keys&lt;/code&gt; で参照できる FingerPrint を使おうと考えたが，その場合は GitHub API で取得した Public Key から FingerPrint をプログラム側で計算しないといけない．&lt;/p&gt;
&lt;p&gt;もちろん，&lt;code&gt;ssh-keygen -l -E md5 -f ssh_host_ecdsa_key.pub&lt;/code&gt; なんかで生成できるのだが可能なら素の Haskell プログラムでやりたいなと考えた． ということで，本記事はタイトルの通り Haskell で SSH Public Key の FingerPrint を計算することになったので，そのために色々調べたメモ書き．&lt;/p&gt;
&lt;h2 id=&#34;fingerprint&#34;&gt;FingerPrint&lt;/h2&gt;
&lt;p&gt;そもそもどういうアルゴリズムで出しているのか． ちょうど良い記事があった，ありがたい:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hotpepsi/items/128f3a660cee8b5467c6&#34;&gt;RSA公開鍵のファイル形式とfingerprint - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要するに Base64 デコードして MD5 ハッシュをかければ良いようだ（本来は SHA256 の方が良いっぽいけど）． 上記記事では Base64 デコードしてできた &lt;a href=&#34;https://www.ietf.org/rfc/rfc4253.txt&#34;&gt;RFC4253&lt;/a&gt; の中身まで説明してくれており，最後の Ruby プログラムではバイナリをちゃんと読んだ上で FingerPrint を計算している．&lt;/p&gt;
&lt;p&gt;単純に RSA 形式の Public Key の FingerPrint を計算するだけならそこまでしなくて良さそうだ．&lt;/p&gt;
&lt;h2 id=&#34;haskell-で計算する&#34;&gt;Haskell で計算する&lt;/h2&gt;
&lt;p&gt;上述の通りやることは2つ&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Base64 デコード&lt;/li&gt;
&lt;li&gt;MD5 ハッシュ化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;あとその前に header と body を切り分ける．&lt;/p&gt;
&lt;p&gt;ちなみに，最終的なコードは &lt;a href=&#34;https://github.com/haskell-jp/playground/pull/1&#34;&gt;haskell-jp/playground&lt;/a&gt; においた．&lt;/p&gt;
&lt;h3 id=&#34;header-と-body-を切り分ける&#34;&gt;header と body を切り分ける&lt;/h3&gt;
&lt;p&gt;RSA の Public Key は &lt;code&gt;ssh-rsa AAAAXXX...&lt;/code&gt; となっている（&lt;code&gt;X&lt;/code&gt; 以降は適当）． 欲しいのは空白よりあとだけなので，まずはそこを切り出す（ついでにバリデーションする）． 後々楽なので全部 &lt;code&gt;ByteString&lt;/code&gt; を使うことにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteString&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;B&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pubkeyBody ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;pubkeyBody content &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; B.split &lt;span class=&#34;dv&#34;&gt;32&lt;/span&gt; content &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;    [header, body] &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; header &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh-rsa&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;AAAA&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`B.isPrefixOf`&lt;/span&gt; body &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; body&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Word8&lt;/code&gt; 型の &lt;code&gt;32&lt;/code&gt; は空白．&lt;/p&gt;
&lt;h3 id=&#34;base64-デコード&#34;&gt;Base64 デコード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/memory&#34;&gt;memory&lt;/a&gt; というパッケージを使う． なぜかというと，この後で使うあらゆる暗号アルゴリズムを詰め込んだ &lt;a href=&#34;http://hackage.haskell.org/package/cryptonite&#34;&gt;cryptonite&lt;/a&gt; というパッケージがこれに依存していたからだ． cryptonite に習って Base64 デコードするとこんな感じだ（ついでにバリデーションする）:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- これが memory パッケージのモジュール&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.ByteArray.Encoding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Base&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Base64&lt;/span&gt;), convertFromBase)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;decode ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;decode body &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; convertFromBase &lt;span class=&#34;dt&#34;&gt;Base64&lt;/span&gt; body &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; bin &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; prefix &lt;span class=&#34;ot&#34;&gt;`B.isPrefixOf`&lt;/span&gt; bin &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; bin&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- \x00 \x00 \x00 \x07 ssh-rsa (00000007 というのは ssh-rsa の長さ)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;    prefix &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\NUL\NUL\NUL\assh-rsa&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;md5-ハッシュ化&#34;&gt;MD5 ハッシュ化&lt;/h3&gt;
&lt;p&gt;上述の通り，cryptonite というのを用いる． ちなみにこれらのパッケージについては &lt;a href=&#34;https://fpcomplete.com/cryptographic-hashing-in-haskell&#34;&gt;Cryptographic Hashing in Haskell - FPComplete&lt;/a&gt; で紹介されてる(&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017/09-18-cryptographic-hashing-haskell.html&#34;&gt;邦訳記事&lt;/a&gt;)． 2017年と少し古い記事だが，このパッケージは今でも精力的にメンテナンスがされており，また個人ではなくチーム(&lt;a href=&#34;https://github.com/haskell-crypto&#34;&gt;Haskell Crypto&lt;/a&gt;)で管理している点から信頼できるかなと考えた（暗号系のパッケージは結構シビアだから）．&lt;/p&gt;
&lt;p&gt;このパッケージで何らかのハッシュ関数を利用するには &lt;code&gt;Crypto.Hash.hash&lt;/code&gt; 関数を利用すれば良い． アルゴリズム（MD5 か SHA256 かなど）は返り値の型を明示することで指定できる． 今回の場合は &lt;code&gt;Digest MD5&lt;/code&gt; 型とすれば良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;MD5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.Hash&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fingerprint ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Digest&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MD5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;fingerprint content &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  body &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pubkeyBody content&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  bin  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; decode body&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Crypto.hash bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;試す&#34;&gt;試す&lt;/h2&gt;
&lt;p&gt;GHCi で適当に:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedString&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Crypto.SSH.PubKey&lt;/span&gt;      &lt;span class=&#34;co&#34;&gt;-- 今まで定義してた関数のモジュール&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; fingerprint &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh-rsa AAAA...&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 適当に public key の中身を貼り付ける&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f3b17672020e4e8ad25516034facc12d&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub では8ビットごとに &lt;code&gt;:&lt;/code&gt; で区切られてるが，まぁそれはいいでしょ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外とこういう Crypto 系のテーマの Haskell コードの例って少ないよね． 全部コード読んで試したよ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html</id><title type="text">Elixir による JSON Parser</title><updated>2019-12-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;「&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html&#34;&gt;久しぶりに thank_you_stars をビルドする&lt;/a&gt;」の続きというかおまけというかって感じの記事です． この記事の最後で poison を抜いてお手製 JSON パーサーを組み込みました． 綺麗に整えたので記事にまとめる．&lt;/p&gt;
&lt;h2 id=&#34;実装する&#34;&gt;実装する&lt;/h2&gt;
&lt;p&gt;外部パッケージを使えない縛りなので，完全な Pure Elixir で実装していく．&lt;/p&gt;
&lt;h3 id=&#34;result-型&#34;&gt;Result 型&lt;/h3&gt;
&lt;p&gt;その前に便利モジュールを作っておく． いわゆる &lt;code&gt;Either&lt;/code&gt; 型だ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# Result e a = {:error, e} | {:ok, a} のような型を扱う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a}, {:error, e} をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; success(v), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; failure(v), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, v}&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a} だった場合に {:ok, f(a)} を返す (f は a -&amp;gt; b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map({&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: success(f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(v))&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map(err &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:ok, a} だった場合に f(a) を返す (f は a -&amp;gt; Result e b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; and_then({&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(v)&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; and_then(err &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# {:error, e} だった場合に {:error, f(e)} を返す (f は e -&amp;gt; b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map_error({&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, e}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: failure(f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(e))&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; map_error(r &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: r&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを作っておくと &lt;code&gt;{:ok, a} | {:error, e}&lt;/code&gt; なデータ型をパイプラインと組み合わせて利用できるようになる(実はプリミティブあったりしないよね？)．&lt;/p&gt;
&lt;h3 id=&#34;状態のデータ構造&#34;&gt;状態のデータ構造&lt;/h3&gt;
&lt;p&gt;シンプルにパース結果と残りの文字列を保存する連想配列を持ち回ることにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; decode(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    init_stat(str)&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_element() &lt;span class=&#34;co&#34;&gt;# これがパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# パースが成功した場合 {:ok} かつ残り文字列が空になる想定&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; result}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(result)&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;      {_, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(rest)&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# rest が残り文字列で result がパース結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; init_stat(str), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; str, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; %{}}&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回実装する JSON パーサーは最終的に Elixir の連想配列や配列，真偽値や文字列などのプリミティブなデータ型へ変換することとする． なので，初期値として空の連想配列 &lt;code&gt;%{}&lt;/code&gt; を渡している．&lt;/p&gt;
&lt;h3 id=&#34;json.org&#34;&gt;JSON.org&lt;/h3&gt;
&lt;p&gt;JSON の(基本的な)構文定義は &lt;a href=&#34;https://json.org&#34;&gt;JSON.org&lt;/a&gt; に書いてある． ご丁寧に BNF が書いてあるので，これに沿って実装するだけだ． 例えば，こんな感じの BNF が記述されている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;json&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  := element&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;element&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  := ws value ws&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;value&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  := object&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;   | array&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;   | string&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;   | number&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;   | &amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;   | &amp;quot;false&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;   | &amp;quot;null&amp;quot;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;ws&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;  := ... // 空白除去&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これをパターンマッチを駆使して実装するとこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_element(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;  trim_leading(stat) &lt;span class=&#34;co&#34;&gt;# rest の前方の空白を除去します&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_value()&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# match_string や match_array はあとで&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_string(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_array(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_object(stat)&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: match_number(stat)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;match_xxx&lt;/code&gt; 系の関数は全て前述した &lt;code&gt;Result e a&lt;/code&gt; 型を返すイメージ(&lt;code&gt;e&lt;/code&gt; も &lt;code&gt;a&lt;/code&gt; も前述した状態の連想配列だが)．&lt;/p&gt;
&lt;h3 id=&#34;オブジェクトのパース&#34;&gt;オブジェクトのパース&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; で囲まれた連想配列のようなもの，例えば &lt;code&gt;{ &amp;quot;key&amp;quot; : true }&lt;/code&gt; がオブジェクトだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;object&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  := &amp;#39;{&amp;#39; ws &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;   | &amp;#39;{&amp;#39; members &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;members&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;  := member&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;   | member &amp;#39;,&amp;#39; members&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;member&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;  := ws string ws &amp;#39;:&amp;#39; element&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;string&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  := ... // 文字列&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文字列の部分はあとで実装するとして，他の部分だけをパターンマッチとパイプを利用して実装するとこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# parse_when_unmatch_by(stat, char, parser) は&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# char の文字列にマッチしなければ parser を実行し&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# マッチした場合は parser を実行せずに stat をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_object(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  match_left_par(stat)                               &lt;span class=&#34;co&#34;&gt;# `{` にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))                   &lt;span class=&#34;co&#34;&gt;# 空白除去&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, %{})) &lt;span class=&#34;co&#34;&gt;# 状態の result を空オブジェクト %{} に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;parse_when_unmatch_by(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; match_members(s) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_right_par(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))           &lt;span class=&#34;co&#34;&gt;# `}` にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;  match_member(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_members_tail(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# match_members_tail は members の再帰処理をする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# 先頭が `,` にマッチした時には再帰処理を行い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# マッチしない場合は stat をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members_tail(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;  update_stat(stat, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_members(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_members_tail(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_member(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 空白を除去してから文字列にマッチさせてみる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-28&#34;&gt;&lt;a href=&#34;#cb6-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; match_string(trim_leading(stat)) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-29&#34;&gt;&lt;a href=&#34;#cb6-29&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, stat} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-30&#34;&gt;&lt;a href=&#34;#cb6-30&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-31&#34;&gt;&lt;a href=&#34;#cb6-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-32&#34;&gt;&lt;a href=&#34;#cb6-32&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# string のパースに成功した場合にのみ，そのパース結果を `key` として残りをパースする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-33&#34;&gt;&lt;a href=&#34;#cb6-33&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; key}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-34&#34;&gt;&lt;a href=&#34;#cb6-34&#34;&gt;&lt;/a&gt;      trim_leading(stat)&lt;/span&gt;
&lt;span id=&#34;cb6-35&#34;&gt;&lt;a href=&#34;#cb6-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_colon() &lt;span class=&#34;co&#34;&gt;# &amp;#39;:&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-36&#34;&gt;&lt;a href=&#34;#cb6-36&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_element(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;#match_element は前のと同じ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-37&#34;&gt;&lt;a href=&#34;#cb6-37&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;modify_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; v &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(prev, key, v) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-38&#34;&gt;&lt;a href=&#34;#cb6-38&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-39&#34;&gt;&lt;a href=&#34;#cb6-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;update_stat(stat, key, value)&lt;/code&gt; は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; で置き換える関数で，&lt;code&gt;modify_stat(stat, key, func)&lt;/code&gt; は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;func&lt;/code&gt; で更新する関数だ．&lt;/p&gt;
&lt;p&gt;余談だが，Elixir は(僕が思うに)普通の関数それ自体は第一級では無いが，無名関数 &lt;code&gt;fn args -&amp;gt; ... end&lt;/code&gt; は第一級のようだ． &lt;code&gt;&amp;amp;any_function(&amp;amp;1, &amp;amp;2)&lt;/code&gt; などとすることで &lt;code&gt;fn arg1 arg2 -&amp;gt; any_function(arg1, arg2) end&lt;/code&gt; の糖衣構文になるっぽく，関数を関数の引数に渡す場合はこうするらしい． ただし，この記法は入れ子にできないので，&lt;code&gt;modify_stat&lt;/code&gt; や &lt;code&gt;parse_when_unmatch_by&lt;/code&gt; では内部の方の関数を &lt;code&gt;fn args -&amp;gt; ... end&lt;/code&gt; で直接囲っている(&lt;a href=&#34;https://stackoverflow.com/questions/38217426/can-i-nest-anonymous-functions-in-elixir&#34;&gt;参照&lt;/a&gt;)．&lt;/p&gt;
&lt;h3 id=&#34;配列のパース&#34;&gt;配列のパース&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;array&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;  := &amp;#39;[&amp;#39; ws &amp;#39;]&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;   | &amp;#39;[&amp;#39; elements &amp;#39;]&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;elements&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;  := element&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;   | element &amp;#39;,&amp;#39; elements&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;{}&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; になっただけで，だいたいオブジェクトと同じだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_array(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;  match_left_square(stat)                           &lt;span class=&#34;co&#34;&gt;# &amp;#39;[&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))                  &lt;span class=&#34;co&#34;&gt;# 空白除去&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, [])) &lt;span class=&#34;co&#34;&gt;# 状態の result を空配列 [] に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;parse_when_unmatch_by(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; match_elements(s) &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_right_square(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))       &lt;span class=&#34;co&#34;&gt;# &amp;#39;]&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  match_element(stat)&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# ここで状態(配列)の更新をしてる点だけが違う&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;modify_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; v &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; [v] &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_elements_tail(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements_tail(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;  update_stat(stat, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_elements(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_elements_tail(stat), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;文字列のパース&#34;&gt;文字列のパース&lt;/h3&gt;
&lt;p&gt;さぁこっからが大変． 文字列内でのエスケープをそれっぽく処理する必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_string(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;  match_double_quote(stat)                          &lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;# 状態の result を空文字列 &amp;quot;&amp;quot; に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_double_quote(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))       &lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# どう見ても成功じゃ無いがどーせ後々エラーになるので...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチしたら終わり&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_characters(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# &amp;quot;\&amp;quot; はエスケープ文字として処理する必要があるのでまずはそれ以外&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;  parse_when_unmatch_by(stat, &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;, &lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_noescape_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_escape(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))     &lt;span class=&#34;co&#34;&gt;# 次にエスケープ文字の処理&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;match_characters(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;# 再帰する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;関数名の通り，&lt;code&gt;match_noescape_characters&lt;/code&gt; がエスケープ文字以外のパーサーで，&lt;code&gt;match_escape&lt;/code&gt; がエスケープ文字のパーサーだ． &lt;code&gt;match_noescape_characters&lt;/code&gt; ではまず &lt;code&gt;\&lt;/code&gt; や &lt;code&gt;&amp;quot;&lt;/code&gt; を含まない文字列をマッチさせたい． しかし，パターンマッチは exclude なマッチはできないので，あんまり良く無いが正規表現でサボることにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# エスケープされてない文字はダメっぽい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\u0000&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 名前付きキャプチャ，便利&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;  %{&lt;span class=&#34;st&#34;&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; body, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[&lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;\\\&lt;span class=&#34;st&#34;&gt;&amp;quot;\n\x00\t]*)(?&amp;lt;rest&amp;gt;.*)/s, stat[:rest])&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;  update_stat(%{result: prev &amp;lt;&amp;gt; body}, :rest, rest)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エスケープ文字は，もうパターンマッチで頑張る:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\\&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\\/&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\/&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\b&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\f&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\f&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\n&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\r&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\r&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\t&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# \u1234 とかいうやつ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_escape(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\u&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# /.{n,m}/ で n 個以上 m 個以下にマッチする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[\dA&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Fa&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;f]{&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;})(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;rest&lt;span class=&#34;op&#34;&gt;&amp;gt;.*&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;s, rest) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;    %{&lt;span class=&#34;st&#34;&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; body, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 4桁の16進数をエスケープされた文字列として変換する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 変換できなかった場合は nil が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; hex_to_string(body) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;        hex &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; update_stat(%{&lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; prev &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; hex}, &lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-37&#34;&gt;&lt;a href=&#34;#cb11-37&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-38&#34;&gt;&lt;a href=&#34;#cb11-38&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb11-39&#34;&gt;&lt;a href=&#34;#cb11-39&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-40&#34;&gt;&lt;a href=&#34;#cb11-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-41&#34;&gt;&lt;a href=&#34;#cb11-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-42&#34;&gt;&lt;a href=&#34;#cb11-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; hex_to_string(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-43&#34;&gt;&lt;a href=&#34;#cb11-43&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-44&#34;&gt;&lt;a href=&#34;#cb11-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# 文字列を16進数として int 型に変換&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-45&#34;&gt;&lt;a href=&#34;#cb11-45&#34;&gt;&lt;/a&gt;    {hex, _} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(str, &lt;span class=&#34;dv&#34;&gt;16&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-46&#34;&gt;&lt;a href=&#34;#cb11-46&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;hex::utf8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# こういう記法で int を16進数でエスケープされた文字列に変換できる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-47&#34;&gt;&lt;a href=&#34;#cb11-47&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;rescue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-48&#34;&gt;&lt;a href=&#34;#cb11-48&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-49&#34;&gt;&lt;a href=&#34;#cb11-49&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-50&#34;&gt;&lt;a href=&#34;#cb11-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まぁ正直，色々と雑で漏れてるケースもきっとあるのだが，そんな変な JSON をパースしたいわけでは無いのでこれでいいかな．&lt;/p&gt;
&lt;h3 id=&#34;数値のパース&#34;&gt;数値のパース&lt;/h3&gt;
&lt;p&gt;数値は，マイナス符号・整数・浮動小数点数・&lt;code&gt;e&lt;/code&gt;記法を網羅する必要がある． これも，めんどくさいので正規表現に頼っちゃう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_number(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;  {value, rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; compile_number(stat[&lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 文字列から数値を取得できなかった場合は nil が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; value &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;    _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(stat, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, value)&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(&lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success()&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; compile_number(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 名前付きキャプチャ，超便利&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-18&#34;&gt;&lt;a href=&#34;#cb12-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# minus は `-`，digit は整数部，frac は小数点以下，exp は `e`記法 (`10e-2`とか)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-19&#34;&gt;&lt;a href=&#34;#cb12-19&#34;&gt;&lt;/a&gt;  %{&lt;span class=&#34;st&#34;&gt;&amp;quot;minus&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; minus, &lt;span class=&#34;st&#34;&gt;&amp;quot;digit&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; digit, &lt;span class=&#34;st&#34;&gt;&amp;quot;frac&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; frac, &lt;span class=&#34;st&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; exp, &lt;span class=&#34;st&#34;&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-20&#34;&gt;&lt;a href=&#34;#cb12-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;named_captures(&lt;/span&gt;
&lt;span id=&#34;cb12-21&#34;&gt;&lt;a href=&#34;#cb12-21&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;minus&lt;span class=&#34;op&#34;&gt;&amp;gt;-&lt;/span&gt;?)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;digit&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;frac&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;\&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;?[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;exp&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;[eE]?[&lt;span class=&#34;op&#34;&gt;-+&lt;/span&gt;]?[[&lt;span class=&#34;va&#34;&gt;:digit&lt;/span&gt;:]]&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)(?&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;rest&lt;span class=&#34;op&#34;&gt;&amp;gt;.*&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;s,&lt;/span&gt;
&lt;span id=&#34;cb12-22&#34;&gt;&lt;a href=&#34;#cb12-22&#34;&gt;&lt;/a&gt;      str&lt;/span&gt;
&lt;span id=&#34;cb12-23&#34;&gt;&lt;a href=&#34;#cb12-23&#34;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&#34;cb12-24&#34;&gt;&lt;a href=&#34;#cb12-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-25&#34;&gt;&lt;a href=&#34;#cb12-25&#34;&gt;&lt;/a&gt;  value &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-26&#34;&gt;&lt;a href=&#34;#cb12-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; {digit, frac, exp} &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-27&#34;&gt;&lt;a href=&#34;#cb12-27&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, _, _} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-28&#34;&gt;&lt;a href=&#34;#cb12-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 整数部が無い場合はダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-29&#34;&gt;&lt;a href=&#34;#cb12-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-30&#34;&gt;&lt;a href=&#34;#cb12-30&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num&lt;span class=&#34;op&#34;&gt; !=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-31&#34;&gt;&lt;a href=&#34;#cb12-31&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 0 から始まる整数もダメ(小数はOK)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-32&#34;&gt;&lt;a href=&#34;#cb12-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-33&#34;&gt;&lt;a href=&#34;#cb12-33&#34;&gt;&lt;/a&gt;      {_, &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num, _} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-34&#34;&gt;&lt;a href=&#34;#cb12-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 小数点だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-35&#34;&gt;&lt;a href=&#34;#cb12-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-36&#34;&gt;&lt;a href=&#34;#cb12-36&#34;&gt;&lt;/a&gt;      {_, _, &lt;span class=&#34;st&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-37&#34;&gt;&lt;a href=&#34;#cb12-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# e だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-38&#34;&gt;&lt;a href=&#34;#cb12-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-39&#34;&gt;&lt;a href=&#34;#cb12-39&#34;&gt;&lt;/a&gt;      {_, _, &lt;span class=&#34;st&#34;&gt;&amp;quot;E&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; num} &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; num &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-40&#34;&gt;&lt;a href=&#34;#cb12-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# E だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-41&#34;&gt;&lt;a href=&#34;#cb12-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-42&#34;&gt;&lt;a href=&#34;#cb12-42&#34;&gt;&lt;/a&gt;      {_, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# これは整数の場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-43&#34;&gt;&lt;a href=&#34;#cb12-43&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(minus &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-44&#34;&gt;&lt;a href=&#34;#cb12-44&#34;&gt;&lt;/a&gt;          {num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; num&lt;/span&gt;
&lt;span id=&#34;cb12-45&#34;&gt;&lt;a href=&#34;#cb12-45&#34;&gt;&lt;/a&gt;          _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-46&#34;&gt;&lt;a href=&#34;#cb12-46&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-47&#34;&gt;&lt;a href=&#34;#cb12-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-48&#34;&gt;&lt;a href=&#34;#cb12-48&#34;&gt;&lt;/a&gt;      _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# これは浮動小数点数の場合&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-49&#34;&gt;&lt;a href=&#34;#cb12-49&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Float&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(minus &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; frac &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; exp) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-50&#34;&gt;&lt;a href=&#34;#cb12-50&#34;&gt;&lt;/a&gt;          {num, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; num&lt;/span&gt;
&lt;span id=&#34;cb12-51&#34;&gt;&lt;a href=&#34;#cb12-51&#34;&gt;&lt;/a&gt;          _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-52&#34;&gt;&lt;a href=&#34;#cb12-52&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-53&#34;&gt;&lt;a href=&#34;#cb12-53&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-54&#34;&gt;&lt;a href=&#34;#cb12-54&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-55&#34;&gt;&lt;a href=&#34;#cb12-55&#34;&gt;&lt;/a&gt;  {value, rest}&lt;/span&gt;
&lt;span id=&#34;cb12-56&#34;&gt;&lt;a href=&#34;#cb12-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでとりあえず完成．&lt;/p&gt;
&lt;h2 id=&#34;テストする&#34;&gt;テストする&lt;/h2&gt;
&lt;p&gt;JSON のテストスイートとして &lt;a href=&#34;https://github.com/nst/JSONTestSuite&#34;&gt;nst/JSONTestSuite&lt;/a&gt; と言うのがあるので使わせてもらう． こんな感じに配置する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;\&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;|- lib // elixir のコード置き場&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;|- test&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;|  |- fixture&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;|  |  \- test_parsing // JSONTestSuite のテスト用 JSON ファイル群&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;|  \- json_spec.exs&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;\- mix.exs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テストには espec を使ってこんな感じに記述した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# json_spec.exs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSONSuite&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; test_suite &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;    [&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# エラーケース&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;n_array_1_true_without_comma.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;}},&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;n_array_a_invalid_utf8.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt;}},&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;co&#34;&gt;# 成功ケース&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;y_array_arraysWithSpaces.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, [[]]}},&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;st&#34;&gt;&amp;quot;y_array_empty-string.json&amp;quot;&lt;/span&gt;, {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, [&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;]}},&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# JSONSuite を先に宣言しないと使えなかった&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSONSpec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ESpec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;  describe &lt;span class=&#34;st&#34;&gt;&amp;quot;JSON.decode&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Enum&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;cn&#34;&gt;JSONSuite&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;test_suite(), &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; {path, result} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;      context path &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# 変数を利用するには unquote する必要がある(マクロのせい？)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;        let(&lt;span class=&#34;va&#34;&gt;:json&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: &lt;span class=&#34;cn&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;read!(&lt;span class=&#34;st&#34;&gt;&amp;quot;test/fixture/test_parsing/&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;unquote&lt;/span&gt;(path)&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;        it(&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map_error(&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;decode(json()), &lt;span class=&#34;kw&#34;&gt;fn&lt;/span&gt; _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; to(eq(&lt;span class=&#34;kw&#34;&gt;unquote&lt;/span&gt;(&lt;span class=&#34;cn&#34;&gt;Macro&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;escape(result))))&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-35&#34;&gt;&lt;a href=&#34;#cb14-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-36&#34;&gt;&lt;a href=&#34;#cb14-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;unquote&lt;/code&gt; やらモジュールの順序周りやら結構苦労した． なお，いくつかテストの通らない JSONTestSuite のケースがあるので，そう言うのはとりあえずコメントアウトしてる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外と綺麗にかけて満足． なお，パフォーマンスは無視してる笑．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>http://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v6</id><title type="text">test6</title><updated>2018-03-03T13:44:46Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v6"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v5</id><title type="text">test5</title><updated>2018-03-03T12:20:13Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v5"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v4</id><title type="text">test4</title><updated>2018-03-03T05:46:33Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v4"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v3</id><title type="text">test3</title><updated>2018-03-03T05:05:52Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v3"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v2</id><title type="text">test2</title><updated>2018-03-03T04:59:34Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v2"/></entry><entry><id>https://github.com/matsubara0507/test-rss/releases/tag/v1</id><title type="text">test1</title><updated>2018-03-03T04:55:52Z</updated><author><name>matsubara0507</name></author><link href="https://github.com/matsubara0507/test-rss/releases/tag/v1"/></entry><entry><id>http://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>http://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>http://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>http://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>http://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa</name></author><link href="http://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry></feed>